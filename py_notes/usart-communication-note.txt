To communicate with gps module, first we need to set up the the connection between the USART pin.

For this project, we will be using only pin PD2 and PD3 for the communication.

Setting up baud rate.
---------------------
The suitable baud rate to be use with external oscillator of 7.3728Hz is 38400 and ST22 GPS Module are capable of using that baud rate.

UBRR = 0x00B

Configuring general I/O pins
----------------------------
The DDxn bit in the DDRx Register selects the direction of this pin. If DDxn is written logic one, Pxn is configured as an output pin. If DDxn is written logic zero, Pxn is configured as an input pin.

More information on page 73.

Configuring PD2 and PD3
-----------------------
More information on page 90.

This signal need to be send to enable the pin PD2 and PD3 as Input and Output for the USART data. Signal: DDOE. But doing so will ignore the bit set at DDD3.

So what I am gonna do here is not using the signal above but setting the Data Direction Register for each pin that I am going to use:

DDD3 in DDRD to 1

and

DDD2 in DDRD to 0

Oops, I found out that I can't transmit USART using Pin D by simply setting the DDD3 to 1. Read more on page 202.

Register Description
--------------------
More information about register is on page 91.

Interrupt
-----
The interrupts information is on the page 61 in the data sheet for Atmega 324p.

Transmitting Data Code
----------------------
More information on page 164.

The following code examples show how to initialize the SPI as a Master and how to perform a simple transmission. DDR_SPI in the examples must be replaced by the actual Data Direction Register controlling the SPI pins. DD_MOSI, DD_MISO and DD_SCK must be replaced by the actual data direction bits for these pins. For example if MOSI is placed on pin PB5, replace DD_MOSI with DDB5 and DDR_SPI with DDRB.

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI) | (1<<DD_SCK);
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
}

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
}

-- Actual code

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK as output in the PD3 pin */
	DDRD |= (1<<DDD3) | (1<<)
}

The code is not complete since I found another way to use the alternate function of Pin D, which is to use the USART.