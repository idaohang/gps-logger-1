
test_sd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00002a3e  00002ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000253  00800128  00800128  00002afa  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000325f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000210  00000000  00000000  0000328e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003e26  00000000  00000000  0000349e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000066b  00000000  00000000  000072c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fd5  00000000  00000000  0000792f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c40  00000000  00000000  00008904  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000066d  00000000  00000000  00009544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005959  00000000  00000000  00009bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002f0  00000000  00000000  0000f50a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ee e3       	ldi	r30, 0x3E	; 62
      90:	fa e2       	ldi	r31, 0x2A	; 42
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 32       	cpi	r26, 0x28	; 40
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	23 e0       	ldi	r18, 0x03	; 3
      a0:	a8 e2       	ldi	r26, 0x28	; 40
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ab 37       	cpi	r26, 0x7B	; 123
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 a6 14 	call	0x294c	; 0x294c <main>
      b2:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <mem_cpy>:
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
      ba:	0f 93       	push	r16
			if (ifptr > 0 &&
      bc:	1f 93       	push	r17
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
      c2:	42 30       	cpi	r20, 0x02	; 2
      c4:	51 05       	cpc	r21, r1
      c6:	c0 f0       	brcs	.+48     	; 0xf8 <mem_cpy+0x3e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
      c8:	db 01       	movw	r26, r22
      ca:	ec 01       	movw	r28, r24
      cc:	9a 01       	movw	r18, r20
      ce:	0d 91       	ld	r16, X+
      d0:	1d 91       	ld	r17, X+
      d2:	09 93       	st	Y+, r16
      d4:	19 93       	st	Y+, r17
      d6:	22 50       	subi	r18, 0x02	; 2
      d8:	31 09       	sbc	r19, r1
      da:	22 30       	cpi	r18, 0x02	; 2
      dc:	31 05       	cpc	r19, r1
      de:	b8 f7       	brcc	.-18     	; 0xce <mem_cpy+0x14>
      e0:	da 01       	movw	r26, r20
      e2:	12 97       	sbiw	r26, 0x02	; 2
      e4:	ae 7f       	andi	r26, 0xFE	; 254
      e6:	12 96       	adiw	r26, 0x02	; 2
      e8:	fc 01       	movw	r30, r24
      ea:	ea 0f       	add	r30, r26
      ec:	fb 1f       	adc	r31, r27
      ee:	a6 0f       	add	r26, r22
      f0:	b7 1f       	adc	r27, r23
      f2:	41 70       	andi	r20, 0x01	; 1
      f4:	55 27       	eor	r21, r21
      f6:	02 c0       	rjmp	.+4      	; 0xfc <mem_cpy+0x42>
      f8:	db 01       	movw	r26, r22

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
      fa:	fc 01       	movw	r30, r24
      fc:	41 15       	cp	r20, r1
      fe:	51 05       	cpc	r21, r1
     100:	39 f0       	breq	.+14     	; 0x110 <mem_cpy+0x56>
     102:	4e 0f       	add	r20, r30
     104:	5f 1f       	adc	r21, r31
     106:	8d 91       	ld	r24, X+
     108:	81 93       	st	Z+, r24
     10a:	e4 17       	cp	r30, r20
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
     10c:	f5 07       	cpc	r31, r21
     10e:	d9 f7       	brne	.-10     	; 0x106 <mem_cpy+0x4c>
     110:	df 91       	pop	r29
     112:	cf 91       	pop	r28
     114:	1f 91       	pop	r17
     116:	0f 91       	pop	r16
     118:	08 95       	ret

0000011a <mem_set>:
     11a:	41 15       	cp	r20, r1
     11c:	51 05       	cpc	r21, r1
     11e:	39 f0       	breq	.+14     	; 0x12e <mem_set+0x14>
     120:	48 0f       	add	r20, r24
     122:	59 1f       	adc	r21, r25
     124:	fc 01       	movw	r30, r24
     126:	61 93       	st	Z+, r22
     128:	e4 17       	cp	r30, r20
     12a:	f5 07       	cpc	r31, r21
     12c:	e1 f7       	brne	.-8      	; 0x126 <mem_set+0xc>
     12e:	08 95       	ret

00000130 <ld_clust>:
     130:	0f 93       	push	r16
				ofs -= fp->fptr;
     132:	1f 93       	push	r17
     134:	fb 01       	movw	r30, r22
     136:	02 8d       	ldd	r16, Z+26	; 0x1a
     138:	13 8d       	ldd	r17, Z+27	; 0x1b
				clst = fp->clust;
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	fc 01       	movw	r30, r24
     140:	80 81       	ld	r24, Z
     142:	83 30       	cpi	r24, 0x03	; 3
     144:	61 f4       	brne	.+24     	; 0x15e <ld_clust+0x2e>
     146:	fb 01       	movw	r30, r22
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
     148:	84 89       	ldd	r24, Z+20	; 0x14
     14a:	95 89       	ldd	r25, Z+21	; 0x15
     14c:	a0 e0       	ldi	r26, 0x00	; 0
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	dc 01       	movw	r26, r24
     152:	99 27       	eor	r25, r25
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
     154:	88 27       	eor	r24, r24
     156:	08 2b       	or	r16, r24
     158:	19 2b       	or	r17, r25
     15a:	2a 2b       	or	r18, r26
     15c:	3b 2b       	or	r19, r27
					clst = create_chain(fp->fs, 0);
     15e:	60 2f       	mov	r22, r16
     160:	71 2f       	mov	r23, r17
     162:	82 2f       	mov	r24, r18
     164:	93 2f       	mov	r25, r19
     166:	1f 91       	pop	r17
     168:	0f 91       	pop	r16
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
     16a:	08 95       	ret

0000016c <st_clust>:
     16c:	fc 01       	movw	r30, r24
     16e:	53 8f       	std	Z+27, r21	; 0x1b
     170:	42 8f       	std	Z+26, r20	; 0x1a
     172:	75 8b       	std	Z+21, r23	; 0x15
     174:	64 8b       	std	Z+20, r22	; 0x14
     176:	08 95       	ret

00000178 <get_ldnumber>:
     178:	fc 01       	movw	r30, r24
     17a:	a0 81       	ld	r26, Z
     17c:	b1 81       	ldd	r27, Z+1	; 0x01
     17e:	10 97       	sbiw	r26, 0x00	; 0
     180:	31 f1       	breq	.+76     	; 0x1ce <get_ldnumber+0x56>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
     182:	4c 91       	ld	r20, X
     184:	41 32       	cpi	r20, 0x21	; 33
     186:	58 f0       	brcs	.+22     	; 0x19e <get_ldnumber+0x26>
     188:	4a 33       	cpi	r20, 0x3A	; 58
     18a:	91 f1       	breq	.+100    	; 0x1f0 <get_ldnumber+0x78>
     18c:	fd 01       	movw	r30, r26
     18e:	31 96       	adiw	r30, 0x01	; 1
     190:	9f 01       	movw	r18, r30
     192:	51 91       	ld	r21, Z+
     194:	51 32       	cpi	r21, 0x21	; 33
     196:	28 f0       	brcs	.+10     	; 0x1a2 <get_ldnumber+0x2a>
     198:	5a 33       	cpi	r21, 0x3A	; 58
					fp->sclust = clst;
     19a:	d1 f7       	brne	.-12     	; 0x190 <get_ldnumber+0x18>
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <get_ldnumber+0x2e>
     19e:	54 2f       	mov	r21, r20
     1a0:	9d 01       	movw	r18, r26
     1a2:	5a 33       	cpi	r21, 0x3A	; 58
     1a4:	b9 f4       	brne	.+46     	; 0x1d4 <get_ldnumber+0x5c>
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	40 53       	subi	r20, 0x30	; 48
				}
#endif
				fp->clust = clst;
     1aa:	51 09       	sbc	r21, r1
     1ac:	fa 01       	movw	r30, r20
     1ae:	4a 30       	cpi	r20, 0x0A	; 10
     1b0:	51 05       	cpc	r21, r1
     1b2:	98 f4       	brcc	.+38     	; 0x1da <get_ldnumber+0x62>
     1b4:	bd 01       	movw	r22, r26
			}
			if (clst != 0) {
     1b6:	6f 5f       	subi	r22, 0xFF	; 255
     1b8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ba:	26 17       	cp	r18, r22
     1bc:	37 07       	cpc	r19, r23
     1be:	81 f4       	brne	.+32     	; 0x1e0 <get_ldnumber+0x68>
     1c0:	ef 2b       	or	r30, r31
				while (ofs > bcs) {						/* Cluster following loop */
     1c2:	89 f4       	brne	.+34     	; 0x1e6 <get_ldnumber+0x6e>
     1c4:	12 96       	adiw	r26, 0x02	; 2
     1c6:	fc 01       	movw	r30, r24
     1c8:	b1 83       	std	Z+1, r27	; 0x01
     1ca:	a0 83       	st	Z, r26
     1cc:	0e c0       	rjmp	.+28     	; 0x1ea <get_ldnumber+0x72>
     1ce:	4f ef       	ldi	r20, 0xFF	; 255
     1d0:	5f ef       	ldi	r21, 0xFF	; 255
     1d2:	0b c0       	rjmp	.+22     	; 0x1ea <get_ldnumber+0x72>
     1d4:	40 e0       	ldi	r20, 0x00	; 0
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
     1d6:	50 e0       	ldi	r21, 0x00	; 0
     1d8:	08 c0       	rjmp	.+16     	; 0x1ea <get_ldnumber+0x72>
     1da:	4f ef       	ldi	r20, 0xFF	; 255
     1dc:	5f ef       	ldi	r21, 0xFF	; 255
     1de:	05 c0       	rjmp	.+10     	; 0x1ea <get_ldnumber+0x72>
     1e0:	4f ef       	ldi	r20, 0xFF	; 255
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
     1e2:	5f ef       	ldi	r21, 0xFF	; 255
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <get_ldnumber+0x72>
     1e6:	4f ef       	ldi	r20, 0xFF	; 255
     1e8:	5f ef       	ldi	r21, 0xFF	; 255
     1ea:	84 2f       	mov	r24, r20
     1ec:	95 2f       	mov	r25, r21
						if (clst == 0) {				/* When disk gets full, clip file size */
     1ee:	08 95       	ret
     1f0:	9d 01       	movw	r18, r26
     1f2:	d9 cf       	rjmp	.-78     	; 0x1a6 <get_ldnumber+0x2e>

000001f4 <validate>:
     1f4:	00 97       	sbiw	r24, 0x00	; 0
     1f6:	c9 f0       	breq	.+50     	; 0x22a <validate+0x36>
     1f8:	dc 01       	movw	r26, r24
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
     1fa:	ed 91       	ld	r30, X+
     1fc:	fc 91       	ld	r31, X
     1fe:	11 97       	sbiw	r26, 0x01	; 1
     200:	30 97       	sbiw	r30, 0x00	; 0
     202:	a9 f0       	breq	.+42     	; 0x22e <validate+0x3a>
     204:	20 81       	ld	r18, Z
     206:	22 23       	and	r18, r18
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
     208:	a1 f0       	breq	.+40     	; 0x232 <validate+0x3e>
     20a:	26 81       	ldd	r18, Z+6	; 0x06
     20c:	37 81       	ldd	r19, Z+7	; 0x07
     20e:	12 96       	adiw	r26, 0x02	; 2
     210:	8d 91       	ld	r24, X+
     212:	9c 91       	ld	r25, X
     214:	13 97       	sbiw	r26, 0x03	; 3
     216:	28 17       	cp	r18, r24
     218:	39 07       	cpc	r19, r25
     21a:	69 f4       	brne	.+26     	; 0x236 <validate+0x42>
     21c:	81 81       	ldd	r24, Z+1	; 0x01
     21e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <disk_status>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
     222:	80 ff       	sbrs	r24, 0
     224:	0a c0       	rjmp	.+20     	; 0x23a <validate+0x46>
     226:	83 e0       	ldi	r24, 0x03	; 3
     228:	08 95       	ret
     22a:	89 e0       	ldi	r24, 0x09	; 9
     22c:	08 95       	ret
     22e:	89 e0       	ldi	r24, 0x09	; 9
     230:	08 95       	ret
     232:	89 e0       	ldi	r24, 0x09	; 9
     234:	08 95       	ret
     236:	89 e0       	ldi	r24, 0x09	; 9
     238:	08 95       	ret
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	08 95       	ret

0000023e <sync_window>:
     23e:	8f 92       	push	r8
     240:	9f 92       	push	r9
     242:	af 92       	push	r10
     244:	bf 92       	push	r11
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
					fp->clust = clst;
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	ec 01       	movw	r28, r24
     258:	8c 81       	ldd	r24, Y+4	; 0x04
					fp->fptr += bcs;
     25a:	88 23       	and	r24, r24
     25c:	09 f4       	brne	.+2      	; 0x260 <sync_window+0x22>
     25e:	45 c0       	rjmp	.+138    	; 0x2ea <sync_window+0xac>
     260:	ca a4       	ldd	r12, Y+42	; 0x2a
     262:	db a4       	ldd	r13, Y+43	; 0x2b
     264:	ec a4       	ldd	r14, Y+44	; 0x2c
     266:	fd a4       	ldd	r15, Y+45	; 0x2d
     268:	5e 01       	movw	r10, r28
     26a:	8e e2       	ldi	r24, 0x2E	; 46
     26c:	a8 0e       	add	r10, r24
     26e:	b1 1c       	adc	r11, r1
     270:	01 e0       	ldi	r16, 0x01	; 1
     272:	10 e0       	ldi	r17, 0x00	; 0
     274:	a7 01       	movw	r20, r14
     276:	96 01       	movw	r18, r12
					ofs -= bcs;
     278:	b5 01       	movw	r22, r10
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	0e 94 81 13 	call	0x2702	; 0x2702 <disk_write>
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
     280:	81 11       	cpse	r24, r1
     282:	35 c0       	rjmp	.+106    	; 0x2ee <sync_window+0xb0>
     284:	1c 82       	std	Y+4, r1	; 0x04
     286:	8e 8d       	ldd	r24, Y+30	; 0x1e
     288:	9f 8d       	ldd	r25, Y+31	; 0x1f
     28a:	a8 a1       	ldd	r26, Y+32	; 0x20
     28c:	b9 a1       	ldd	r27, Y+33	; 0x21
     28e:	b7 01       	movw	r22, r14
     290:	a6 01       	movw	r20, r12
     292:	48 1b       	sub	r20, r24
     294:	59 0b       	sbc	r21, r25
     296:	6a 0b       	sbc	r22, r26
     298:	7b 0b       	sbc	r23, r27
     29a:	8e 89       	ldd	r24, Y+22	; 0x16
     29c:	9f 89       	ldd	r25, Y+23	; 0x17
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
     29e:	a8 8d       	ldd	r26, Y+24	; 0x18
     2a0:	b9 8d       	ldd	r27, Y+25	; 0x19
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
     2a2:	48 17       	cp	r20, r24
     2a4:	59 07       	cpc	r21, r25
     2a6:	6a 07       	cpc	r22, r26
     2a8:	7b 07       	cpc	r23, r27
     2aa:	18 f5       	brcc	.+70     	; 0x2f2 <sync_window+0xb4>
     2ac:	8b 80       	ldd	r8, Y+3	; 0x03
     2ae:	91 2c       	mov	r9, r1
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	88 16       	cp	r8, r24
     2b4:	91 04       	cpc	r9, r1
     2b6:	f8 f0       	brcs	.+62     	; 0x2f6 <sync_window+0xb8>
     2b8:	8e 89       	ldd	r24, Y+22	; 0x16
     2ba:	9f 89       	ldd	r25, Y+23	; 0x17
     2bc:	a8 8d       	ldd	r26, Y+24	; 0x18
     2be:	b9 8d       	ldd	r27, Y+25	; 0x19
     2c0:	c8 0e       	add	r12, r24
     2c2:	d9 1e       	adc	r13, r25
				if (ofs % SS(fp->fs)) {
     2c4:	ea 1e       	adc	r14, r26
     2c6:	fb 1e       	adc	r15, r27
     2c8:	01 e0       	ldi	r16, 0x01	; 1
     2ca:	10 e0       	ldi	r17, 0x00	; 0
     2cc:	a7 01       	movw	r20, r14
     2ce:	96 01       	movw	r18, r12
     2d0:	b5 01       	movw	r22, r10
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	0e 94 81 13 	call	0x2702	; 0x2702 <disk_write>
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	88 1a       	sub	r8, r24
     2dc:	91 08       	sbc	r9, r1
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	88 16       	cp	r8, r24
     2e2:	91 04       	cpc	r9, r1
     2e4:	49 f7       	brne	.-46     	; 0x2b8 <sync_window+0x7a>
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	07 c0       	rjmp	.+14     	; 0x2f8 <sync_window+0xba>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <sync_window+0xba>
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <sync_window+0xba>
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <sync_window+0xba>
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
					nsect += ofs / SS(fp->fs);
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	bf 90       	pop	r11
     30a:	af 90       	pop	r10
     30c:	9f 90       	pop	r9
     30e:	8f 90       	pop	r8
     310:	08 95       	ret

00000312 <move_window>:
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	ec 01       	movw	r28, r24
     324:	6a 01       	movw	r12, r20
     326:	7b 01       	movw	r14, r22
     328:	8a a5       	ldd	r24, Y+42	; 0x2a
     32a:	9b a5       	ldd	r25, Y+43	; 0x2b
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
     32c:	ac a5       	ldd	r26, Y+44	; 0x2c
     32e:	bd a5       	ldd	r27, Y+45	; 0x2d
     330:	84 17       	cp	r24, r20
     332:	95 07       	cpc	r25, r21
     334:	a6 07       	cpc	r26, r22
     336:	b7 07       	cpc	r27, r23
     338:	b1 f0       	breq	.+44     	; 0x366 <move_window+0x54>
     33a:	ce 01       	movw	r24, r28
     33c:	0e 94 1f 01 	call	0x23e	; 0x23e <sync_window>
     340:	81 11       	cpse	r24, r1
     342:	13 c0       	rjmp	.+38     	; 0x36a <move_window+0x58>
     344:	be 01       	movw	r22, r28
     346:	62 5d       	subi	r22, 0xD2	; 210
     348:	7f 4f       	sbci	r23, 0xFF	; 255
     34a:	01 e0       	ldi	r16, 0x01	; 1
     34c:	10 e0       	ldi	r17, 0x00	; 0
     34e:	a7 01       	movw	r20, r14
     350:	96 01       	movw	r18, r12
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	0e 94 2b 13 	call	0x2656	; 0x2656 <disk_read>
     358:	81 11       	cpse	r24, r1
     35a:	09 c0       	rjmp	.+18     	; 0x36e <move_window+0x5c>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1))	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
     35c:	ca a6       	std	Y+42, r12	; 0x2a
     35e:	db a6       	std	Y+43, r13	; 0x2b
     360:	ec a6       	std	Y+44, r14	; 0x2c
     362:	fd a6       	std	Y+45, r15	; 0x2d
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
     364:	05 c0       	rjmp	.+10     	; 0x370 <move_window+0x5e>
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	03 c0       	rjmp	.+6      	; 0x370 <move_window+0x5e>
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	01 c0       	rjmp	.+2      	; 0x370 <move_window+0x5e>
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
			fp->fsize = fp->fptr;
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	08 95       	ret

00000382 <check_fs>:
			fp->flag |= FA__WRITTEN;
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)						/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
     38a:	ec 01       	movw	r28, r24
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
     38c:	1c 82       	std	Y+4, r1	; 0x04
     38e:	0f ef       	ldi	r16, 0xFF	; 255
     390:	1f ef       	ldi	r17, 0xFF	; 255
     392:	98 01       	movw	r18, r16
     394:	0a a7       	std	Y+42, r16	; 0x2a
     396:	1b a7       	std	Y+43, r17	; 0x2b
     398:	2c a7       	std	Y+44, r18	; 0x2c
     39a:	3d a7       	std	Y+45, r19	; 0x2d
     39c:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
     3a0:	81 11       	cpse	r24, r1
     3a2:	24 c0       	rjmp	.+72     	; 0x3ec <check_fs+0x6a>
     3a4:	fe 01       	movw	r30, r28
     3a6:	e4 5d       	subi	r30, 0xD4	; 212
     3a8:	fd 4f       	sbci	r31, 0xFD	; 253
     3aa:	80 81       	ld	r24, Z
     3ac:	91 81       	ldd	r25, Z+1	; 0x01
     3ae:	85 35       	cpi	r24, 0x55	; 85
     3b0:	9a 4a       	sbci	r25, 0xAA	; 170
     3b2:	f1 f4       	brne	.+60     	; 0x3f0 <check_fs+0x6e>
     3b4:	fe 01       	movw	r30, r28
     3b6:	ec 59       	subi	r30, 0x9C	; 156
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
     3be:	a2 81       	ldd	r26, Z+2	; 0x02
     3c0:	b3 81       	ldd	r27, Z+3	; 0x03
     3c2:	bb 27       	eor	r27, r27
     3c4:	86 34       	cpi	r24, 0x46	; 70
     3c6:	91 44       	sbci	r25, 0x41	; 65
     3c8:	a4 45       	sbci	r26, 0x54	; 84
     3ca:	b1 05       	cpc	r27, r1
     3cc:	99 f0       	breq	.+38     	; 0x3f4 <check_fs+0x72>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     3ce:	c0 58       	subi	r28, 0x80	; 128
     3d0:	df 4f       	sbci	r29, 0xFF	; 255
     3d2:	48 81       	ld	r20, Y
     3d4:	59 81       	ldd	r21, Y+1	; 0x01
     3d6:	6a 81       	ldd	r22, Y+2	; 0x02
     3d8:	7b 81       	ldd	r23, Y+3	; 0x03
     3da:	77 27       	eor	r23, r23
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	46 34       	cpi	r20, 0x46	; 70
     3e0:	51 44       	sbci	r21, 0x41	; 65
     3e2:	64 45       	sbci	r22, 0x54	; 84
     3e4:	71 05       	cpc	r23, r1
     3e6:	39 f4       	brne	.+14     	; 0x3f6 <check_fs+0x74>
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <check_fs+0x74>
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <check_fs+0x74>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <check_fs+0x74>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
		return 0;
     3f4:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	08 95       	ret

00000400 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
     400:	2f 92       	push	r2
     402:	3f 92       	push	r3
     404:	4f 92       	push	r4
     406:	5f 92       	push	r5
     408:	6f 92       	push	r6
     40a:	7f 92       	push	r7
     40c:	8f 92       	push	r8
     40e:	9f 92       	push	r9
     410:	af 92       	push	r10
     412:	bf 92       	push	r11
     414:	cf 92       	push	r12
     416:	df 92       	push	r13
     418:	ef 92       	push	r14
     41a:	ff 92       	push	r15
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	6d 97       	sbiw	r28, 0x1d	; 29
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	6c 01       	movw	r12, r24
     436:	cb 01       	movw	r24, r22
     438:	b4 2e       	mov	r11, r20
	WORD nrsv;
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
     43a:	d6 01       	movw	r26, r12
     43c:	1d 92       	st	X+, r1
     43e:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
     440:	0e 94 bc 00 	call	0x178	; 0x178 <get_ldnumber>
     444:	7c 01       	movw	r14, r24
	if (vol < 0) return FR_INVALID_DRIVE;
     446:	99 23       	and	r25, r25
     448:	0c f4       	brge	.+2      	; 0x44c <find_volume+0x4c>
     44a:	31 c2       	rjmp	.+1122   	; 0x8ae <find_volume+0x4ae>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
     44c:	fc 01       	movw	r30, r24
     44e:	ee 0f       	add	r30, r30
     450:	ff 1f       	adc	r31, r31
     452:	e8 5d       	subi	r30, 0xD8	; 216
     454:	fe 4f       	sbci	r31, 0xFE	; 254
     456:	00 81       	ld	r16, Z
     458:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     45a:	01 15       	cp	r16, r1
     45c:	11 05       	cpc	r17, r1
     45e:	09 f4       	brne	.+2      	; 0x462 <find_volume+0x62>
     460:	28 c2       	rjmp	.+1104   	; 0x8b2 <find_volume+0x4b2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
     462:	f6 01       	movw	r30, r12
     464:	11 83       	std	Z+1, r17	; 0x01
     466:	00 83       	st	Z, r16

	if (fs->fs_type) {					/* If the volume has been mounted */
     468:	d8 01       	movw	r26, r16
     46a:	8c 91       	ld	r24, X
     46c:	88 23       	and	r24, r24
     46e:	69 f0       	breq	.+26     	; 0x48a <find_volume+0x8a>
		stat = disk_status(fs->drv);
     470:	11 96       	adiw	r26, 0x01	; 1
     472:	8c 91       	ld	r24, X
     474:	0e 94 5e 12 	call	0x24bc	; 0x24bc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
     478:	80 fd       	sbrc	r24, 0
     47a:	07 c0       	rjmp	.+14     	; 0x48a <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
     47c:	bb 20       	and	r11, r11
     47e:	09 f4       	brne	.+2      	; 0x482 <find_volume+0x82>
     480:	1a c2       	rjmp	.+1076   	; 0x8b6 <find_volume+0x4b6>
     482:	82 fd       	sbrc	r24, 2
     484:	1a c2       	rjmp	.+1076   	; 0x8ba <find_volume+0x4ba>
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	68 c2       	rjmp	.+1232   	; 0x95a <__stack+0x5b>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     48a:	f8 01       	movw	r30, r16
     48c:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
     48e:	e1 82       	std	Z+1, r14	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     490:	8e 2d       	mov	r24, r14
     492:	0e 94 65 12 	call	0x24ca	; 0x24ca <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     496:	80 fd       	sbrc	r24, 0
     498:	12 c2       	rjmp	.+1060   	; 0x8be <find_volume+0x4be>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     49a:	bb 20       	and	r11, r11
     49c:	11 f0       	breq	.+4      	; 0x4a2 <find_volume+0xa2>
     49e:	82 fd       	sbrc	r24, 2
     4a0:	10 c2       	rjmp	.+1056   	; 0x8c2 <find_volume+0x4c2>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	ba 01       	movw	r22, r20
     4a8:	c8 01       	movw	r24, r16
     4aa:	0e 94 c1 01 	call	0x382	; 0x382 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <find_volume+0xb4>
     4b2:	46 c0       	rjmp	.+140    	; 0x540 <find_volume+0x140>
     4b4:	ee 24       	eor	r14, r14
     4b6:	e3 94       	inc	r14
     4b8:	f1 2c       	mov	r15, r1
     4ba:	ec 0e       	add	r14, r28
     4bc:	fd 1e       	adc	r15, r29
     4be:	f7 01       	movw	r30, r14
     4c0:	2e eb       	ldi	r18, 0xBE	; 190
     4c2:	31 e0       	ldi	r19, 0x01	; 1
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	ba 01       	movw	r22, r20
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
     4ca:	d9 01       	movw	r26, r18
     4cc:	9e 96       	adiw	r26, 0x2e	; 46
     4ce:	a0 0f       	add	r26, r16
     4d0:	b1 1f       	adc	r27, r17
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     4d2:	14 96       	adiw	r26, 0x04	; 4
     4d4:	8c 91       	ld	r24, X
     4d6:	14 97       	sbiw	r26, 0x04	; 4
     4d8:	88 23       	and	r24, r24
     4da:	39 f0       	breq	.+14     	; 0x4ea <find_volume+0xea>
     4dc:	18 96       	adiw	r26, 0x08	; 8
     4de:	8d 91       	ld	r24, X+
     4e0:	9d 91       	ld	r25, X+
     4e2:	0d 90       	ld	r0, X+
     4e4:	bc 91       	ld	r27, X
     4e6:	a0 2d       	mov	r26, r0
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <find_volume+0xee>
     4ea:	db 01       	movw	r26, r22
     4ec:	ca 01       	movw	r24, r20
     4ee:	81 93       	st	Z+, r24
     4f0:	91 93       	st	Z+, r25
     4f2:	a1 93       	st	Z+, r26
     4f4:	b1 93       	st	Z+, r27
     4f6:	20 5f       	subi	r18, 0xF0	; 240
     4f8:	3f 4f       	sbci	r19, 0xFF	; 255
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
     4fa:	2e 3f       	cpi	r18, 0xFE	; 254
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	38 07       	cpc	r19, r24
     500:	21 f7       	brne	.-56     	; 0x4ca <find_volume+0xca>
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     502:	6e 01       	movw	r12, r28
     504:	91 e1       	ldi	r25, 0x11	; 17
     506:	c9 0e       	add	r12, r25
     508:	d1 1c       	adc	r13, r1
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     50a:	68 94       	set
     50c:	bb 24       	eor	r11, r11
     50e:	b1 f8       	bld	r11, 1
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
     510:	d7 01       	movw	r26, r14
     512:	4d 90       	ld	r4, X+
     514:	5d 90       	ld	r5, X+
     516:	6d 90       	ld	r6, X+
     518:	7d 90       	ld	r7, X+
     51a:	7d 01       	movw	r14, r26
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     51c:	41 14       	cp	r4, r1
     51e:	51 04       	cpc	r5, r1
     520:	61 04       	cpc	r6, r1
     522:	71 04       	cpc	r7, r1
     524:	41 f0       	breq	.+16     	; 0x536 <find_volume+0x136>
     526:	b3 01       	movw	r22, r6
     528:	a2 01       	movw	r20, r4
     52a:	c8 01       	movw	r24, r16
     52c:	0e 94 c1 01 	call	0x382	; 0x382 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
     530:	81 11       	cpse	r24, r1
     532:	02 c0       	rjmp	.+4      	; 0x538 <find_volume+0x138>
     534:	08 c0       	rjmp	.+16     	; 0x546 <find_volume+0x146>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     536:	8b 2d       	mov	r24, r11
		} while (!LD2PT(vol) && fmt && ++i < 4);
     538:	ec 14       	cp	r14, r12
     53a:	fd 04       	cpc	r15, r13
     53c:	49 f7       	brne	.-46     	; 0x510 <find_volume+0x110>
     53e:	03 c0       	rjmp	.+6      	; 0x546 <find_volume+0x146>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
     540:	41 2c       	mov	r4, r1
     542:	51 2c       	mov	r5, r1
     544:	32 01       	movw	r6, r4
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     546:	83 30       	cpi	r24, 0x03	; 3
     548:	09 f4       	brne	.+2      	; 0x54c <find_volume+0x14c>
     54a:	bd c1       	rjmp	.+890    	; 0x8c6 <find_volume+0x4c6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     54c:	81 11       	cpse	r24, r1
     54e:	bd c1       	rjmp	.+890    	; 0x8ca <find_volume+0x4ca>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     550:	f8 01       	movw	r30, r16
     552:	81 ad       	ldd	r24, Z+57	; 0x39
     554:	92 ad       	ldd	r25, Z+58	; 0x3a
     556:	81 15       	cp	r24, r1
     558:	92 40       	sbci	r25, 0x02	; 2
     55a:	09 f0       	breq	.+2      	; 0x55e <find_volume+0x15e>
     55c:	b8 c1       	rjmp	.+880    	; 0x8ce <find_volume+0x4ce>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
     55e:	f8 01       	movw	r30, r16
     560:	ec 5b       	subi	r30, 0xBC	; 188
     562:	ff 4f       	sbci	r31, 0xFF	; 255
     564:	c0 80       	ld	r12, Z
     566:	d1 80       	ldd	r13, Z+1	; 0x01
     568:	e1 2c       	mov	r14, r1
     56a:	f1 2c       	mov	r15, r1
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
     56c:	c1 14       	cp	r12, r1
     56e:	d1 04       	cpc	r13, r1
     570:	e1 04       	cpc	r14, r1
     572:	f1 04       	cpc	r15, r1
     574:	39 f4       	brne	.+14     	; 0x584 <find_volume+0x184>
     576:	f8 01       	movw	r30, r16
     578:	ee 5a       	subi	r30, 0xAE	; 174
     57a:	ff 4f       	sbci	r31, 0xFF	; 255
     57c:	c0 80       	ld	r12, Z
     57e:	d1 80       	ldd	r13, Z+1	; 0x01
     580:	e2 80       	ldd	r14, Z+2	; 0x02
     582:	f3 80       	ldd	r15, Z+3	; 0x03
	fs->fsize = fasize;
     584:	d8 01       	movw	r26, r16
     586:	56 96       	adiw	r26, 0x16	; 22
     588:	cd 92       	st	X+, r12
     58a:	dd 92       	st	X+, r13
     58c:	ed 92       	st	X+, r14
     58e:	fc 92       	st	X, r15
     590:	59 97       	sbiw	r26, 0x19	; 25

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
     592:	de 96       	adiw	r26, 0x3e	; 62
     594:	ac 91       	ld	r26, X
     596:	f8 01       	movw	r30, r16
     598:	a3 83       	std	Z+3, r26	; 0x03
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
     59a:	8a 2f       	mov	r24, r26
     59c:	81 50       	subi	r24, 0x01	; 1
     59e:	82 30       	cpi	r24, 0x02	; 2
     5a0:	08 f0       	brcs	.+2      	; 0x5a4 <find_volume+0x1a4>
     5a2:	97 c1       	rjmp	.+814    	; 0x8d2 <find_volume+0x4d2>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
     5a4:	f3 ad       	ldd	r31, Z+59	; 0x3b
     5a6:	f9 8b       	std	Y+17, r31	; 0x11
     5a8:	2f 2f       	mov	r18, r31
     5aa:	f8 01       	movw	r30, r16
     5ac:	22 83       	std	Z+2, r18	; 0x02
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
     5ae:	22 23       	and	r18, r18
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <find_volume+0x1b4>
     5b2:	91 c1       	rjmp	.+802    	; 0x8d6 <find_volume+0x4d6>
     5b4:	82 2f       	mov	r24, r18
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	9c 01       	movw	r18, r24
     5ba:	21 50       	subi	r18, 0x01	; 1
     5bc:	31 09       	sbc	r19, r1
     5be:	82 23       	and	r24, r18
     5c0:	93 23       	and	r25, r19
     5c2:	89 2b       	or	r24, r25
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <find_volume+0x1c8>
     5c6:	89 c1       	rjmp	.+786    	; 0x8da <find_volume+0x4da>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
     5c8:	ff 96       	adiw	r30, 0x3f	; 63
     5ca:	20 80       	ld	r2, Z
     5cc:	31 80       	ldd	r3, Z+1	; 0x01
     5ce:	f8 01       	movw	r30, r16
     5d0:	31 86       	std	Z+9, r3	; 0x09
     5d2:	20 86       	std	Z+8, r2	; 0x08
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
     5d4:	c1 01       	movw	r24, r2
     5d6:	8f 70       	andi	r24, 0x0F	; 15
     5d8:	99 27       	eor	r25, r25
     5da:	89 2b       	or	r24, r25
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <find_volume+0x1e0>
     5de:	7f c1       	rjmp	.+766    	; 0x8de <find_volume+0x4de>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
     5e0:	ef 5b       	subi	r30, 0xBF	; 191
     5e2:	ff 4f       	sbci	r31, 0xFF	; 255
     5e4:	80 80       	ld	r8, Z
     5e6:	91 80       	ldd	r9, Z+1	; 0x01
     5e8:	a1 2c       	mov	r10, r1
     5ea:	b1 2c       	mov	r11, r1
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
     5ec:	81 14       	cp	r8, r1
     5ee:	91 04       	cpc	r9, r1
     5f0:	a1 04       	cpc	r10, r1
     5f2:	b1 04       	cpc	r11, r1
     5f4:	39 f4       	brne	.+14     	; 0x604 <find_volume+0x204>
     5f6:	f8 01       	movw	r30, r16
     5f8:	e2 5b       	subi	r30, 0xB2	; 178
     5fa:	ff 4f       	sbci	r31, 0xFF	; 255
     5fc:	80 80       	ld	r8, Z
     5fe:	91 80       	ldd	r9, Z+1	; 0x01
     600:	a2 80       	ldd	r10, Z+2	; 0x02
     602:	b3 80       	ldd	r11, Z+3	; 0x03

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
     604:	f8 01       	movw	r30, r16
     606:	04 ac       	ldd	r0, Z+60	; 0x3c
     608:	f5 ad       	ldd	r31, Z+61	; 0x3d
     60a:	e0 2d       	mov	r30, r0
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
     60c:	30 97       	sbiw	r30, 0x00	; 0
     60e:	09 f4       	brne	.+2      	; 0x612 <find_volume+0x212>
     610:	68 c1       	rjmp	.+720    	; 0x8e2 <find_volume+0x4e2>
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	a7 01       	movw	r20, r14
     616:	96 01       	movw	r18, r12
     618:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__muluhisi3>
     61c:	6a 8f       	std	Y+26, r22	; 0x1a
     61e:	7b 8f       	std	Y+27, r23	; 0x1b
     620:	8c 8f       	std	Y+28, r24	; 0x1c
     622:	9d 8f       	std	Y+29, r25	; 0x1d

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
     624:	9f 01       	movw	r18, r30
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	50 e0       	ldi	r21, 0x00	; 0
     62a:	2e 8b       	std	Y+22, r18	; 0x16
     62c:	3f 8b       	std	Y+23, r19	; 0x17
     62e:	48 8f       	std	Y+24, r20	; 0x18
     630:	59 8f       	std	Y+25, r21	; 0x19
     632:	c1 01       	movw	r24, r2
     634:	92 95       	swap	r25
     636:	82 95       	swap	r24
     638:	8f 70       	andi	r24, 0x0F	; 15
     63a:	89 27       	eor	r24, r25
     63c:	9f 70       	andi	r25, 0x0F	; 15
     63e:	89 27       	eor	r24, r25
     640:	28 0f       	add	r18, r24
     642:	39 1f       	adc	r19, r25
     644:	41 1d       	adc	r20, r1
     646:	51 1d       	adc	r21, r1
     648:	da 01       	movw	r26, r20
     64a:	c9 01       	movw	r24, r18
     64c:	2a 8d       	ldd	r18, Y+26	; 0x1a
     64e:	3b 8d       	ldd	r19, Y+27	; 0x1b
     650:	4c 8d       	ldd	r20, Y+28	; 0x1c
     652:	5d 8d       	ldd	r21, Y+29	; 0x1d
     654:	28 0f       	add	r18, r24
     656:	39 1f       	adc	r19, r25
     658:	4a 1f       	adc	r20, r26
     65a:	5b 1f       	adc	r21, r27
     65c:	2a 8b       	std	Y+18, r18	; 0x12
     65e:	3b 8b       	std	Y+19, r19	; 0x13
     660:	4c 8b       	std	Y+20, r20	; 0x14
     662:	5d 8b       	std	Y+21, r21	; 0x15
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     664:	82 16       	cp	r8, r18
     666:	93 06       	cpc	r9, r19
     668:	a4 06       	cpc	r10, r20
     66a:	b5 06       	cpc	r11, r21
     66c:	08 f4       	brcc	.+2      	; 0x670 <find_volume+0x270>
     66e:	3b c1       	rjmp	.+630    	; 0x8e6 <find_volume+0x4e6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
     670:	c5 01       	movw	r24, r10
     672:	b4 01       	movw	r22, r8
     674:	62 1b       	sub	r22, r18
     676:	73 0b       	sbc	r23, r19
     678:	84 0b       	sbc	r24, r20
     67a:	95 0b       	sbc	r25, r21
     67c:	e9 89       	ldd	r30, Y+17	; 0x11
     67e:	2e 2f       	mov	r18, r30
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__udivmodsi4>
     68a:	da 01       	movw	r26, r20
     68c:	c9 01       	movw	r24, r18
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     68e:	21 15       	cp	r18, r1
     690:	31 05       	cpc	r19, r1
     692:	41 05       	cpc	r20, r1
     694:	51 05       	cpc	r21, r1
     696:	09 f4       	brne	.+2      	; 0x69a <find_volume+0x29a>
     698:	28 c1       	rjmp	.+592    	; 0x8ea <find_volume+0x4ea>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     69a:	26 3f       	cpi	r18, 0xF6	; 246
     69c:	ff e0       	ldi	r31, 0x0F	; 15
     69e:	3f 07       	cpc	r19, r31
     6a0:	41 05       	cpc	r20, r1
     6a2:	51 05       	cpc	r21, r1
     6a4:	18 f4       	brcc	.+6      	; 0x6ac <find_volume+0x2ac>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	69 8b       	std	Y+17, r22	; 0x11
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <find_volume+0x2b0>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     6ac:	e2 e0       	ldi	r30, 0x02	; 2
     6ae:	e9 8b       	std	Y+17, r30	; 0x11
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     6b0:	86 3f       	cpi	r24, 0xF6	; 246
     6b2:	9f 4f       	sbci	r25, 0xFF	; 255
     6b4:	a1 05       	cpc	r26, r1
     6b6:	b1 05       	cpc	r27, r1
     6b8:	08 f0       	brcs	.+2      	; 0x6bc <find_volume+0x2bc>
     6ba:	1f c1       	rjmp	.+574    	; 0x8fa <find_volume+0x4fa>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     6bc:	81 2c       	mov	r8, r1
     6be:	91 2c       	mov	r9, r1
     6c0:	54 01       	movw	r10, r8
     6c2:	68 94       	set
     6c4:	81 f8       	bld	r8, 1
     6c6:	82 0e       	add	r8, r18
     6c8:	93 1e       	adc	r9, r19
     6ca:	a4 1e       	adc	r10, r20
     6cc:	b5 1e       	adc	r11, r21
     6ce:	d8 01       	movw	r26, r16
     6d0:	52 96       	adiw	r26, 0x12	; 18
     6d2:	8d 92       	st	X+, r8
     6d4:	9d 92       	st	X+, r9
     6d6:	ad 92       	st	X+, r10
     6d8:	bc 92       	st	X, r11
     6da:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
     6dc:	f8 01       	movw	r30, r16
     6de:	42 8e       	std	Z+26, r4	; 0x1a
     6e0:	53 8e       	std	Z+27, r5	; 0x1b
     6e2:	64 8e       	std	Z+28, r6	; 0x1c
     6e4:	75 8e       	std	Z+29, r7	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     6e6:	8e 89       	ldd	r24, Y+22	; 0x16
     6e8:	9f 89       	ldd	r25, Y+23	; 0x17
     6ea:	a8 8d       	ldd	r26, Y+24	; 0x18
     6ec:	b9 8d       	ldd	r27, Y+25	; 0x19
     6ee:	84 0d       	add	r24, r4
     6f0:	95 1d       	adc	r25, r5
     6f2:	a6 1d       	adc	r26, r6
     6f4:	b7 1d       	adc	r27, r7
     6f6:	86 8f       	std	Z+30, r24	; 0x1e
     6f8:	97 8f       	std	Z+31, r25	; 0x1f
     6fa:	a0 a3       	std	Z+32, r26	; 0x20
     6fc:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
     6fe:	4a 89       	ldd	r20, Y+18	; 0x12
     700:	5b 89       	ldd	r21, Y+19	; 0x13
     702:	6c 89       	ldd	r22, Y+20	; 0x14
     704:	7d 89       	ldd	r23, Y+21	; 0x15
     706:	44 0d       	add	r20, r4
     708:	55 1d       	adc	r21, r5
     70a:	66 1d       	adc	r22, r6
     70c:	77 1d       	adc	r23, r7
     70e:	46 a3       	std	Z+38, r20	; 0x26
     710:	57 a3       	std	Z+39, r21	; 0x27
     712:	60 a7       	std	Z+40, r22	; 0x28
     714:	71 a7       	std	Z+41, r23	; 0x29
	if (fmt == FS_FAT32) {
     716:	f9 89       	ldd	r31, Y+17	; 0x11
     718:	f3 30       	cpi	r31, 0x03	; 3
     71a:	c1 f4       	brne	.+48     	; 0x74c <find_volume+0x34c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     71c:	23 28       	or	r2, r3
     71e:	09 f0       	breq	.+2      	; 0x722 <find_volume+0x322>
     720:	e6 c0       	rjmp	.+460    	; 0x8ee <find_volume+0x4ee>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
     722:	f8 01       	movw	r30, r16
     724:	e6 5a       	subi	r30, 0xA6	; 166
     726:	ff 4f       	sbci	r31, 0xFF	; 255
     728:	80 81       	ld	r24, Z
     72a:	91 81       	ldd	r25, Z+1	; 0x01
     72c:	a2 81       	ldd	r26, Z+2	; 0x02
     72e:	b3 81       	ldd	r27, Z+3	; 0x03
     730:	f8 01       	movw	r30, r16
     732:	82 a3       	std	Z+34, r24	; 0x22
     734:	93 a3       	std	Z+35, r25	; 0x23
     736:	a4 a3       	std	Z+36, r26	; 0x24
     738:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
     73a:	88 0c       	add	r8, r8
     73c:	99 1c       	adc	r9, r9
     73e:	aa 1c       	adc	r10, r10
     740:	bb 1c       	adc	r11, r11
     742:	88 0c       	add	r8, r8
     744:	99 1c       	adc	r9, r9
     746:	aa 1c       	adc	r10, r10
     748:	bb 1c       	adc	r11, r11
     74a:	2d c0       	rjmp	.+90     	; 0x7a6 <find_volume+0x3a6>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     74c:	23 28       	or	r2, r3
     74e:	09 f4       	brne	.+2      	; 0x752 <find_volume+0x352>
     750:	d0 c0       	rjmp	.+416    	; 0x8f2 <find_volume+0x4f2>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
     752:	2a 8d       	ldd	r18, Y+26	; 0x1a
     754:	3b 8d       	ldd	r19, Y+27	; 0x1b
     756:	4c 8d       	ldd	r20, Y+28	; 0x1c
     758:	5d 8d       	ldd	r21, Y+29	; 0x1d
     75a:	82 0f       	add	r24, r18
     75c:	93 1f       	adc	r25, r19
     75e:	a4 1f       	adc	r26, r20
     760:	b5 1f       	adc	r27, r21
     762:	f8 01       	movw	r30, r16
     764:	82 a3       	std	Z+34, r24	; 0x22
     766:	93 a3       	std	Z+35, r25	; 0x23
     768:	a4 a3       	std	Z+36, r26	; 0x24
     76a:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     76c:	f9 89       	ldd	r31, Y+17	; 0x11
     76e:	f2 30       	cpi	r31, 0x02	; 2
     770:	29 f4       	brne	.+10     	; 0x77c <find_volume+0x37c>
     772:	88 0c       	add	r8, r8
     774:	99 1c       	adc	r9, r9
     776:	aa 1c       	adc	r10, r10
     778:	bb 1c       	adc	r11, r11
     77a:	15 c0       	rjmp	.+42     	; 0x7a6 <find_volume+0x3a6>
     77c:	a3 e0       	ldi	r26, 0x03	; 3
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	a5 01       	movw	r20, r10
     782:	94 01       	movw	r18, r8
     784:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__muluhisi3>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	b6 95       	lsr	r27
     78e:	a7 95       	ror	r26
     790:	97 95       	ror	r25
     792:	87 95       	ror	r24
     794:	21 e0       	ldi	r18, 0x01	; 1
     796:	82 22       	and	r8, r18
     798:	99 24       	eor	r9, r9
     79a:	aa 24       	eor	r10, r10
     79c:	bb 24       	eor	r11, r11
     79e:	88 0e       	add	r8, r24
     7a0:	99 1e       	adc	r9, r25
     7a2:	aa 1e       	adc	r10, r26
     7a4:	bb 1e       	adc	r11, r27
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
     7a6:	3f ef       	ldi	r19, 0xFF	; 255
     7a8:	83 0e       	add	r8, r19
     7aa:	31 e0       	ldi	r19, 0x01	; 1
     7ac:	93 1e       	adc	r9, r19
     7ae:	a1 1c       	adc	r10, r1
     7b0:	b1 1c       	adc	r11, r1
     7b2:	07 2e       	mov	r0, r23
     7b4:	79 e0       	ldi	r23, 0x09	; 9
     7b6:	b6 94       	lsr	r11
     7b8:	a7 94       	ror	r10
     7ba:	97 94       	ror	r9
     7bc:	87 94       	ror	r8
     7be:	7a 95       	dec	r23
     7c0:	d1 f7       	brne	.-12     	; 0x7b6 <find_volume+0x3b6>
     7c2:	70 2d       	mov	r23, r0
     7c4:	c8 14       	cp	r12, r8
     7c6:	d9 04       	cpc	r13, r9
     7c8:	ea 04       	cpc	r14, r10
     7ca:	fb 04       	cpc	r15, r11
     7cc:	08 f4       	brcc	.+2      	; 0x7d0 <find_volume+0x3d0>
     7ce:	93 c0       	rjmp	.+294    	; 0x8f6 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	9f ef       	ldi	r25, 0xFF	; 255
     7d4:	dc 01       	movw	r26, r24
     7d6:	f8 01       	movw	r30, r16
     7d8:	86 87       	std	Z+14, r24	; 0x0e
     7da:	97 87       	std	Z+15, r25	; 0x0f
     7dc:	a0 8b       	std	Z+16, r26	; 0x10
     7de:	b1 8b       	std	Z+17, r27	; 0x11
     7e0:	82 87       	std	Z+10, r24	; 0x0a
     7e2:	93 87       	std	Z+11, r25	; 0x0b
     7e4:	a4 87       	std	Z+12, r26	; 0x0c
     7e6:	b5 87       	std	Z+13, r27	; 0x0d

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
     7e8:	80 e8       	ldi	r24, 0x80	; 128
     7ea:	85 83       	std	Z+5, r24	; 0x05
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
     7ec:	f9 89       	ldd	r31, Y+17	; 0x11
     7ee:	f3 30       	cpi	r31, 0x03	; 3
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <find_volume+0x3f4>
     7f2:	4b c0       	rjmp	.+150    	; 0x88a <find_volume+0x48a>
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
     7f4:	f8 01       	movw	r30, r16
     7f6:	e2 5a       	subi	r30, 0xA2	; 162
     7f8:	ff 4f       	sbci	r31, 0xFF	; 255
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	09 f0       	breq	.+2      	; 0x804 <find_volume+0x404>
     802:	43 c0       	rjmp	.+134    	; 0x88a <find_volume+0x48a>
		&& move_window(fs, bsect + 1) == FR_OK)
     804:	b3 01       	movw	r22, r6
     806:	a2 01       	movw	r20, r4
     808:	4f 5f       	subi	r20, 0xFF	; 255
     80a:	5f 4f       	sbci	r21, 0xFF	; 255
     80c:	6f 4f       	sbci	r22, 0xFF	; 255
     80e:	7f 4f       	sbci	r23, 0xFF	; 255
     810:	c8 01       	movw	r24, r16
     812:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
     816:	81 11       	cpse	r24, r1
     818:	38 c0       	rjmp	.+112    	; 0x88a <find_volume+0x48a>
	{
		fs->fsi_flag = 0;
     81a:	d8 01       	movw	r26, r16
     81c:	15 96       	adiw	r26, 0x05	; 5
     81e:	1c 92       	st	X, r1
		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
     820:	f8 01       	movw	r30, r16
     822:	e4 5d       	subi	r30, 0xD4	; 212
     824:	fd 4f       	sbci	r31, 0xFD	; 253
     826:	80 81       	ld	r24, Z
     828:	91 81       	ldd	r25, Z+1	; 0x01
     82a:	85 35       	cpi	r24, 0x55	; 85
     82c:	9a 4a       	sbci	r25, 0xAA	; 170
     82e:	69 f5       	brne	.+90     	; 0x88a <find_volume+0x48a>
			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
     830:	f8 01       	movw	r30, r16
     832:	86 a5       	ldd	r24, Z+46	; 0x2e
     834:	97 a5       	ldd	r25, Z+47	; 0x2f
     836:	a0 a9       	ldd	r26, Z+48	; 0x30
     838:	b1 a9       	ldd	r27, Z+49	; 0x31
     83a:	82 35       	cpi	r24, 0x52	; 82
     83c:	92 45       	sbci	r25, 0x52	; 82
     83e:	a1 46       	sbci	r26, 0x61	; 97
     840:	b1 44       	sbci	r27, 0x41	; 65
     842:	19 f5       	brne	.+70     	; 0x88a <find_volume+0x48a>
			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
     844:	f8 01       	movw	r30, r16
     846:	ee 5e       	subi	r30, 0xEE	; 238
     848:	fd 4f       	sbci	r31, 0xFD	; 253
     84a:	80 81       	ld	r24, Z
     84c:	91 81       	ldd	r25, Z+1	; 0x01
     84e:	a2 81       	ldd	r26, Z+2	; 0x02
     850:	b3 81       	ldd	r27, Z+3	; 0x03
     852:	82 37       	cpi	r24, 0x72	; 114
     854:	92 47       	sbci	r25, 0x72	; 114
     856:	a1 44       	sbci	r26, 0x41	; 65
     858:	b1 46       	sbci	r27, 0x61	; 97
     85a:	b9 f4       	brne	.+46     	; 0x88a <find_volume+0x48a>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
     85c:	f8 01       	movw	r30, r16
     85e:	ea 5e       	subi	r30, 0xEA	; 234
     860:	fd 4f       	sbci	r31, 0xFD	; 253
     862:	80 81       	ld	r24, Z
     864:	91 81       	ldd	r25, Z+1	; 0x01
     866:	a2 81       	ldd	r26, Z+2	; 0x02
     868:	b3 81       	ldd	r27, Z+3	; 0x03
     86a:	f8 01       	movw	r30, r16
     86c:	86 87       	std	Z+14, r24	; 0x0e
     86e:	97 87       	std	Z+15, r25	; 0x0f
     870:	a0 8b       	std	Z+16, r26	; 0x10
     872:	b1 8b       	std	Z+17, r27	; 0x11
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
     874:	e6 5e       	subi	r30, 0xE6	; 230
     876:	fd 4f       	sbci	r31, 0xFD	; 253
     878:	80 81       	ld	r24, Z
     87a:	91 81       	ldd	r25, Z+1	; 0x01
     87c:	a2 81       	ldd	r26, Z+2	; 0x02
     87e:	b3 81       	ldd	r27, Z+3	; 0x03
     880:	f8 01       	movw	r30, r16
     882:	82 87       	std	Z+10, r24	; 0x0a
     884:	93 87       	std	Z+11, r25	; 0x0b
     886:	a4 87       	std	Z+12, r26	; 0x0c
     888:	b5 87       	std	Z+13, r27	; 0x0d
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
     88a:	e9 89       	ldd	r30, Y+17	; 0x11
     88c:	d8 01       	movw	r26, r16
     88e:	ec 93       	st	X, r30
	fs->id = ++Fsid;	/* File system mount ID */
     890:	80 91 2a 01 	lds	r24, 0x012A
     894:	90 91 2b 01 	lds	r25, 0x012B
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	90 93 2b 01 	sts	0x012B, r25
     89e:	80 93 2a 01 	sts	0x012A, r24
     8a2:	17 96       	adiw	r26, 0x07	; 7
     8a4:	9c 93       	st	X, r25
     8a6:	8e 93       	st	-X, r24
     8a8:	16 97       	sbiw	r26, 0x06	; 6
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	56 c0       	rjmp	.+172    	; 0x95a <__stack+0x5b>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
     8ae:	8b e0       	ldi	r24, 0x0B	; 11
     8b0:	54 c0       	rjmp	.+168    	; 0x95a <__stack+0x5b>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     8b2:	8c e0       	ldi	r24, 0x0C	; 12
     8b4:	52 c0       	rjmp	.+164    	; 0x95a <__stack+0x5b>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	50 c0       	rjmp	.+160    	; 0x95a <__stack+0x5b>

	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
     8ba:	8a e0       	ldi	r24, 0x0A	; 10
     8bc:	4e c0       	rjmp	.+156    	; 0x95a <__stack+0x5b>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
     8be:	83 e0       	ldi	r24, 0x03	; 3
     8c0:	4c c0       	rjmp	.+152    	; 0x95a <__stack+0x5b>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
     8c2:	8a e0       	ldi	r24, 0x0A	; 10
     8c4:	4a c0       	rjmp	.+148    	; 0x95a <__stack+0x5b>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	48 c0       	rjmp	.+144    	; 0x95a <__stack+0x5b>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     8ca:	8d e0       	ldi	r24, 0x0D	; 13
     8cc:	46 c0       	rjmp	.+140    	; 0x95a <__stack+0x5b>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
     8ce:	8d e0       	ldi	r24, 0x0D	; 13
     8d0:	44 c0       	rjmp	.+136    	; 0x95a <__stack+0x5b>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
     8d2:	8d e0       	ldi	r24, 0x0D	; 13
     8d4:	42 c0       	rjmp	.+132    	; 0x95a <__stack+0x5b>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
		return FR_NO_FILESYSTEM;
     8d6:	8d e0       	ldi	r24, 0x0D	; 13
     8d8:	40 c0       	rjmp	.+128    	; 0x95a <__stack+0x5b>
     8da:	8d e0       	ldi	r24, 0x0D	; 13
     8dc:	3e c0       	rjmp	.+124    	; 0x95a <__stack+0x5b>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
		return FR_NO_FILESYSTEM;
     8de:	8d e0       	ldi	r24, 0x0D	; 13
     8e0:	3c c0       	rjmp	.+120    	; 0x95a <__stack+0x5b>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
     8e2:	8d e0       	ldi	r24, 0x0D	; 13
     8e4:	3a c0       	rjmp	.+116    	; 0x95a <__stack+0x5b>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     8e6:	8d e0       	ldi	r24, 0x0D	; 13
     8e8:	38 c0       	rjmp	.+112    	; 0x95a <__stack+0x5b>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     8ea:	8d e0       	ldi	r24, 0x0D	; 13
     8ec:	36 c0       	rjmp	.+108    	; 0x95a <__stack+0x5b>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->volbase = bsect;								/* Volume start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	fs->database = bsect + sysect;						/* Data start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     8ee:	8d e0       	ldi	r24, 0x0D	; 13
     8f0:	34 c0       	rjmp	.+104    	; 0x95a <__stack+0x5b>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     8f2:	8d e0       	ldi	r24, 0x0D	; 13
     8f4:	32 c0       	rjmp	.+100    	; 0x95a <__stack+0x5b>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
		return FR_NO_FILESYSTEM;
     8f6:	8d e0       	ldi	r24, 0x0D	; 13
     8f8:	30 c0       	rjmp	.+96     	; 0x95a <__stack+0x5b>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     8fa:	81 2c       	mov	r8, r1
     8fc:	91 2c       	mov	r9, r1
     8fe:	54 01       	movw	r10, r8
     900:	68 94       	set
     902:	81 f8       	bld	r8, 1
     904:	82 0e       	add	r8, r18
     906:	93 1e       	adc	r9, r19
     908:	a4 1e       	adc	r10, r20
     90a:	b5 1e       	adc	r11, r21
     90c:	d8 01       	movw	r26, r16
     90e:	52 96       	adiw	r26, 0x12	; 18
     910:	8d 92       	st	X+, r8
     912:	9d 92       	st	X+, r9
     914:	ad 92       	st	X+, r10
     916:	bc 92       	st	X, r11
     918:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
     91a:	f8 01       	movw	r30, r16
     91c:	42 8e       	std	Z+26, r4	; 0x1a
     91e:	53 8e       	std	Z+27, r5	; 0x1b
     920:	64 8e       	std	Z+28, r6	; 0x1c
     922:	75 8e       	std	Z+29, r7	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     924:	8e 89       	ldd	r24, Y+22	; 0x16
     926:	9f 89       	ldd	r25, Y+23	; 0x17
     928:	a8 8d       	ldd	r26, Y+24	; 0x18
     92a:	b9 8d       	ldd	r27, Y+25	; 0x19
     92c:	84 0d       	add	r24, r4
     92e:	95 1d       	adc	r25, r5
     930:	a6 1d       	adc	r26, r6
     932:	b7 1d       	adc	r27, r7
     934:	86 8f       	std	Z+30, r24	; 0x1e
     936:	97 8f       	std	Z+31, r25	; 0x1f
     938:	a0 a3       	std	Z+32, r26	; 0x20
     93a:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
     93c:	8a 89       	ldd	r24, Y+18	; 0x12
     93e:	9b 89       	ldd	r25, Y+19	; 0x13
     940:	ac 89       	ldd	r26, Y+20	; 0x14
     942:	bd 89       	ldd	r27, Y+21	; 0x15
     944:	84 0d       	add	r24, r4
     946:	95 1d       	adc	r25, r5
     948:	a6 1d       	adc	r26, r6
     94a:	b7 1d       	adc	r27, r7
     94c:	86 a3       	std	Z+38, r24	; 0x26
     94e:	97 a3       	std	Z+39, r25	; 0x27
     950:	a0 a7       	std	Z+40, r26	; 0x28
     952:	b1 a7       	std	Z+41, r27	; 0x29
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     954:	f3 e0       	ldi	r31, 0x03	; 3
     956:	f9 8b       	std	Y+17, r31	; 0x11
     958:	e1 ce       	rjmp	.-574    	; 0x71c <find_volume+0x31c>
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
     95a:	6d 96       	adiw	r28, 0x1d	; 29
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	bf 90       	pop	r11
     978:	af 90       	pop	r10
     97a:	9f 90       	pop	r9
     97c:	8f 90       	pop	r8
     97e:	7f 90       	pop	r7
     980:	6f 90       	pop	r6
     982:	5f 90       	pop	r5
     984:	4f 90       	pop	r4
     986:	3f 90       	pop	r3
     988:	2f 90       	pop	r2
     98a:	08 95       	ret

0000098c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	ec 01       	movw	r28, r24
	FRESULT res;


	res = sync_window(fs);
     99a:	0e 94 1f 01 	call	0x23e	; 0x23e <sync_window>
     99e:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
     9a0:	81 11       	cpse	r24, r1
     9a2:	62 c0       	rjmp	.+196    	; 0xa68 <sync_fs+0xdc>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
     9a4:	88 81       	ld	r24, Y
     9a6:	83 30       	cpi	r24, 0x03	; 3
     9a8:	09 f0       	breq	.+2      	; 0x9ac <sync_fs+0x20>
     9aa:	54 c0       	rjmp	.+168    	; 0xa54 <sync_fs+0xc8>
     9ac:	8d 81       	ldd	r24, Y+5	; 0x05
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <sync_fs+0x28>
     9b2:	50 c0       	rjmp	.+160    	; 0xa54 <sync_fs+0xc8>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
     9b4:	7e 01       	movw	r14, r28
     9b6:	8e e2       	ldi	r24, 0x2E	; 46
     9b8:	e8 0e       	add	r14, r24
     9ba:	f1 1c       	adc	r15, r1
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	52 e0       	ldi	r21, 0x02	; 2
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	c7 01       	movw	r24, r14
     9c6:	0e 94 8d 00 	call	0x11a	; 0x11a <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
     9ca:	fe 01       	movw	r30, r28
     9cc:	e4 5d       	subi	r30, 0xD4	; 212
     9ce:	fd 4f       	sbci	r31, 0xFD	; 253
     9d0:	85 e5       	ldi	r24, 0x55	; 85
     9d2:	9a ea       	ldi	r25, 0xAA	; 170
     9d4:	91 83       	std	Z+1, r25	; 0x01
     9d6:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
     9d8:	82 e5       	ldi	r24, 0x52	; 82
     9da:	92 e5       	ldi	r25, 0x52	; 82
     9dc:	a1 e6       	ldi	r26, 0x61	; 97
     9de:	b1 e4       	ldi	r27, 0x41	; 65
     9e0:	8e a7       	std	Y+46, r24	; 0x2e
     9e2:	9f a7       	std	Y+47, r25	; 0x2f
     9e4:	a8 ab       	std	Y+48, r26	; 0x30
     9e6:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
     9e8:	fe 01       	movw	r30, r28
     9ea:	ee 5e       	subi	r30, 0xEE	; 238
     9ec:	fd 4f       	sbci	r31, 0xFD	; 253
     9ee:	82 e7       	ldi	r24, 0x72	; 114
     9f0:	92 e7       	ldi	r25, 0x72	; 114
     9f2:	a1 e4       	ldi	r26, 0x41	; 65
     9f4:	b1 e6       	ldi	r27, 0x61	; 97
     9f6:	80 83       	st	Z, r24
     9f8:	91 83       	std	Z+1, r25	; 0x01
     9fa:	a2 83       	std	Z+2, r26	; 0x02
     9fc:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
     9fe:	fe 01       	movw	r30, r28
     a00:	ea 5e       	subi	r30, 0xEA	; 234
     a02:	fd 4f       	sbci	r31, 0xFD	; 253
     a04:	8e 85       	ldd	r24, Y+14	; 0x0e
     a06:	9f 85       	ldd	r25, Y+15	; 0x0f
     a08:	a8 89       	ldd	r26, Y+16	; 0x10
     a0a:	b9 89       	ldd	r27, Y+17	; 0x11
     a0c:	80 83       	st	Z, r24
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	a2 83       	std	Z+2, r26	; 0x02
     a12:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
     a14:	fe 01       	movw	r30, r28
     a16:	e6 5e       	subi	r30, 0xE6	; 230
     a18:	fd 4f       	sbci	r31, 0xFD	; 253
     a1a:	8a 85       	ldd	r24, Y+10	; 0x0a
     a1c:	9b 85       	ldd	r25, Y+11	; 0x0b
     a1e:	ac 85       	ldd	r26, Y+12	; 0x0c
     a20:	bd 85       	ldd	r27, Y+13	; 0x0d
     a22:	80 83       	st	Z, r24
     a24:	91 83       	std	Z+1, r25	; 0x01
     a26:	a2 83       	std	Z+2, r26	; 0x02
     a28:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
     a2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a2e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a30:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a32:	9c 01       	movw	r18, r24
     a34:	ad 01       	movw	r20, r26
     a36:	2f 5f       	subi	r18, 0xFF	; 255
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	2a a7       	std	Y+42, r18	; 0x2a
     a40:	3b a7       	std	Y+43, r19	; 0x2b
     a42:	4c a7       	std	Y+44, r20	; 0x2c
     a44:	5d a7       	std	Y+45, r21	; 0x2d
			disk_write(fs->drv, fs->win, fs->winsect, 1);
     a46:	01 e0       	ldi	r16, 0x01	; 1
     a48:	10 e0       	ldi	r17, 0x00	; 0
     a4a:	b7 01       	movw	r22, r14
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	0e 94 81 13 	call	0x2702	; 0x2702 <disk_write>
			fs->fsi_flag = 0;
     a52:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	0e 94 e5 13 	call	0x27ca	; 0x27ca <disk_ioctl>
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	81 11       	cpse	r24, r1
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <sync_fs+0xdc>
     a66:	90 e0       	ldi	r25, 0x00	; 0
			res = FR_DISK_ERR;
	}

	return res;
}
     a68:	89 2f       	mov	r24, r25
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	08 95       	ret

00000a78 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	fc 01       	movw	r30, r24
	clst -= 2;
     a86:	9a 01       	movw	r18, r20
     a88:	ab 01       	movw	r20, r22
     a8a:	22 50       	subi	r18, 0x02	; 2
     a8c:	31 09       	sbc	r19, r1
     a8e:	41 09       	sbc	r20, r1
     a90:	51 09       	sbc	r21, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     a92:	c2 88       	ldd	r12, Z+18	; 0x12
     a94:	d3 88       	ldd	r13, Z+19	; 0x13
     a96:	e4 88       	ldd	r14, Z+20	; 0x14
     a98:	f5 88       	ldd	r15, Z+21	; 0x15
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	c8 1a       	sub	r12, r24
     a9e:	d1 08       	sbc	r13, r1
     aa0:	e1 08       	sbc	r14, r1
     aa2:	f1 08       	sbc	r15, r1
     aa4:	2c 15       	cp	r18, r12
     aa6:	3d 05       	cpc	r19, r13
     aa8:	4e 05       	cpc	r20, r14
     aaa:	5f 05       	cpc	r21, r15
     aac:	68 f4       	brcc	.+26     	; 0xac8 <clust2sect+0x50>
	return clst * fs->csize + fs->database;
     aae:	a2 81       	ldd	r26, Z+2	; 0x02
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__muluhisi3>
     ab6:	06 a1       	ldd	r16, Z+38	; 0x26
     ab8:	17 a1       	ldd	r17, Z+39	; 0x27
     aba:	20 a5       	ldd	r18, Z+40	; 0x28
     abc:	31 a5       	ldd	r19, Z+41	; 0x29
     abe:	06 0f       	add	r16, r22
     ac0:	17 1f       	adc	r17, r23
     ac2:	28 1f       	adc	r18, r24
     ac4:	39 1f       	adc	r19, r25
     ac6:	03 c0       	rjmp	.+6      	; 0xace <clust2sect+0x56>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     ac8:	00 e0       	ldi	r16, 0x00	; 0
     aca:	10 e0       	ldi	r17, 0x00	; 0
     acc:	98 01       	movw	r18, r16
	return clst * fs->csize + fs->database;
}
     ace:	60 2f       	mov	r22, r16
     ad0:	71 2f       	mov	r23, r17
     ad2:	82 2f       	mov	r24, r18
     ad4:	93 2f       	mov	r25, r19
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	08 95       	ret

00000ae4 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	ec 01       	movw	r28, r24
     af8:	6a 01       	movw	r12, r20
     afa:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
     afc:	42 30       	cpi	r20, 0x02	; 2
     afe:	51 05       	cpc	r21, r1
     b00:	61 05       	cpc	r22, r1
     b02:	71 05       	cpc	r23, r1
     b04:	08 f4       	brcc	.+2      	; 0xb08 <get_fat+0x24>
     b06:	a5 c0       	rjmp	.+330    	; 0xc52 <get_fat+0x16e>
     b08:	4a 89       	ldd	r20, Y+18	; 0x12
     b0a:	5b 89       	ldd	r21, Y+19	; 0x13
     b0c:	6c 89       	ldd	r22, Y+20	; 0x14
     b0e:	7d 89       	ldd	r23, Y+21	; 0x15
     b10:	c4 16       	cp	r12, r20
     b12:	d5 06       	cpc	r13, r21
     b14:	e6 06       	cpc	r14, r22
     b16:	f7 06       	cpc	r15, r23
     b18:	08 f0       	brcs	.+2      	; 0xb1c <get_fat+0x38>
     b1a:	a0 c0       	rjmp	.+320    	; 0xc5c <get_fat+0x178>
		return 1;

	switch (fs->fs_type) {
     b1c:	88 81       	ld	r24, Y
     b1e:	82 30       	cpi	r24, 0x02	; 2
     b20:	09 f4       	brne	.+2      	; 0xb24 <get_fat+0x40>
     b22:	4a c0       	rjmp	.+148    	; 0xbb8 <get_fat+0xd4>
     b24:	83 30       	cpi	r24, 0x03	; 3
     b26:	09 f4       	brne	.+2      	; 0xb2a <get_fat+0x46>
     b28:	68 c0       	rjmp	.+208    	; 0xbfa <get_fat+0x116>
     b2a:	81 30       	cpi	r24, 0x01	; 1
     b2c:	09 f0       	breq	.+2      	; 0xb30 <get_fat+0x4c>
     b2e:	9b c0       	rjmp	.+310    	; 0xc66 <get_fat+0x182>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
     b30:	86 01       	movw	r16, r12
     b32:	16 95       	lsr	r17
     b34:	07 95       	ror	r16
     b36:	0c 0d       	add	r16, r12
     b38:	1d 1d       	adc	r17, r13
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
     b3a:	c8 01       	movw	r24, r16
     b3c:	89 2f       	mov	r24, r25
     b3e:	99 27       	eor	r25, r25
     b40:	86 95       	lsr	r24
     b42:	4e 8d       	ldd	r20, Y+30	; 0x1e
     b44:	5f 8d       	ldd	r21, Y+31	; 0x1f
     b46:	68 a1       	ldd	r22, Y+32	; 0x20
     b48:	79 a1       	ldd	r23, Y+33	; 0x21
     b4a:	48 0f       	add	r20, r24
     b4c:	59 1f       	adc	r21, r25
     b4e:	61 1d       	adc	r22, r1
     b50:	71 1d       	adc	r23, r1
     b52:	ce 01       	movw	r24, r28
     b54:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
     b58:	81 11       	cpse	r24, r1
     b5a:	8a c0       	rjmp	.+276    	; 0xc70 <get_fat+0x18c>
		wc = fs->win[bc % SS(fs)]; bc++;
     b5c:	f8 01       	movw	r30, r16
     b5e:	f1 70       	andi	r31, 0x01	; 1
     b60:	ec 0f       	add	r30, r28
     b62:	fd 1f       	adc	r31, r29
     b64:	b6 a4       	ldd	r11, Z+46	; 0x2e
     b66:	0f 5f       	subi	r16, 0xFF	; 255
     b68:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
     b6a:	c8 01       	movw	r24, r16
     b6c:	89 2f       	mov	r24, r25
     b6e:	99 27       	eor	r25, r25
     b70:	86 95       	lsr	r24
     b72:	4e 8d       	ldd	r20, Y+30	; 0x1e
     b74:	5f 8d       	ldd	r21, Y+31	; 0x1f
     b76:	68 a1       	ldd	r22, Y+32	; 0x20
     b78:	79 a1       	ldd	r23, Y+33	; 0x21
     b7a:	48 0f       	add	r20, r24
     b7c:	59 1f       	adc	r21, r25
     b7e:	61 1d       	adc	r22, r1
     b80:	71 1d       	adc	r23, r1
     b82:	ce 01       	movw	r24, r28
     b84:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
     b88:	81 11       	cpse	r24, r1
     b8a:	76 c0       	rjmp	.+236    	; 0xc78 <get_fat+0x194>
		wc |= fs->win[bc % SS(fs)] << 8;
     b8c:	11 70       	andi	r17, 0x01	; 1
     b8e:	c0 0f       	add	r28, r16
     b90:	d1 1f       	adc	r29, r17
     b92:	9e a5       	ldd	r25, Y+46	; 0x2e
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	8c 01       	movw	r16, r24
     b98:	0b 29       	or	r16, r11
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
     b9a:	c0 fe       	sbrs	r12, 0
     b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <get_fat+0xcc>
     b9e:	12 95       	swap	r17
     ba0:	02 95       	swap	r16
     ba2:	0f 70       	andi	r16, 0x0F	; 15
     ba4:	01 27       	eor	r16, r17
     ba6:	1f 70       	andi	r17, 0x0F	; 15
     ba8:	01 27       	eor	r16, r17
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	6f c0       	rjmp	.+222    	; 0xc8e <get_fat+0x1aa>
     bb0:	1f 70       	andi	r17, 0x0F	; 15
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	6b c0       	rjmp	.+214    	; 0xc8e <get_fat+0x1aa>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
     bb8:	77 27       	eor	r23, r23
     bba:	6f 2d       	mov	r22, r15
     bbc:	5e 2d       	mov	r21, r14
     bbe:	4d 2d       	mov	r20, r13
     bc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bc2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     bc4:	a8 a1       	ldd	r26, Y+32	; 0x20
     bc6:	b9 a1       	ldd	r27, Y+33	; 0x21
     bc8:	48 0f       	add	r20, r24
     bca:	59 1f       	adc	r21, r25
     bcc:	6a 1f       	adc	r22, r26
     bce:	7b 1f       	adc	r23, r27
     bd0:	ce 01       	movw	r24, r28
     bd2:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
     bd6:	81 11       	cpse	r24, r1
     bd8:	53 c0       	rjmp	.+166    	; 0xc80 <get_fat+0x19c>
		p = &fs->win[clst * 2 % SS(fs)];
     bda:	cc 0c       	add	r12, r12
     bdc:	dd 1c       	adc	r13, r13
     bde:	ee 1c       	adc	r14, r14
     be0:	ff 1c       	adc	r15, r15
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	d8 22       	and	r13, r24
     be6:	ee 24       	eor	r14, r14
     be8:	ff 24       	eor	r15, r15
		return LD_WORD(p);
     bea:	fe 01       	movw	r30, r28
     bec:	ec 0d       	add	r30, r12
     bee:	fd 1d       	adc	r31, r13
     bf0:	06 a5       	ldd	r16, Z+46	; 0x2e
     bf2:	17 a5       	ldd	r17, Z+47	; 0x2f
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	4a c0       	rjmp	.+148    	; 0xc8e <get_fat+0x1aa>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
     bfa:	b7 01       	movw	r22, r14
     bfc:	a6 01       	movw	r20, r12
     bfe:	68 94       	set
     c00:	16 f8       	bld	r1, 6
     c02:	76 95       	lsr	r23
     c04:	67 95       	ror	r22
     c06:	57 95       	ror	r21
     c08:	47 95       	ror	r20
     c0a:	16 94       	lsr	r1
     c0c:	d1 f7       	brne	.-12     	; 0xc02 <get_fat+0x11e>
     c0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c10:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c12:	a8 a1       	ldd	r26, Y+32	; 0x20
     c14:	b9 a1       	ldd	r27, Y+33	; 0x21
     c16:	48 0f       	add	r20, r24
     c18:	59 1f       	adc	r21, r25
     c1a:	6a 1f       	adc	r22, r26
     c1c:	7b 1f       	adc	r23, r27
     c1e:	ce 01       	movw	r24, r28
     c20:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
     c24:	81 11       	cpse	r24, r1
     c26:	30 c0       	rjmp	.+96     	; 0xc88 <get_fat+0x1a4>
		p = &fs->win[clst * 4 % SS(fs)];
     c28:	cc 0c       	add	r12, r12
     c2a:	dd 1c       	adc	r13, r13
     c2c:	ee 1c       	adc	r14, r14
     c2e:	ff 1c       	adc	r15, r15
     c30:	cc 0c       	add	r12, r12
     c32:	dd 1c       	adc	r13, r13
     c34:	ee 1c       	adc	r14, r14
     c36:	ff 1c       	adc	r15, r15
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	d8 22       	and	r13, r24
     c3c:	ee 24       	eor	r14, r14
     c3e:	ff 24       	eor	r15, r15
		return LD_DWORD(p) & 0x0FFFFFFF;
     c40:	fe 01       	movw	r30, r28
     c42:	ec 0d       	add	r30, r12
     c44:	fd 1d       	adc	r31, r13
     c46:	06 a5       	ldd	r16, Z+46	; 0x2e
     c48:	17 a5       	ldd	r17, Z+47	; 0x2f
     c4a:	20 a9       	ldd	r18, Z+48	; 0x30
     c4c:	31 a9       	ldd	r19, Z+49	; 0x31
     c4e:	3f 70       	andi	r19, 0x0F	; 15
     c50:	1e c0       	rjmp	.+60     	; 0xc8e <get_fat+0x1aa>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
     c52:	01 e0       	ldi	r16, 0x01	; 1
     c54:	10 e0       	ldi	r17, 0x00	; 0
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	19 c0       	rjmp	.+50     	; 0xc8e <get_fat+0x1aa>
     c5c:	01 e0       	ldi	r16, 0x01	; 1
     c5e:	10 e0       	ldi	r17, 0x00	; 0
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	14 c0       	rjmp	.+40     	; 0xc8e <get_fat+0x1aa>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;

	default:
		return 1;
     c66:	01 e0       	ldi	r16, 0x01	; 1
     c68:	10 e0       	ldi	r17, 0x00	; 0
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	0f c0       	rjmp	.+30     	; 0xc8e <get_fat+0x1aa>
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
     c70:	0f ef       	ldi	r16, 0xFF	; 255
     c72:	1f ef       	ldi	r17, 0xFF	; 255
     c74:	98 01       	movw	r18, r16
     c76:	0b c0       	rjmp	.+22     	; 0xc8e <get_fat+0x1aa>
     c78:	0f ef       	ldi	r16, 0xFF	; 255
     c7a:	1f ef       	ldi	r17, 0xFF	; 255
     c7c:	98 01       	movw	r18, r16
     c7e:	07 c0       	rjmp	.+14     	; 0xc8e <get_fat+0x1aa>
     c80:	0f ef       	ldi	r16, 0xFF	; 255
     c82:	1f ef       	ldi	r17, 0xFF	; 255
     c84:	98 01       	movw	r18, r16
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <get_fat+0x1aa>
     c88:	0f ef       	ldi	r16, 0xFF	; 255
     c8a:	1f ef       	ldi	r17, 0xFF	; 255
     c8c:	98 01       	movw	r18, r16
}
     c8e:	60 2f       	mov	r22, r16
     c90:	71 2f       	mov	r23, r17
     c92:	82 2f       	mov	r24, r18
     c94:	93 2f       	mov	r25, r19
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	bf 90       	pop	r11
     ca8:	08 95       	ret

00000caa <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
     caa:	af 92       	push	r10
     cac:	bf 92       	push	r11
     cae:	cf 92       	push	r12
     cb0:	df 92       	push	r13
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
     cc0:	8b 01       	movw	r16, r22
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
     cc2:	7d 83       	std	Y+5, r23	; 0x05
     cc4:	6c 83       	std	Y+4, r22	; 0x04
	clst = dp->sclust;		/* Table start cluster (0:root) */
     cc6:	ce 80       	ldd	r12, Y+6	; 0x06
     cc8:	df 80       	ldd	r13, Y+7	; 0x07
     cca:	e8 84       	ldd	r14, Y+8	; 0x08
     ccc:	f9 84       	ldd	r15, Y+9	; 0x09
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	c8 16       	cp	r12, r24
     cd2:	d1 04       	cpc	r13, r1
     cd4:	e1 04       	cpc	r14, r1
     cd6:	f1 04       	cpc	r15, r1
     cd8:	09 f4       	brne	.+2      	; 0xcdc <dir_sdi+0x32>
     cda:	8c c0       	rjmp	.+280    	; 0xdf4 <dir_sdi+0x14a>
     cdc:	e8 81       	ld	r30, Y
     cde:	f9 81       	ldd	r31, Y+1	; 0x01
     ce0:	82 89       	ldd	r24, Z+18	; 0x12
     ce2:	93 89       	ldd	r25, Z+19	; 0x13
     ce4:	a4 89       	ldd	r26, Z+20	; 0x14
     ce6:	b5 89       	ldd	r27, Z+21	; 0x15
     ce8:	c8 16       	cp	r12, r24
     cea:	d9 06       	cpc	r13, r25
     cec:	ea 06       	cpc	r14, r26
     cee:	fb 06       	cpc	r15, r27
     cf0:	08 f0       	brcs	.+2      	; 0xcf4 <dir_sdi+0x4a>
     cf2:	82 c0       	rjmp	.+260    	; 0xdf8 <dir_sdi+0x14e>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     cf4:	c1 14       	cp	r12, r1
     cf6:	d1 04       	cpc	r13, r1
     cf8:	e1 04       	cpc	r14, r1
     cfa:	f1 04       	cpc	r15, r1
     cfc:	c1 f4       	brne	.+48     	; 0xd2e <dir_sdi+0x84>
     cfe:	80 81       	ld	r24, Z
     d00:	83 30       	cpi	r24, 0x03	; 3
     d02:	41 f4       	brne	.+16     	; 0xd14 <dir_sdi+0x6a>
		clst = dp->fs->dirbase;
     d04:	82 a1       	ldd	r24, Z+34	; 0x22
     d06:	93 a1       	ldd	r25, Z+35	; 0x23
     d08:	a4 a1       	ldd	r26, Z+36	; 0x24
     d0a:	b5 a1       	ldd	r27, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	a1 05       	cpc	r26, r1
     d10:	b1 05       	cpc	r27, r1
     d12:	59 f4       	brne	.+22     	; 0xd2a <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
     d14:	80 85       	ldd	r24, Z+8	; 0x08
     d16:	91 85       	ldd	r25, Z+9	; 0x09
     d18:	08 17       	cp	r16, r24
     d1a:	19 07       	cpc	r17, r25
     d1c:	08 f0       	brcs	.+2      	; 0xd20 <dir_sdi+0x76>
     d1e:	6e c0       	rjmp	.+220    	; 0xdfc <dir_sdi+0x152>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
     d20:	62 a1       	ldd	r22, Z+34	; 0x22
     d22:	73 a1       	ldd	r23, Z+35	; 0x23
     d24:	84 a1       	ldd	r24, Z+36	; 0x24
     d26:	95 a1       	ldd	r25, Z+37	; 0x25
     d28:	37 c0       	rjmp	.+110    	; 0xd98 <dir_sdi+0xee>
	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;
     d2a:	6c 01       	movw	r12, r24
     d2c:	7d 01       	movw	r14, r26
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
     d2e:	a2 80       	ldd	r10, Z+2	; 0x02
     d30:	80 e1       	ldi	r24, 0x10	; 16
     d32:	a8 9e       	mul	r10, r24
     d34:	50 01       	movw	r10, r0
     d36:	11 24       	eor	r1, r1
		while (idx >= ic) {	/* Follow cluster chain */
     d38:	0a 15       	cp	r16, r10
     d3a:	1b 05       	cpc	r17, r11
     d3c:	38 f1       	brcs	.+78     	; 0xd8c <dir_sdi+0xe2>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	88 81       	ld	r24, Y
     d44:	99 81       	ldd	r25, Y+1	; 0x01
     d46:	0e 94 72 05 	call	0xae4	; 0xae4 <get_fat>
     d4a:	6b 01       	movw	r12, r22
     d4c:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     d4e:	8f ef       	ldi	r24, 0xFF	; 255
     d50:	c8 16       	cp	r12, r24
     d52:	d8 06       	cpc	r13, r24
     d54:	e8 06       	cpc	r14, r24
     d56:	f8 06       	cpc	r15, r24
     d58:	09 f4       	brne	.+2      	; 0xd5c <dir_sdi+0xb2>
     d5a:	52 c0       	rjmp	.+164    	; 0xe00 <dir_sdi+0x156>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	c8 16       	cp	r12, r24
     d60:	d1 04       	cpc	r13, r1
     d62:	e1 04       	cpc	r14, r1
     d64:	f1 04       	cpc	r15, r1
     d66:	08 f4       	brcc	.+2      	; 0xd6a <dir_sdi+0xc0>
     d68:	4d c0       	rjmp	.+154    	; 0xe04 <dir_sdi+0x15a>
     d6a:	e8 81       	ld	r30, Y
     d6c:	f9 81       	ldd	r31, Y+1	; 0x01
     d6e:	82 89       	ldd	r24, Z+18	; 0x12
     d70:	93 89       	ldd	r25, Z+19	; 0x13
     d72:	a4 89       	ldd	r26, Z+20	; 0x14
     d74:	b5 89       	ldd	r27, Z+21	; 0x15
     d76:	c8 16       	cp	r12, r24
     d78:	d9 06       	cpc	r13, r25
     d7a:	ea 06       	cpc	r14, r26
     d7c:	fb 06       	cpc	r15, r27
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <dir_sdi+0xd8>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <dir_sdi+0x15e>
				return FR_INT_ERR;
			idx -= ic;
     d82:	0a 19       	sub	r16, r10
     d84:	1b 09       	sbc	r17, r11
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
     d86:	0a 15       	cp	r16, r10
     d88:	1b 05       	cpc	r17, r11
     d8a:	c8 f6       	brcc	.-78     	; 0xd3e <dir_sdi+0x94>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
     d8c:	b7 01       	movw	r22, r14
     d8e:	a6 01       	movw	r20, r12
     d90:	88 81       	ld	r24, Y
     d92:	99 81       	ldd	r25, Y+1	; 0x01
     d94:	0e 94 3c 05 	call	0xa78	; 0xa78 <clust2sect>
	}
	dp->clust = clst;	/* Current cluster# */
     d98:	ca 86       	std	Y+10, r12	; 0x0a
     d9a:	db 86       	std	Y+11, r13	; 0x0b
     d9c:	ec 86       	std	Y+12, r14	; 0x0c
     d9e:	fd 86       	std	Y+13, r15	; 0x0d
	if (!sect) return FR_INT_ERR;
     da0:	61 15       	cp	r22, r1
     da2:	71 05       	cpc	r23, r1
     da4:	81 05       	cpc	r24, r1
     da6:	91 05       	cpc	r25, r1
     da8:	89 f1       	breq	.+98     	; 0xe0c <dir_sdi+0x162>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
     daa:	98 01       	movw	r18, r16
     dac:	32 95       	swap	r19
     dae:	22 95       	swap	r18
     db0:	2f 70       	andi	r18, 0x0F	; 15
     db2:	23 27       	eor	r18, r19
     db4:	3f 70       	andi	r19, 0x0F	; 15
     db6:	23 27       	eor	r18, r19
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	82 0f       	add	r24, r18
     dbe:	93 1f       	adc	r25, r19
     dc0:	a1 1d       	adc	r26, r1
     dc2:	b1 1d       	adc	r27, r1
     dc4:	8e 87       	std	Y+14, r24	; 0x0e
     dc6:	9f 87       	std	Y+15, r25	; 0x0f
     dc8:	a8 8b       	std	Y+16, r26	; 0x10
     dca:	b9 8b       	std	Y+17, r27	; 0x11
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
     dcc:	0f 70       	andi	r16, 0x0F	; 15
     dce:	11 27       	eor	r17, r17
     dd0:	c8 01       	movw	r24, r16
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	82 95       	swap	r24
     dd8:	92 95       	swap	r25
     dda:	90 7f       	andi	r25, 0xF0	; 240
     ddc:	98 27       	eor	r25, r24
     dde:	80 7f       	andi	r24, 0xF0	; 240
     de0:	98 27       	eor	r25, r24
     de2:	8e 96       	adiw	r24, 0x2e	; 46
     de4:	28 81       	ld	r18, Y
     de6:	39 81       	ldd	r19, Y+1	; 0x01
     de8:	82 0f       	add	r24, r18
     dea:	93 1f       	adc	r25, r19
     dec:	9b 8b       	std	Y+19, r25	; 0x13
     dee:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	0d c0       	rjmp	.+26     	; 0xe0e <dir_sdi+0x164>


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	0b c0       	rjmp	.+22     	; 0xe0e <dir_sdi+0x164>
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <dir_sdi+0x164>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <dir_sdi+0x164>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <dir_sdi+0x164>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <dir_sdi+0x164>
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <dir_sdi+0x164>
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
     e0c:	82 e0       	ldi	r24, 0x02	; 2
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	df 90       	pop	r13
     e1c:	cf 90       	pop	r12
     e1e:	bf 90       	pop	r11
     e20:	af 90       	pop	r10
     e22:	08 95       	ret

00000e24 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
     e24:	4f 92       	push	r4
     e26:	5f 92       	push	r5
     e28:	6f 92       	push	r6
     e2a:	7f 92       	push	r7
     e2c:	8f 92       	push	r8
     e2e:	9f 92       	push	r9
     e30:	af 92       	push	r10
     e32:	bf 92       	push	r11
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	ec 01       	movw	r28, r24
     e46:	2a 01       	movw	r4, r20
     e48:	3b 01       	movw	r6, r22
     e4a:	68 01       	movw	r12, r16
     e4c:	79 01       	movw	r14, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
     e4e:	52 e0       	ldi	r21, 0x02	; 2
     e50:	45 16       	cp	r4, r21
     e52:	51 04       	cpc	r5, r1
     e54:	61 04       	cpc	r6, r1
     e56:	71 04       	cpc	r7, r1
     e58:	08 f4       	brcc	.+2      	; 0xe5c <put_fat+0x38>
     e5a:	d7 c0       	rjmp	.+430    	; 0x100a <put_fat+0x1e6>
     e5c:	8a 89       	ldd	r24, Y+18	; 0x12
     e5e:	9b 89       	ldd	r25, Y+19	; 0x13
     e60:	ac 89       	ldd	r26, Y+20	; 0x14
     e62:	bd 89       	ldd	r27, Y+21	; 0x15
     e64:	48 16       	cp	r4, r24
     e66:	59 06       	cpc	r5, r25
     e68:	6a 06       	cpc	r6, r26
     e6a:	7b 06       	cpc	r7, r27
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <put_fat+0x4c>
     e6e:	cf c0       	rjmp	.+414    	; 0x100e <put_fat+0x1ea>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
     e70:	88 81       	ld	r24, Y
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	09 f4       	brne	.+2      	; 0xe78 <put_fat+0x54>
     e76:	69 c0       	rjmp	.+210    	; 0xf4a <put_fat+0x126>
     e78:	83 30       	cpi	r24, 0x03	; 3
     e7a:	09 f4       	brne	.+2      	; 0xe7e <put_fat+0x5a>
     e7c:	88 c0       	rjmp	.+272    	; 0xf8e <put_fat+0x16a>
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	09 f0       	breq	.+2      	; 0xe84 <put_fat+0x60>
     e82:	bf c0       	rjmp	.+382    	; 0x1002 <put_fat+0x1de>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
     e84:	82 01       	movw	r16, r4
     e86:	16 95       	lsr	r17
     e88:	07 95       	ror	r16
     e8a:	04 0d       	add	r16, r4
     e8c:	15 1d       	adc	r17, r5
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     e8e:	c8 01       	movw	r24, r16
     e90:	89 2f       	mov	r24, r25
     e92:	99 27       	eor	r25, r25
     e94:	86 95       	lsr	r24
     e96:	4e 8d       	ldd	r20, Y+30	; 0x1e
     e98:	5f 8d       	ldd	r21, Y+31	; 0x1f
     e9a:	68 a1       	ldd	r22, Y+32	; 0x20
     e9c:	79 a1       	ldd	r23, Y+33	; 0x21
     e9e:	48 0f       	add	r20, r24
     ea0:	59 1f       	adc	r21, r25
     ea2:	61 1d       	adc	r22, r1
     ea4:	71 1d       	adc	r23, r1
     ea6:	ce 01       	movw	r24, r28
     ea8:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
			if (res != FR_OK) break;
     eac:	81 11       	cpse	r24, r1
     eae:	aa c0       	rjmp	.+340    	; 0x1004 <put_fat+0x1e0>
			p = &fs->win[bc % SS(fs)];
     eb0:	c8 01       	movw	r24, r16
     eb2:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     eb4:	81 2c       	mov	r8, r1
     eb6:	91 2c       	mov	r9, r1
     eb8:	54 01       	movw	r10, r8
     eba:	83 94       	inc	r8
     ebc:	84 20       	and	r8, r4
     ebe:	95 20       	and	r9, r5
     ec0:	a6 20       	and	r10, r6
     ec2:	b7 20       	and	r11, r7
     ec4:	40 fe       	sbrs	r4, 0
     ec6:	0b c0       	rjmp	.+22     	; 0xede <put_fat+0xba>
     ec8:	fe 01       	movw	r30, r28
     eca:	e8 0f       	add	r30, r24
     ecc:	f9 1f       	adc	r31, r25
     ece:	46 a5       	ldd	r20, Z+46	; 0x2e
     ed0:	4f 70       	andi	r20, 0x0F	; 15
     ed2:	50 e1       	ldi	r21, 0x10	; 16
     ed4:	c5 9e       	mul	r12, r21
     ed6:	90 01       	movw	r18, r0
     ed8:	11 24       	eor	r1, r1
     eda:	24 2b       	or	r18, r20
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <put_fat+0xbc>
     ede:	2c 2d       	mov	r18, r12
     ee0:	fe 01       	movw	r30, r28
     ee2:	e8 0f       	add	r30, r24
     ee4:	f9 1f       	adc	r31, r25
     ee6:	26 a7       	std	Z+46, r18	; 0x2e
			bc++;
     ee8:	0f 5f       	subi	r16, 0xFF	; 255
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     ef0:	c8 01       	movw	r24, r16
     ef2:	89 2f       	mov	r24, r25
     ef4:	99 27       	eor	r25, r25
     ef6:	86 95       	lsr	r24
     ef8:	4e 8d       	ldd	r20, Y+30	; 0x1e
     efa:	5f 8d       	ldd	r21, Y+31	; 0x1f
     efc:	68 a1       	ldd	r22, Y+32	; 0x20
     efe:	79 a1       	ldd	r23, Y+33	; 0x21
     f00:	48 0f       	add	r20, r24
     f02:	59 1f       	adc	r21, r25
     f04:	61 1d       	adc	r22, r1
     f06:	71 1d       	adc	r23, r1
     f08:	ce 01       	movw	r24, r28
     f0a:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
			if (res != FR_OK) break;
     f0e:	81 11       	cpse	r24, r1
     f10:	79 c0       	rjmp	.+242    	; 0x1004 <put_fat+0x1e0>
			p = &fs->win[bc % SS(fs)];
     f12:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     f14:	89 28       	or	r8, r9
     f16:	8a 28       	or	r8, r10
     f18:	8b 28       	or	r8, r11
     f1a:	49 f0       	breq	.+18     	; 0xf2e <put_fat+0x10a>
     f1c:	68 94       	set
     f1e:	13 f8       	bld	r1, 3
     f20:	f6 94       	lsr	r15
     f22:	e7 94       	ror	r14
     f24:	d7 94       	ror	r13
     f26:	c7 94       	ror	r12
     f28:	16 94       	lsr	r1
     f2a:	d1 f7       	brne	.-12     	; 0xf20 <put_fat+0xfc>
     f2c:	09 c0       	rjmp	.+18     	; 0xf40 <put_fat+0x11c>
     f2e:	fe 01       	movw	r30, r28
     f30:	e0 0f       	add	r30, r16
     f32:	f1 1f       	adc	r31, r17
     f34:	96 a5       	ldd	r25, Z+46	; 0x2e
     f36:	90 7f       	andi	r25, 0xF0	; 240
     f38:	2d 2d       	mov	r18, r13
     f3a:	2f 70       	andi	r18, 0x0F	; 15
     f3c:	c2 2e       	mov	r12, r18
     f3e:	c9 2a       	or	r12, r25
     f40:	fe 01       	movw	r30, r28
     f42:	e0 0f       	add	r30, r16
     f44:	f1 1f       	adc	r31, r17
     f46:	c6 a6       	std	Z+46, r12	; 0x2e
			break;
     f48:	5d c0       	rjmp	.+186    	; 0x1004 <put_fat+0x1e0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
     f4a:	77 27       	eor	r23, r23
     f4c:	67 2d       	mov	r22, r7
     f4e:	56 2d       	mov	r21, r6
     f50:	45 2d       	mov	r20, r5
     f52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f54:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f56:	a8 a1       	ldd	r26, Y+32	; 0x20
     f58:	b9 a1       	ldd	r27, Y+33	; 0x21
     f5a:	48 0f       	add	r20, r24
     f5c:	59 1f       	adc	r21, r25
     f5e:	6a 1f       	adc	r22, r26
     f60:	7b 1f       	adc	r23, r27
     f62:	ce 01       	movw	r24, r28
     f64:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
			if (res != FR_OK) break;
     f68:	81 11       	cpse	r24, r1
     f6a:	4c c0       	rjmp	.+152    	; 0x1004 <put_fat+0x1e0>
			p = &fs->win[clst * 2 % SS(fs)];
     f6c:	44 0c       	add	r4, r4
     f6e:	55 1c       	adc	r5, r5
     f70:	66 1c       	adc	r6, r6
     f72:	77 1c       	adc	r7, r7
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	59 22       	and	r5, r25
     f78:	66 24       	eor	r6, r6
     f7a:	77 24       	eor	r7, r7
     f7c:	5e e2       	ldi	r21, 0x2E	; 46
     f7e:	45 0e       	add	r4, r21
     f80:	51 1c       	adc	r5, r1
			ST_WORD(p, (WORD)val);
     f82:	fe 01       	movw	r30, r28
     f84:	e4 0d       	add	r30, r4
     f86:	f5 1d       	adc	r31, r5
     f88:	d1 82       	std	Z+1, r13	; 0x01
     f8a:	c0 82       	st	Z, r12
			break;
     f8c:	3b c0       	rjmp	.+118    	; 0x1004 <put_fat+0x1e0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
     f8e:	b3 01       	movw	r22, r6
     f90:	a2 01       	movw	r20, r4
     f92:	68 94       	set
     f94:	16 f8       	bld	r1, 6
     f96:	76 95       	lsr	r23
     f98:	67 95       	ror	r22
     f9a:	57 95       	ror	r21
     f9c:	47 95       	ror	r20
     f9e:	16 94       	lsr	r1
     fa0:	d1 f7       	brne	.-12     	; 0xf96 <put_fat+0x172>
     fa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fa6:	a8 a1       	ldd	r26, Y+32	; 0x20
     fa8:	b9 a1       	ldd	r27, Y+33	; 0x21
     faa:	48 0f       	add	r20, r24
     fac:	59 1f       	adc	r21, r25
     fae:	6a 1f       	adc	r22, r26
     fb0:	7b 1f       	adc	r23, r27
     fb2:	ce 01       	movw	r24, r28
     fb4:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
			if (res != FR_OK) break;
     fb8:	81 11       	cpse	r24, r1
     fba:	24 c0       	rjmp	.+72     	; 0x1004 <put_fat+0x1e0>
			p = &fs->win[clst * 4 % SS(fs)];
     fbc:	44 0c       	add	r4, r4
     fbe:	55 1c       	adc	r5, r5
     fc0:	66 1c       	adc	r6, r6
     fc2:	77 1c       	adc	r7, r7
     fc4:	44 0c       	add	r4, r4
     fc6:	55 1c       	adc	r5, r5
     fc8:	66 1c       	adc	r6, r6
     fca:	77 1c       	adc	r7, r7
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	59 22       	and	r5, r25
     fd0:	66 24       	eor	r6, r6
     fd2:	77 24       	eor	r7, r7
     fd4:	5e e2       	ldi	r21, 0x2E	; 46
     fd6:	45 0e       	add	r4, r21
     fd8:	51 1c       	adc	r5, r1
     fda:	fe 01       	movw	r30, r28
     fdc:	e4 0d       	add	r30, r4
     fde:	f5 1d       	adc	r31, r5
			val |= LD_DWORD(p) & 0xF0000000;
     fe0:	40 81       	ld	r20, Z
     fe2:	51 81       	ldd	r21, Z+1	; 0x01
     fe4:	62 81       	ldd	r22, Z+2	; 0x02
     fe6:	73 81       	ldd	r23, Z+3	; 0x03
     fe8:	44 27       	eor	r20, r20
     fea:	55 27       	eor	r21, r21
     fec:	66 27       	eor	r22, r22
     fee:	70 7f       	andi	r23, 0xF0	; 240
     ff0:	c4 2a       	or	r12, r20
     ff2:	d5 2a       	or	r13, r21
     ff4:	e6 2a       	or	r14, r22
     ff6:	f7 2a       	or	r15, r23
			ST_DWORD(p, val);
     ff8:	c0 82       	st	Z, r12
     ffa:	d1 82       	std	Z+1, r13	; 0x01
     ffc:	e2 82       	std	Z+2, r14	; 0x02
     ffe:	f3 82       	std	Z+3, r15	; 0x03
			break;
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <put_fat+0x1e0>

		default :
			res = FR_INT_ERR;
    1002:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	9c 83       	std	Y+4, r25	; 0x04
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <put_fat+0x1ec>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    100a:	82 e0       	ldi	r24, 0x02	; 2
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <put_fat+0x1ec>
    100e:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
	}

	return res;
}
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	df 90       	pop	r13
    101e:	cf 90       	pop	r12
    1020:	bf 90       	pop	r11
    1022:	af 90       	pop	r10
    1024:	9f 90       	pop	r9
    1026:	8f 90       	pop	r8
    1028:	7f 90       	pop	r7
    102a:	6f 90       	pop	r6
    102c:	5f 90       	pop	r5
    102e:	4f 90       	pop	r4
    1030:	08 95       	ret

00001032 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1032:	2f 92       	push	r2
    1034:	3f 92       	push	r3
    1036:	4f 92       	push	r4
    1038:	5f 92       	push	r5
    103a:	6f 92       	push	r6
    103c:	7f 92       	push	r7
    103e:	8f 92       	push	r8
    1040:	9f 92       	push	r9
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	00 d0       	rcall	.+0      	; 0x1058 <create_chain+0x26>
    1058:	00 d0       	rcall	.+0      	; 0x105a <create_chain+0x28>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	1c 01       	movw	r2, r24
    1060:	49 83       	std	Y+1, r20	; 0x01
    1062:	5a 83       	std	Y+2, r21	; 0x02
    1064:	6b 83       	std	Y+3, r22	; 0x03
    1066:	7c 83       	std	Y+4, r23	; 0x04
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1068:	45 2b       	or	r20, r21
    106a:	46 2b       	or	r20, r22
    106c:	47 2b       	or	r20, r23
    106e:	c1 f4       	brne	.+48     	; 0x10a0 <create_chain+0x6e>
		scl = fs->last_clust;			/* Get suggested start point */
    1070:	dc 01       	movw	r26, r24
    1072:	1a 96       	adiw	r26, 0x0a	; 10
    1074:	8d 90       	ld	r8, X+
    1076:	9d 90       	ld	r9, X+
    1078:	ad 90       	ld	r10, X+
    107a:	bc 90       	ld	r11, X
    107c:	1d 97       	sbiw	r26, 0x0d	; 13
		if (!scl || scl >= fs->n_fatent) scl = 1;
    107e:	81 14       	cp	r8, r1
    1080:	91 04       	cpc	r9, r1
    1082:	a1 04       	cpc	r10, r1
    1084:	b1 04       	cpc	r11, r1
    1086:	89 f1       	breq	.+98     	; 0x10ea <create_chain+0xb8>
    1088:	52 96       	adiw	r26, 0x12	; 18
    108a:	8d 91       	ld	r24, X+
    108c:	9d 91       	ld	r25, X+
    108e:	0d 90       	ld	r0, X+
    1090:	bc 91       	ld	r27, X
    1092:	a0 2d       	mov	r26, r0
    1094:	88 16       	cp	r8, r24
    1096:	99 06       	cpc	r9, r25
    1098:	aa 06       	cpc	r10, r26
    109a:	bb 06       	cpc	r11, r27
    109c:	58 f5       	brcc	.+86     	; 0x10f4 <create_chain+0xc2>
    109e:	2e c0       	rjmp	.+92     	; 0x10fc <create_chain+0xca>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    10a0:	49 81       	ldd	r20, Y+1	; 0x01
    10a2:	5a 81       	ldd	r21, Y+2	; 0x02
    10a4:	6b 81       	ldd	r22, Y+3	; 0x03
    10a6:	7c 81       	ldd	r23, Y+4	; 0x04
    10a8:	0e 94 72 05 	call	0xae4	; 0xae4 <get_fat>
    10ac:	8b 01       	movw	r16, r22
    10ae:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;			/* Invalid value */
    10b0:	62 30       	cpi	r22, 0x02	; 2
    10b2:	71 05       	cpc	r23, r1
    10b4:	81 05       	cpc	r24, r1
    10b6:	91 05       	cpc	r25, r1
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <create_chain+0x8a>
    10ba:	af c0       	rjmp	.+350    	; 0x121a <create_chain+0x1e8>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    10bc:	6f 3f       	cpi	r22, 0xFF	; 255
    10be:	bf ef       	ldi	r27, 0xFF	; 255
    10c0:	7b 07       	cpc	r23, r27
    10c2:	8b 07       	cpc	r24, r27
    10c4:	9b 07       	cpc	r25, r27
    10c6:	09 f4       	brne	.+2      	; 0x10ca <create_chain+0x98>
    10c8:	bc c0       	rjmp	.+376    	; 0x1242 <create_chain+0x210>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    10ca:	f1 01       	movw	r30, r2
    10cc:	82 89       	ldd	r24, Z+18	; 0x12
    10ce:	93 89       	ldd	r25, Z+19	; 0x13
    10d0:	a4 89       	ldd	r26, Z+20	; 0x14
    10d2:	b5 89       	ldd	r27, Z+21	; 0x15
    10d4:	08 17       	cp	r16, r24
    10d6:	19 07       	cpc	r17, r25
    10d8:	2a 07       	cpc	r18, r26
    10da:	3b 07       	cpc	r19, r27
    10dc:	08 f4       	brcc	.+2      	; 0x10e0 <create_chain+0xae>
    10de:	b1 c0       	rjmp	.+354    	; 0x1242 <create_chain+0x210>
		scl = clst;
    10e0:	89 80       	ldd	r8, Y+1	; 0x01
    10e2:	9a 80       	ldd	r9, Y+2	; 0x02
    10e4:	ab 80       	ldd	r10, Y+3	; 0x03
    10e6:	bc 80       	ldd	r11, Y+4	; 0x04
    10e8:	09 c0       	rjmp	.+18     	; 0x10fc <create_chain+0xca>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    10ea:	81 2c       	mov	r8, r1
    10ec:	91 2c       	mov	r9, r1
    10ee:	54 01       	movw	r10, r8
    10f0:	83 94       	inc	r8
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <create_chain+0xca>
    10f4:	81 2c       	mov	r8, r1
    10f6:	91 2c       	mov	r9, r1
    10f8:	54 01       	movw	r10, r8
    10fa:	83 94       	inc	r8
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    10fc:	75 01       	movw	r14, r10
    10fe:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
    1100:	41 2c       	mov	r4, r1
    1102:	51 2c       	mov	r5, r1
    1104:	32 01       	movw	r6, r4
    1106:	68 94       	set
    1108:	41 f8       	bld	r4, 1
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    110a:	ff ef       	ldi	r31, 0xFF	; 255
    110c:	cf 1a       	sub	r12, r31
    110e:	df 0a       	sbc	r13, r31
    1110:	ef 0a       	sbc	r14, r31
    1112:	ff 0a       	sbc	r15, r31
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    1114:	f1 01       	movw	r30, r2
    1116:	82 89       	ldd	r24, Z+18	; 0x12
    1118:	93 89       	ldd	r25, Z+19	; 0x13
    111a:	a4 89       	ldd	r26, Z+20	; 0x14
    111c:	b5 89       	ldd	r27, Z+21	; 0x15
    111e:	c8 16       	cp	r12, r24
    1120:	d9 06       	cpc	r13, r25
    1122:	ea 06       	cpc	r14, r26
    1124:	fb 06       	cpc	r15, r27
    1126:	48 f0       	brcs	.+18     	; 0x113a <create_chain+0x108>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1128:	f2 e0       	ldi	r31, 0x02	; 2
    112a:	8f 16       	cp	r8, r31
    112c:	91 04       	cpc	r9, r1
    112e:	a1 04       	cpc	r10, r1
    1130:	b1 04       	cpc	r11, r1
    1132:	08 f4       	brcc	.+2      	; 0x1136 <create_chain+0x104>
    1134:	77 c0       	rjmp	.+238    	; 0x1224 <create_chain+0x1f2>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
    1136:	73 01       	movw	r14, r6
    1138:	62 01       	movw	r12, r4
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    113a:	b7 01       	movw	r22, r14
    113c:	a6 01       	movw	r20, r12
    113e:	c1 01       	movw	r24, r2
    1140:	0e 94 72 05 	call	0xae4	; 0xae4 <get_fat>
    1144:	8b 01       	movw	r16, r22
    1146:	9c 01       	movw	r18, r24
		if (cs == 0) break;				/* Found a free cluster */
    1148:	61 15       	cp	r22, r1
    114a:	71 05       	cpc	r23, r1
    114c:	81 05       	cpc	r24, r1
    114e:	91 05       	cpc	r25, r1
    1150:	99 f0       	breq	.+38     	; 0x1178 <create_chain+0x146>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1152:	0f 3f       	cpi	r16, 0xFF	; 255
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	18 07       	cpc	r17, r24
    1158:	28 07       	cpc	r18, r24
    115a:	38 07       	cpc	r19, r24
    115c:	09 f4       	brne	.+2      	; 0x1160 <create_chain+0x12e>
    115e:	71 c0       	rjmp	.+226    	; 0x1242 <create_chain+0x210>
    1160:	01 30       	cpi	r16, 0x01	; 1
    1162:	11 05       	cpc	r17, r1
    1164:	21 05       	cpc	r18, r1
    1166:	31 05       	cpc	r19, r1
    1168:	09 f4       	brne	.+2      	; 0x116c <create_chain+0x13a>
    116a:	6b c0       	rjmp	.+214    	; 0x1242 <create_chain+0x210>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    116c:	c8 14       	cp	r12, r8
    116e:	d9 04       	cpc	r13, r9
    1170:	ea 04       	cpc	r14, r10
    1172:	fb 04       	cpc	r15, r11
    1174:	51 f6       	brne	.-108    	; 0x110a <create_chain+0xd8>
    1176:	5a c0       	rjmp	.+180    	; 0x122c <create_chain+0x1fa>
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    1178:	8c 2c       	mov	r8, r12
    117a:	9d 2c       	mov	r9, r13
    117c:	ae 2c       	mov	r10, r14
    117e:	bf 2c       	mov	r11, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1180:	0f ef       	ldi	r16, 0xFF	; 255
    1182:	1f ef       	ldi	r17, 0xFF	; 255
    1184:	2f ef       	ldi	r18, 0xFF	; 255
    1186:	3f e0       	ldi	r19, 0x0F	; 15
    1188:	4c 2d       	mov	r20, r12
    118a:	5d 2d       	mov	r21, r13
    118c:	6e 2d       	mov	r22, r14
    118e:	7f 2d       	mov	r23, r15
    1190:	c1 01       	movw	r24, r2
    1192:	0e 94 12 07 	call	0xe24	; 0xe24 <put_fat>
	if (res == FR_OK && clst != 0) {
    1196:	81 11       	cpse	r24, r1
    1198:	3a c0       	rjmp	.+116    	; 0x120e <create_chain+0x1dc>
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	ab 81       	ldd	r26, Y+3	; 0x03
    11a0:	bc 81       	ldd	r27, Y+4	; 0x04
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	a1 05       	cpc	r26, r1
    11a6:	b1 05       	cpc	r27, r1
    11a8:	59 f0       	breq	.+22     	; 0x11c0 <create_chain+0x18e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    11aa:	0c 2d       	mov	r16, r12
    11ac:	1d 2d       	mov	r17, r13
    11ae:	2e 2d       	mov	r18, r14
    11b0:	3f 2d       	mov	r19, r15
    11b2:	ac 01       	movw	r20, r24
    11b4:	bd 01       	movw	r22, r26
    11b6:	c1 01       	movw	r24, r2
    11b8:	0e 94 12 07 	call	0xe24	; 0xe24 <put_fat>
	}
	if (res == FR_OK) {
    11bc:	81 11       	cpse	r24, r1
    11be:	27 c0       	rjmp	.+78     	; 0x120e <create_chain+0x1dc>
		fs->last_clust = ncl;			/* Update FSINFO */
    11c0:	d1 01       	movw	r26, r2
    11c2:	1a 96       	adiw	r26, 0x0a	; 10
    11c4:	8c 92       	st	X, r8
    11c6:	1a 97       	sbiw	r26, 0x0a	; 10
    11c8:	1b 96       	adiw	r26, 0x0b	; 11
    11ca:	9c 92       	st	X, r9
    11cc:	1b 97       	sbiw	r26, 0x0b	; 11
    11ce:	1c 96       	adiw	r26, 0x0c	; 12
    11d0:	ac 92       	st	X, r10
    11d2:	1c 97       	sbiw	r26, 0x0c	; 12
    11d4:	1d 96       	adiw	r26, 0x0d	; 13
    11d6:	bc 92       	st	X, r11
    11d8:	1d 97       	sbiw	r26, 0x0d	; 13
		if (fs->free_clust != 0xFFFFFFFF) {
    11da:	1e 96       	adiw	r26, 0x0e	; 14
    11dc:	8d 91       	ld	r24, X+
    11de:	9d 91       	ld	r25, X+
    11e0:	0d 90       	ld	r0, X+
    11e2:	bc 91       	ld	r27, X
    11e4:	a0 2d       	mov	r26, r0
    11e6:	8f 3f       	cpi	r24, 0xFF	; 255
    11e8:	ef ef       	ldi	r30, 0xFF	; 255
    11ea:	9e 07       	cpc	r25, r30
    11ec:	ae 07       	cpc	r26, r30
    11ee:	be 07       	cpc	r27, r30
    11f0:	09 f1       	breq	.+66     	; 0x1234 <create_chain+0x202>
			fs->free_clust--;
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	a1 09       	sbc	r26, r1
    11f6:	b1 09       	sbc	r27, r1
    11f8:	f1 01       	movw	r30, r2
    11fa:	86 87       	std	Z+14, r24	; 0x0e
    11fc:	97 87       	std	Z+15, r25	; 0x0f
    11fe:	a0 8b       	std	Z+16, r26	; 0x10
    1200:	b1 8b       	std	Z+17, r27	; 0x11
			fs->fsi_flag |= 1;
    1202:	85 81       	ldd	r24, Z+5	; 0x05
    1204:	81 60       	ori	r24, 0x01	; 1
    1206:	85 83       	std	Z+5, r24	; 0x05
    1208:	97 01       	movw	r18, r14
    120a:	86 01       	movw	r16, r12
    120c:	1a c0       	rjmp	.+52     	; 0x1242 <create_chain+0x210>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	a1 f4       	brne	.+40     	; 0x123a <create_chain+0x208>
    1212:	0f ef       	ldi	r16, 0xFF	; 255
    1214:	1f ef       	ldi	r17, 0xFF	; 255
    1216:	98 01       	movw	r18, r16
    1218:	14 c0       	rjmp	.+40     	; 0x1242 <create_chain+0x210>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
    121a:	01 e0       	ldi	r16, 0x01	; 1
    121c:	10 e0       	ldi	r17, 0x00	; 0
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	0f c0       	rjmp	.+30     	; 0x1242 <create_chain+0x210>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1224:	00 e0       	ldi	r16, 0x00	; 0
    1226:	10 e0       	ldi	r17, 0x00	; 0
    1228:	98 01       	movw	r18, r16
    122a:	0b c0       	rjmp	.+22     	; 0x1242 <create_chain+0x210>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    122c:	00 e0       	ldi	r16, 0x00	; 0
    122e:	10 e0       	ldi	r17, 0x00	; 0
    1230:	98 01       	movw	r18, r16
    1232:	07 c0       	rjmp	.+14     	; 0x1242 <create_chain+0x210>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    1234:	97 01       	movw	r18, r14
    1236:	86 01       	movw	r16, r12
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <create_chain+0x210>
			fs->free_clust--;
			fs->fsi_flag |= 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    123a:	01 e0       	ldi	r16, 0x01	; 1
    123c:	10 e0       	ldi	r17, 0x00	; 0
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    1242:	60 2f       	mov	r22, r16
    1244:	71 2f       	mov	r23, r17
    1246:	82 2f       	mov	r24, r18
    1248:	93 2f       	mov	r25, r19
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
    1262:	bf 90       	pop	r11
    1264:	af 90       	pop	r10
    1266:	9f 90       	pop	r9
    1268:	8f 90       	pop	r8
    126a:	7f 90       	pop	r7
    126c:	6f 90       	pop	r6
    126e:	5f 90       	pop	r5
    1270:	4f 90       	pop	r4
    1272:	3f 90       	pop	r3
    1274:	2f 90       	pop	r2
    1276:	08 95       	ret

00001278 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    1278:	7f 92       	push	r7
    127a:	8f 92       	push	r8
    127c:	9f 92       	push	r9
    127e:	af 92       	push	r10
    1280:	bf 92       	push	r11
    1282:	cf 92       	push	r12
    1284:	df 92       	push	r13
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	ec 01       	movw	r28, r24
    1294:	7b 01       	movw	r14, r22
	DWORD clst;
	UINT i;


	i = dp->index + 1;
    1296:	0c 81       	ldd	r16, Y+4	; 0x04
    1298:	1d 81       	ldd	r17, Y+5	; 0x05
    129a:	0f 5f       	subi	r16, 0xFF	; 255
    129c:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    129e:	09 f4       	brne	.+2      	; 0x12a2 <dir_next+0x2a>
    12a0:	eb c0       	rjmp	.+470    	; 0x1478 <dir_next+0x200>
    12a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    12a6:	a8 89       	ldd	r26, Y+16	; 0x10
    12a8:	b9 89       	ldd	r27, Y+17	; 0x11
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	a1 05       	cpc	r26, r1
    12ae:	b1 05       	cpc	r27, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <dir_next+0x3c>
    12b2:	e4 c0       	rjmp	.+456    	; 0x147c <dir_next+0x204>
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
    12b4:	0f 2e       	mov	r0, r31
    12b6:	ff e0       	ldi	r31, 0x0F	; 15
    12b8:	cf 2e       	mov	r12, r31
    12ba:	d1 2c       	mov	r13, r1
    12bc:	f0 2d       	mov	r31, r0
    12be:	c0 22       	and	r12, r16
    12c0:	d1 22       	and	r13, r17
    12c2:	c1 14       	cp	r12, r1
    12c4:	d1 04       	cpc	r13, r1
    12c6:	09 f0       	breq	.+2      	; 0x12ca <dir_next+0x52>
    12c8:	c0 c0       	rjmp	.+384    	; 0x144a <dir_next+0x1d2>
		dp->sect++;					/* Next sector */
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	a1 1d       	adc	r26, r1
    12ce:	b1 1d       	adc	r27, r1
    12d0:	8e 87       	std	Y+14, r24	; 0x0e
    12d2:	9f 87       	std	Y+15, r25	; 0x0f
    12d4:	a8 8b       	std	Y+16, r26	; 0x10
    12d6:	b9 8b       	std	Y+17, r27	; 0x11

		if (!dp->clust) {		/* Static table */
    12d8:	4a 85       	ldd	r20, Y+10	; 0x0a
    12da:	5b 85       	ldd	r21, Y+11	; 0x0b
    12dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    12de:	7d 85       	ldd	r23, Y+13	; 0x0d
    12e0:	41 15       	cp	r20, r1
    12e2:	51 05       	cpc	r21, r1
    12e4:	61 05       	cpc	r22, r1
    12e6:	71 05       	cpc	r23, r1
    12e8:	49 f4       	brne	.+18     	; 0x12fc <dir_next+0x84>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    12ea:	e8 81       	ld	r30, Y
    12ec:	f9 81       	ldd	r31, Y+1	; 0x01
    12ee:	80 85       	ldd	r24, Z+8	; 0x08
    12f0:	91 85       	ldd	r25, Z+9	; 0x09
    12f2:	08 17       	cp	r16, r24
    12f4:	19 07       	cpc	r17, r25
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <dir_next+0x82>
    12f8:	c3 c0       	rjmp	.+390    	; 0x1480 <dir_next+0x208>
    12fa:	a7 c0       	rjmp	.+334    	; 0x144a <dir_next+0x1d2>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    12fc:	e8 81       	ld	r30, Y
    12fe:	f9 81       	ldd	r31, Y+1	; 0x01
    1300:	82 81       	ldd	r24, Z+2	; 0x02
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	98 01       	movw	r18, r16
    1308:	32 95       	swap	r19
    130a:	22 95       	swap	r18
    130c:	2f 70       	andi	r18, 0x0F	; 15
    130e:	23 27       	eor	r18, r19
    1310:	3f 70       	andi	r19, 0x0F	; 15
    1312:	23 27       	eor	r18, r19
    1314:	82 23       	and	r24, r18
    1316:	93 23       	and	r25, r19
    1318:	89 2b       	or	r24, r25
    131a:	09 f0       	breq	.+2      	; 0x131e <dir_next+0xa6>
    131c:	96 c0       	rjmp	.+300    	; 0x144a <dir_next+0x1d2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    131e:	cf 01       	movw	r24, r30
    1320:	0e 94 72 05 	call	0xae4	; 0xae4 <get_fat>
    1324:	4b 01       	movw	r8, r22
    1326:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	88 16       	cp	r8, r24
    132c:	91 04       	cpc	r9, r1
    132e:	a1 04       	cpc	r10, r1
    1330:	b1 04       	cpc	r11, r1
    1332:	08 f4       	brcc	.+2      	; 0x1336 <dir_next+0xbe>
    1334:	a7 c0       	rjmp	.+334    	; 0x1484 <dir_next+0x20c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1336:	ef ef       	ldi	r30, 0xFF	; 255
    1338:	8e 16       	cp	r8, r30
    133a:	9e 06       	cpc	r9, r30
    133c:	ae 06       	cpc	r10, r30
    133e:	be 06       	cpc	r11, r30
    1340:	09 f4       	brne	.+2      	; 0x1344 <dir_next+0xcc>
    1342:	a2 c0       	rjmp	.+324    	; 0x1488 <dir_next+0x210>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    1344:	e8 81       	ld	r30, Y
    1346:	f9 81       	ldd	r31, Y+1	; 0x01
    1348:	82 89       	ldd	r24, Z+18	; 0x12
    134a:	93 89       	ldd	r25, Z+19	; 0x13
    134c:	a4 89       	ldd	r26, Z+20	; 0x14
    134e:	b5 89       	ldd	r27, Z+21	; 0x15
    1350:	88 16       	cp	r8, r24
    1352:	99 06       	cpc	r9, r25
    1354:	aa 06       	cpc	r10, r26
    1356:	bb 06       	cpc	r11, r27
    1358:	08 f4       	brcc	.+2      	; 0x135c <dir_next+0xe4>
    135a:	69 c0       	rjmp	.+210    	; 0x142e <dir_next+0x1b6>
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    135c:	ef 28       	or	r14, r15
    135e:	09 f4       	brne	.+2      	; 0x1362 <dir_next+0xea>
    1360:	95 c0       	rjmp	.+298    	; 0x148c <dir_next+0x214>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    1362:	4a 85       	ldd	r20, Y+10	; 0x0a
    1364:	5b 85       	ldd	r21, Y+11	; 0x0b
    1366:	6c 85       	ldd	r22, Y+12	; 0x0c
    1368:	7d 85       	ldd	r23, Y+13	; 0x0d
    136a:	cf 01       	movw	r24, r30
    136c:	0e 94 19 08 	call	0x1032	; 0x1032 <create_chain>
    1370:	4b 01       	movw	r8, r22
    1372:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1374:	61 15       	cp	r22, r1
    1376:	71 05       	cpc	r23, r1
    1378:	81 05       	cpc	r24, r1
    137a:	91 05       	cpc	r25, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <dir_next+0x108>
    137e:	88 c0       	rjmp	.+272    	; 0x1490 <dir_next+0x218>
					if (clst == 1) return FR_INT_ERR;
    1380:	61 30       	cpi	r22, 0x01	; 1
    1382:	71 05       	cpc	r23, r1
    1384:	81 05       	cpc	r24, r1
    1386:	91 05       	cpc	r25, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <dir_next+0x114>
    138a:	84 c0       	rjmp	.+264    	; 0x1494 <dir_next+0x21c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	88 16       	cp	r8, r24
    1390:	98 06       	cpc	r9, r24
    1392:	a8 06       	cpc	r10, r24
    1394:	b8 06       	cpc	r11, r24
    1396:	09 f4       	brne	.+2      	; 0x139a <dir_next+0x122>
    1398:	7f c0       	rjmp	.+254    	; 0x1498 <dir_next+0x220>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    139a:	88 81       	ld	r24, Y
    139c:	99 81       	ldd	r25, Y+1	; 0x01
    139e:	0e 94 1f 01 	call	0x23e	; 0x23e <sync_window>
    13a2:	81 11       	cpse	r24, r1
    13a4:	7b c0       	rjmp	.+246    	; 0x149c <dir_next+0x224>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    13a6:	88 81       	ld	r24, Y
    13a8:	99 81       	ldd	r25, Y+1	; 0x01
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	52 e0       	ldi	r21, 0x02	; 2
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	8e 96       	adiw	r24, 0x2e	; 46
    13b4:	0e 94 8d 00 	call	0x11a	; 0x11a <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    13b8:	e8 80       	ld	r14, Y
    13ba:	f9 80       	ldd	r15, Y+1	; 0x01
    13bc:	b5 01       	movw	r22, r10
    13be:	a4 01       	movw	r20, r8
    13c0:	c7 01       	movw	r24, r14
    13c2:	0e 94 3c 05 	call	0xa78	; 0xa78 <clust2sect>
    13c6:	f7 01       	movw	r30, r14
    13c8:	62 a7       	std	Z+42, r22	; 0x2a
    13ca:	73 a7       	std	Z+43, r23	; 0x2b
    13cc:	84 a7       	std	Z+44, r24	; 0x2c
    13ce:	95 a7       	std	Z+45, r25	; 0x2d
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    13d0:	e1 2c       	mov	r14, r1
    13d2:	f1 2c       	mov	r15, r1
						dp->fs->wflag = 1;
    13d4:	77 24       	eor	r7, r7
    13d6:	73 94       	inc	r7
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    13d8:	17 c0       	rjmp	.+46     	; 0x1408 <dir_next+0x190>
						dp->fs->wflag = 1;
    13da:	74 82       	std	Z+4, r7	; 0x04
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    13dc:	88 81       	ld	r24, Y
    13de:	99 81       	ldd	r25, Y+1	; 0x01
    13e0:	0e 94 1f 01 	call	0x23e	; 0x23e <sync_window>
    13e4:	81 11       	cpse	r24, r1
    13e6:	5c c0       	rjmp	.+184    	; 0x14a0 <dir_next+0x228>
						dp->fs->winsect++;
    13e8:	e8 81       	ld	r30, Y
    13ea:	f9 81       	ldd	r31, Y+1	; 0x01
    13ec:	82 a5       	ldd	r24, Z+42	; 0x2a
    13ee:	93 a5       	ldd	r25, Z+43	; 0x2b
    13f0:	a4 a5       	ldd	r26, Z+44	; 0x2c
    13f2:	b5 a5       	ldd	r27, Z+45	; 0x2d
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	a1 1d       	adc	r26, r1
    13f8:	b1 1d       	adc	r27, r1
    13fa:	82 a7       	std	Z+42, r24	; 0x2a
    13fc:	93 a7       	std	Z+43, r25	; 0x2b
    13fe:	a4 a7       	std	Z+44, r26	; 0x2c
    1400:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1402:	ff ef       	ldi	r31, 0xFF	; 255
    1404:	ef 1a       	sub	r14, r31
    1406:	ff 0a       	sbc	r15, r31
    1408:	e8 81       	ld	r30, Y
    140a:	f9 81       	ldd	r31, Y+1	; 0x01
    140c:	82 81       	ldd	r24, Z+2	; 0x02
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	e8 16       	cp	r14, r24
    1412:	f9 06       	cpc	r15, r25
    1414:	10 f3       	brcs	.-60     	; 0x13da <dir_next+0x162>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
    1416:	82 a5       	ldd	r24, Z+42	; 0x2a
    1418:	93 a5       	ldd	r25, Z+43	; 0x2b
    141a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    141c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    141e:	8e 19       	sub	r24, r14
    1420:	9f 09       	sbc	r25, r15
    1422:	a1 09       	sbc	r26, r1
    1424:	b1 09       	sbc	r27, r1
    1426:	82 a7       	std	Z+42, r24	; 0x2a
    1428:	93 a7       	std	Z+43, r25	; 0x2b
    142a:	a4 a7       	std	Z+44, r26	; 0x2c
    142c:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
    142e:	8a 86       	std	Y+10, r8	; 0x0a
    1430:	9b 86       	std	Y+11, r9	; 0x0b
    1432:	ac 86       	std	Y+12, r10	; 0x0c
    1434:	bd 86       	std	Y+13, r11	; 0x0d
				dp->sect = clust2sect(dp->fs, clst);
    1436:	b5 01       	movw	r22, r10
    1438:	a4 01       	movw	r20, r8
    143a:	88 81       	ld	r24, Y
    143c:	99 81       	ldd	r25, Y+1	; 0x01
    143e:	0e 94 3c 05 	call	0xa78	; 0xa78 <clust2sect>
    1442:	6e 87       	std	Y+14, r22	; 0x0e
    1444:	7f 87       	std	Y+15, r23	; 0x0f
    1446:	88 8b       	std	Y+16, r24	; 0x10
    1448:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
    144a:	1d 83       	std	Y+5, r17	; 0x05
    144c:	0c 83       	std	Y+4, r16	; 0x04
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
    144e:	cc 0c       	add	r12, r12
    1450:	dd 1c       	adc	r13, r13
    1452:	cc 0c       	add	r12, r12
    1454:	dd 1c       	adc	r13, r13
    1456:	cc 0c       	add	r12, r12
    1458:	dd 1c       	adc	r13, r13
    145a:	cc 0c       	add	r12, r12
    145c:	dd 1c       	adc	r13, r13
    145e:	cc 0c       	add	r12, r12
    1460:	dd 1c       	adc	r13, r13
    1462:	8e e2       	ldi	r24, 0x2E	; 46
    1464:	c8 0e       	add	r12, r24
    1466:	d1 1c       	adc	r13, r1
    1468:	88 81       	ld	r24, Y
    146a:	99 81       	ldd	r25, Y+1	; 0x01
    146c:	c8 0e       	add	r12, r24
    146e:	d9 1e       	adc	r13, r25
    1470:	db 8a       	std	Y+19, r13	; 0x13
    1472:	ca 8a       	std	Y+18, r12	; 0x12

	return FR_OK;
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	15 c0       	rjmp	.+42     	; 0x14a2 <dir_next+0x22a>
	UINT i;


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    1478:	84 e0       	ldi	r24, 0x04	; 4
    147a:	13 c0       	rjmp	.+38     	; 0x14a2 <dir_next+0x22a>
    147c:	84 e0       	ldi	r24, 0x04	; 4
    147e:	11 c0       	rjmp	.+34     	; 0x14a2 <dir_next+0x22a>
	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
		dp->sect++;					/* Next sector */

		if (!dp->clust) {		/* Static table */
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
				return FR_NO_FILE;
    1480:	84 e0       	ldi	r24, 0x04	; 4
    1482:	0f c0       	rjmp	.+30     	; 0x14a2 <dir_next+0x22a>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	0d c0       	rjmp	.+26     	; 0x14a2 <dir_next+0x22a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	0b c0       	rjmp	.+22     	; 0x14a2 <dir_next+0x22a>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    148c:	84 e0       	ldi	r24, 0x04	; 4
    148e:	09 c0       	rjmp	.+18     	; 0x14a2 <dir_next+0x22a>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1490:	87 e0       	ldi	r24, 0x07	; 7
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <dir_next+0x22a>
					if (clst == 1) return FR_INT_ERR;
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	05 c0       	rjmp	.+10     	; 0x14a2 <dir_next+0x22a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	03 c0       	rjmp	.+6      	; 0x14a2 <dir_next+0x22a>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <dir_next+0x22a>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    14a0:	81 e0       	ldi	r24, 0x01	; 1

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */

	return FR_OK;
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
    14b2:	bf 90       	pop	r11
    14b4:	af 90       	pop	r10
    14b6:	9f 90       	pop	r9
    14b8:	8f 90       	pop	r8
    14ba:	7f 90       	pop	r7
    14bc:	08 95       	ret

000014be <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
    14be:	2f 92       	push	r2
    14c0:	3f 92       	push	r3
    14c2:	4f 92       	push	r4
    14c4:	5f 92       	push	r5
    14c6:	6f 92       	push	r6
    14c8:	7f 92       	push	r7
    14ca:	8f 92       	push	r8
    14cc:	9f 92       	push	r9
    14ce:	af 92       	push	r10
    14d0:	bf 92       	push	r11
    14d2:	cf 92       	push	r12
    14d4:	df 92       	push	r13
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <follow_path+0x26>
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <follow_path+0x28>
    14e6:	1f 92       	push	r1
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	6c 01       	movw	r12, r24
    14ee:	8b 01       	movw	r16, r22
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
    14f0:	db 01       	movw	r26, r22
    14f2:	8c 91       	ld	r24, X
    14f4:	8f 32       	cpi	r24, 0x2F	; 47
    14f6:	11 f0       	breq	.+4      	; 0x14fc <follow_path+0x3e>
    14f8:	8c 35       	cpi	r24, 0x5C	; 92
    14fa:	11 f4       	brne	.+4      	; 0x1500 <follow_path+0x42>
		path++;
    14fc:	0f 5f       	subi	r16, 0xFF	; 255
    14fe:	1f 4f       	sbci	r17, 0xFF	; 255
	dp->sclust = 0;							/* Always start from the root directory */
    1500:	f6 01       	movw	r30, r12
    1502:	16 82       	std	Z+6, r1	; 0x06
    1504:	17 82       	std	Z+7, r1	; 0x07
    1506:	10 86       	std	Z+8, r1	; 0x08
    1508:	11 86       	std	Z+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    150a:	d8 01       	movw	r26, r16
    150c:	8c 91       	ld	r24, X
    150e:	80 32       	cpi	r24, 0x20	; 32
    1510:	48 f4       	brcc	.+18     	; 0x1524 <follow_path+0x66>
		res = dir_sdi(dp, 0);
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	c6 01       	movw	r24, r12
    1518:	0e 94 55 06 	call	0xcaa	; 0xcaa <dir_sdi>
		dp->dir = 0;
    151c:	f6 01       	movw	r30, r12
    151e:	13 8a       	std	Z+19, r1	; 0x13
    1520:	12 8a       	std	Z+18, r1	; 0x12
    1522:	45 c1       	rjmp	.+650    	; 0x17ae <follow_path+0x2f0>
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dp->fn;
	mem_set(sfn, ' ', 11);
    1524:	0f 2e       	mov	r0, r31
    1526:	fb e0       	ldi	r31, 0x0B	; 11
    1528:	4f 2e       	mov	r4, r31
    152a:	51 2c       	mov	r5, r1
    152c:	f0 2d       	mov	r31, r0
	si = i = b = 0; ni = 8;
    152e:	e1 2c       	mov	r14, r1
    1530:	f1 2c       	mov	r15, r1
    1532:	68 94       	set
    1534:	66 24       	eor	r6, r6
    1536:	63 f8       	bld	r6, 3
    1538:	71 2c       	mov	r7, r1
    153a:	b1 2c       	mov	r11, r1
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    153c:	69 82       	std	Y+1, r6	; 0x01
    153e:	7a 82       	std	Y+2, r7	; 0x02
    1540:	a4 2c       	mov	r10, r4
    1542:	5b 82       	std	Y+3, r5	; 0x03
    1544:	0f 2e       	mov	r0, r31
    1546:	f2 e0       	ldi	r31, 0x02	; 2
    1548:	2f 2e       	mov	r2, r31
    154a:	f1 e0       	ldi	r31, 0x01	; 1
    154c:	3f 2e       	mov	r3, r31
    154e:	f0 2d       	mov	r31, r0
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
    1550:	dd 82       	std	Y+5, r13	; 0x05
    1552:	cc 82       	std	Y+4, r12	; 0x04
    1554:	f8 01       	movw	r30, r16
    1556:	2c 81       	ldd	r18, Y+4	; 0x04
    1558:	3d 81       	ldd	r19, Y+5	; 0x05
    155a:	4f 01       	movw	r8, r30
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    155c:	81 91       	ld	r24, Z+
    155e:	8f 32       	cpi	r24, 0x2F	; 47
    1560:	e1 f3       	breq	.-8      	; 0x155a <follow_path+0x9c>
    1562:	8c 35       	cpi	r24, 0x5C	; 92
    1564:	d1 f3       	breq	.-12     	; 0x155a <follow_path+0x9c>
    1566:	3d 83       	std	Y+5, r19	; 0x05
    1568:	2c 83       	std	Y+4, r18	; 0x04
	sfn = dp->fn;
    156a:	d9 01       	movw	r26, r18
    156c:	54 96       	adiw	r26, 0x14	; 20
    156e:	cd 90       	ld	r12, X+
    1570:	dc 90       	ld	r13, X
    1572:	55 97       	sbiw	r26, 0x15	; 21
	mem_set(sfn, ' ', 11);
    1574:	a2 01       	movw	r20, r4
    1576:	60 e2       	ldi	r22, 0x20	; 32
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	c6 01       	movw	r24, r12
    157c:	0e 94 8d 00 	call	0x11a	; 0x11a <mem_set>
	si = i = b = 0; ni = 8;
    1580:	c7 01       	movw	r24, r14
    1582:	97 01       	movw	r18, r14
    1584:	b3 01       	movw	r22, r6
    1586:	bb 2d       	mov	r27, r11
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    1588:	f4 01       	movw	r30, r8
    158a:	e2 0f       	add	r30, r18
    158c:	f3 1f       	adc	r31, r19
    158e:	a0 81       	ld	r26, Z
    1590:	89 01       	movw	r16, r18
    1592:	0f 5f       	subi	r16, 0xFF	; 255
    1594:	1f 4f       	sbci	r17, 0xFF	; 255
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    1596:	a1 32       	cpi	r26, 0x21	; 33
    1598:	08 f4       	brcc	.+2      	; 0x159c <follow_path+0xde>
    159a:	e7 c0       	rjmp	.+462    	; 0x176a <follow_path+0x2ac>
    159c:	af 32       	cpi	r26, 0x2F	; 47
    159e:	09 f4       	brne	.+2      	; 0x15a2 <follow_path+0xe4>
    15a0:	e9 c0       	rjmp	.+466    	; 0x1774 <follow_path+0x2b6>
    15a2:	ac 35       	cpi	r26, 0x5C	; 92
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <follow_path+0xea>
    15a6:	e6 c0       	rjmp	.+460    	; 0x1774 <follow_path+0x2b6>
		if (c == '.' || i >= ni) {
    15a8:	ae 32       	cpi	r26, 0x2E	; 46
    15aa:	09 f4       	brne	.+2      	; 0x15ae <follow_path+0xf0>
    15ac:	d2 c0       	rjmp	.+420    	; 0x1752 <follow_path+0x294>
    15ae:	86 17       	cp	r24, r22
    15b0:	97 07       	cpc	r25, r23
    15b2:	08 f0       	brcs	.+2      	; 0x15b6 <follow_path+0xf8>
    15b4:	be c0       	rjmp	.+380    	; 0x1732 <follow_path+0x274>
    15b6:	08 c0       	rjmp	.+16     	; 0x15c8 <follow_path+0x10a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
    15b8:	bb 0f       	add	r27, r27
    15ba:	bb 0f       	add	r27, r27
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    15bc:	98 01       	movw	r18, r16
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	9a 81       	ldd	r25, Y+2	; 0x02
    15c2:	6a 2d       	mov	r22, r10
    15c4:	7b 81       	ldd	r23, Y+3	; 0x03
    15c6:	e0 cf       	rjmp	.-64     	; 0x1588 <follow_path+0xca>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
    15c8:	aa 23       	and	r26, r26
    15ca:	0c f4       	brge	.+2      	; 0x15ce <follow_path+0x110>
			b |= 3;						/* Eliminate NT flag */
    15cc:	b3 60       	ori	r27, 0x03	; 3
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    15ce:	4a 2f       	mov	r20, r26
    15d0:	41 58       	subi	r20, 0x81	; 129
    15d2:	4f 31       	cpi	r20, 0x1F	; 31
    15d4:	18 f0       	brcs	.+6      	; 0x15dc <follow_path+0x11e>
    15d6:	4f 55       	subi	r20, 0x5F	; 95
    15d8:	4d 31       	cpi	r20, 0x1D	; 29
    15da:	e0 f4       	brcc	.+56     	; 0x1614 <follow_path+0x156>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    15dc:	f4 01       	movw	r30, r8
    15de:	e0 0f       	add	r30, r16
    15e0:	f1 1f       	adc	r31, r17
    15e2:	10 81       	ld	r17, Z
    15e4:	2e 5f       	subi	r18, 0xFE	; 254
    15e6:	3f 4f       	sbci	r19, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    15e8:	41 2f       	mov	r20, r17
    15ea:	40 54       	subi	r20, 0x40	; 64
    15ec:	4f 33       	cpi	r20, 0x3F	; 63
    15ee:	20 f0       	brcs	.+8      	; 0x15f8 <follow_path+0x13a>
    15f0:	40 54       	subi	r20, 0x40	; 64
    15f2:	4d 37       	cpi	r20, 0x7D	; 125
    15f4:	08 f0       	brcs	.+2      	; 0x15f8 <follow_path+0x13a>
    15f6:	9f c0       	rjmp	.+318    	; 0x1736 <follow_path+0x278>
    15f8:	ab 01       	movw	r20, r22
    15fa:	41 50       	subi	r20, 0x01	; 1
    15fc:	51 09       	sbc	r21, r1
    15fe:	84 17       	cp	r24, r20
    1600:	95 07       	cpc	r25, r21
    1602:	08 f0       	brcs	.+2      	; 0x1606 <follow_path+0x148>
    1604:	9a c0       	rjmp	.+308    	; 0x173a <follow_path+0x27c>
				return FR_INVALID_NAME;
			sfn[i++] = c;
    1606:	f6 01       	movw	r30, r12
    1608:	e8 0f       	add	r30, r24
    160a:	f9 1f       	adc	r31, r25
    160c:	a0 83       	st	Z, r26
			sfn[i++] = d;
    160e:	11 83       	std	Z+1, r17	; 0x01
    1610:	02 96       	adiw	r24, 0x02	; 2
    1612:	ba cf       	rjmp	.-140    	; 0x1588 <follow_path+0xca>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    1614:	4a 2f       	mov	r20, r26
    1616:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1618:	42 32       	cpi	r20, 0x22	; 34
    161a:	51 05       	cpc	r21, r1
    161c:	09 f4       	brne	.+2      	; 0x1620 <follow_path+0x162>
    161e:	8f c0       	rjmp	.+286    	; 0x173e <follow_path+0x280>
    1620:	f1 01       	movw	r30, r2
    1622:	9c 01       	movw	r18, r24
    1624:	81 91       	ld	r24, Z+
    1626:	88 23       	and	r24, r24
    1628:	09 f4       	brne	.+2      	; 0x162c <follow_path+0x16e>
    162a:	98 c0       	rjmp	.+304    	; 0x175c <follow_path+0x29e>
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	48 17       	cp	r20, r24
    1630:	59 07       	cpc	r21, r25
    1632:	c1 f7       	brne	.-16     	; 0x1624 <follow_path+0x166>
    1634:	86 e0       	ldi	r24, 0x06	; 6
    1636:	bb c0       	rjmp	.+374    	; 0x17ae <follow_path+0x2f0>
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
				b |= 2;
    1638:	b2 60       	ori	r27, 0x02	; 2
    163a:	06 c0       	rjmp	.+12     	; 0x1648 <follow_path+0x18a>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    163c:	2a 2f       	mov	r18, r26
    163e:	21 56       	subi	r18, 0x61	; 97
    1640:	2a 31       	cpi	r18, 0x1A	; 26
    1642:	10 f4       	brcc	.+4      	; 0x1648 <follow_path+0x18a>
					b |= 1; c -= 0x20;
    1644:	b1 60       	ori	r27, 0x01	; 1
    1646:	a0 52       	subi	r26, 0x20	; 32
				}
			}
			sfn[i++] = c;
    1648:	f6 01       	movw	r30, r12
    164a:	e8 0f       	add	r30, r24
    164c:	f9 1f       	adc	r31, r25
    164e:	a0 83       	st	Z, r26
    1650:	01 96       	adiw	r24, 0x01	; 1
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    1652:	98 01       	movw	r18, r16
    1654:	99 cf       	rjmp	.-206    	; 0x1588 <follow_path+0xca>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1656:	89 2b       	or	r24, r25
    1658:	09 f4       	brne	.+2      	; 0x165c <follow_path+0x19e>
    165a:	73 c0       	rjmp	.+230    	; 0x1742 <follow_path+0x284>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
    165c:	f6 01       	movw	r30, r12
    165e:	80 81       	ld	r24, Z
    1660:	85 3e       	cpi	r24, 0xE5	; 229
    1662:	11 f4       	brne	.+4      	; 0x1668 <follow_path+0x1aa>
    1664:	45 e0       	ldi	r20, 0x05	; 5
    1666:	40 83       	st	Z, r20

	if (ni == 8) b <<= 2;
    1668:	68 30       	cpi	r22, 0x08	; 8
    166a:	71 05       	cpc	r23, r1
    166c:	19 f4       	brne	.+6      	; 0x1674 <follow_path+0x1b6>
    166e:	b3 2f       	mov	r27, r19
    1670:	bb 0f       	add	r27, r27
    1672:	bb 0f       	add	r27, r27
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    1674:	8b 2f       	mov	r24, r27
    1676:	83 70       	andi	r24, 0x03	; 3
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	09 f4       	brne	.+2      	; 0x167e <follow_path+0x1c0>
    167c:	20 61       	ori	r18, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    167e:	bc 70       	andi	r27, 0x0C	; 12
    1680:	b4 30       	cpi	r27, 0x04	; 4
    1682:	09 f4       	brne	.+2      	; 0x1686 <follow_path+0x1c8>
    1684:	28 60       	ori	r18, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    1686:	d6 01       	movw	r26, r12
    1688:	1b 96       	adiw	r26, 0x0b	; 11
    168a:	2c 93       	st	X, r18
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    168c:	b7 01       	movw	r22, r14
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	9d 81       	ldd	r25, Y+5	; 0x05
    1692:	0e 94 55 06 	call	0xcaa	; 0xcaa <dir_sdi>
	if (res != FR_OK) return res;
    1696:	81 11       	cpse	r24, r1
    1698:	72 c0       	rjmp	.+228    	; 0x177e <follow_path+0x2c0>
    169a:	cc 80       	ldd	r12, Y+4	; 0x04
    169c:	dd 80       	ldd	r13, Y+5	; 0x05

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dp->fs, dp->sect);
    169e:	f6 01       	movw	r30, r12
    16a0:	46 85       	ldd	r20, Z+14	; 0x0e
    16a2:	57 85       	ldd	r21, Z+15	; 0x0f
    16a4:	60 89       	ldd	r22, Z+16	; 0x10
    16a6:	71 89       	ldd	r23, Z+17	; 0x11
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
		if (res != FR_OK) break;
    16b0:	81 11       	cpse	r24, r1
    16b2:	67 c0       	rjmp	.+206    	; 0x1782 <follow_path+0x2c4>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    16b4:	d6 01       	movw	r26, r12
    16b6:	52 96       	adiw	r26, 0x12	; 18
    16b8:	6d 91       	ld	r22, X+
    16ba:	7c 91       	ld	r23, X
    16bc:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    16be:	fb 01       	movw	r30, r22
    16c0:	90 81       	ld	r25, Z
    16c2:	99 23       	and	r25, r25
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <follow_path+0x20a>
    16c6:	66 c0       	rjmp	.+204    	; 0x1794 <follow_path+0x2d6>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dp->fn[NS] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    16c8:	93 85       	ldd	r25, Z+11	; 0x0b
    16ca:	93 fd       	sbrc	r25, 3
    16cc:	13 c0       	rjmp	.+38     	; 0x16f4 <follow_path+0x236>
    16ce:	54 96       	adiw	r26, 0x14	; 20
    16d0:	4d 91       	ld	r20, X+
    16d2:	5c 91       	ld	r21, X
    16d4:	55 97       	sbiw	r26, 0x15	; 21
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    16d6:	9b 01       	movw	r18, r22
    16d8:	25 5f       	subi	r18, 0xF5	; 245
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    16dc:	da 01       	movw	r26, r20
    16de:	46 01       	movw	r8, r12
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <follow_path+0x22c>
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    16e2:	e2 17       	cp	r30, r18
    16e4:	f3 07       	cpc	r31, r19
    16e6:	09 f4       	brne	.+2      	; 0x16ea <follow_path+0x22c>
    16e8:	5c c0       	rjmp	.+184    	; 0x17a2 <follow_path+0x2e4>
    16ea:	d1 90       	ld	r13, Z+
    16ec:	9d 91       	ld	r25, X+
    16ee:	d9 16       	cp	r13, r25
    16f0:	c1 f3       	breq	.-16     	; 0x16e2 <follow_path+0x224>
    16f2:	64 01       	movw	r12, r8
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
    16f4:	b7 01       	movw	r22, r14
    16f6:	c6 01       	movw	r24, r12
    16f8:	0e 94 3c 09 	call	0x1278	; 0x1278 <dir_next>
	} while (res == FR_OK);
    16fc:	88 23       	and	r24, r24
    16fe:	79 f2       	breq	.-98     	; 0x169e <follow_path+0x1e0>
    1700:	40 c0       	rjmp	.+128    	; 0x1782 <follow_path+0x2c4>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1702:	92 ff       	sbrs	r25, 2
    1704:	20 c0       	rjmp	.+64     	; 0x1746 <follow_path+0x288>
		dp->dir = 0;
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
    1706:	84 e0       	ldi	r24, 0x04	; 4
    1708:	52 c0       	rjmp	.+164    	; 0x17ae <follow_path+0x2f0>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    170a:	db 01       	movw	r26, r22
    170c:	1b 96       	adiw	r26, 0x0b	; 11
    170e:	8c 91       	ld	r24, X
    1710:	84 ff       	sbrs	r24, 4
    1712:	1b c0       	rjmp	.+54     	; 0x174a <follow_path+0x28c>
				res = FR_NO_PATH; break;
			}
			dp->sclust = ld_clust(dp->fs, dir);
    1714:	ec 81       	ldd	r30, Y+4	; 0x04
    1716:	fd 81       	ldd	r31, Y+5	; 0x05
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	0e 94 98 00 	call	0x130	; 0x130 <ld_clust>
    1720:	ac 81       	ldd	r26, Y+4	; 0x04
    1722:	bd 81       	ldd	r27, Y+5	; 0x05
    1724:	16 96       	adiw	r26, 0x06	; 6
    1726:	6d 93       	st	X+, r22
    1728:	7d 93       	st	X+, r23
    172a:	8d 93       	st	X+, r24
    172c:	9c 93       	st	X, r25
    172e:	19 97       	sbiw	r26, 0x09	; 9
		}
    1730:	11 cf       	rjmp	.-478    	; 0x1554 <follow_path+0x96>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
    1732:	86 e0       	ldi	r24, 0x06	; 6
    1734:	3c c0       	rjmp	.+120    	; 0x17ae <follow_path+0x2f0>
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1736:	86 e0       	ldi	r24, 0x06	; 6
    1738:	3a c0       	rjmp	.+116    	; 0x17ae <follow_path+0x2f0>
    173a:	86 e0       	ldi	r24, 0x06	; 6
    173c:	38 c0       	rjmp	.+112    	; 0x17ae <follow_path+0x2f0>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    173e:	86 e0       	ldi	r24, 0x06	; 6
    1740:	36 c0       	rjmp	.+108    	; 0x17ae <follow_path+0x2f0>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1742:	86 e0       	ldi	r24, 0x06	; 6
    1744:	34 c0       	rjmp	.+104    	; 0x17ae <follow_path+0x2f0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1746:	85 e0       	ldi	r24, 0x05	; 5
    1748:	32 c0       	rjmp	.+100    	; 0x17ae <follow_path+0x2f0>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    174a:	85 e0       	ldi	r24, 0x05	; 5
    174c:	30 c0       	rjmp	.+96     	; 0x17ae <follow_path+0x2f0>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    174e:	86 e0       	ldi	r24, 0x06	; 6
    1750:	2e c0       	rjmp	.+92     	; 0x17ae <follow_path+0x2f0>
    1752:	68 30       	cpi	r22, 0x08	; 8
    1754:	71 05       	cpc	r23, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <follow_path+0x29c>
    1758:	2f cf       	rjmp	.-418    	; 0x15b8 <follow_path+0xfa>
    175a:	f9 cf       	rjmp	.-14     	; 0x174e <follow_path+0x290>
    175c:	c9 01       	movw	r24, r18
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    175e:	2a 2f       	mov	r18, r26
    1760:	21 54       	subi	r18, 0x41	; 65
    1762:	2a 31       	cpi	r18, 0x1A	; 26
    1764:	08 f4       	brcc	.+2      	; 0x1768 <follow_path+0x2aa>
    1766:	68 cf       	rjmp	.-304    	; 0x1638 <follow_path+0x17a>
    1768:	69 cf       	rjmp	.-302    	; 0x163c <follow_path+0x17e>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    176a:	08 0d       	add	r16, r8
    176c:	19 1d       	adc	r17, r9
    176e:	3b 2f       	mov	r19, r27
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1770:	24 e0       	ldi	r18, 0x04	; 4
    1772:	71 cf       	rjmp	.-286    	; 0x1656 <follow_path+0x198>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    1774:	08 0d       	add	r16, r8
    1776:	19 1d       	adc	r17, r9
    1778:	3b 2f       	mov	r19, r27
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    177a:	2b 2d       	mov	r18, r11
    177c:	6c cf       	rjmp	.-296    	; 0x1656 <follow_path+0x198>
    177e:	cc 80       	ldd	r12, Y+4	; 0x04
    1780:	dd 80       	ldd	r13, Y+5	; 0x05
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NS];
    1782:	d6 01       	movw	r26, r12
    1784:	54 96       	adiw	r26, 0x14	; 20
    1786:	ed 91       	ld	r30, X+
    1788:	fc 91       	ld	r31, X
    178a:	55 97       	sbiw	r26, 0x15	; 21
    178c:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    178e:	84 30       	cpi	r24, 0x04	; 4
    1790:	71 f4       	brne	.+28     	; 0x17ae <follow_path+0x2f0>
    1792:	b7 cf       	rjmp	.-146    	; 0x1702 <follow_path+0x244>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NS];
    1794:	d6 01       	movw	r26, r12
    1796:	54 96       	adiw	r26, 0x14	; 20
    1798:	ed 91       	ld	r30, X+
    179a:	fc 91       	ld	r31, X
    179c:	55 97       	sbiw	r26, 0x15	; 21
    179e:	93 85       	ldd	r25, Z+11	; 0x0b
    17a0:	b0 cf       	rjmp	.-160    	; 0x1702 <follow_path+0x244>
    17a2:	9d 82       	std	Y+5, r9	; 0x05
    17a4:	8c 82       	std	Y+4, r8	; 0x04
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    17a6:	fa 01       	movw	r30, r20
    17a8:	93 85       	ldd	r25, Z+11	; 0x0b
    17aa:	92 ff       	sbrs	r25, 2
    17ac:	ae cf       	rjmp	.-164    	; 0x170a <follow_path+0x24c>
			dp->sclust = ld_clust(dp->fs, dir);
		}
	}

	return res;
}
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	ff 90       	pop	r15
    17c2:	ef 90       	pop	r14
    17c4:	df 90       	pop	r13
    17c6:	cf 90       	pop	r12
    17c8:	bf 90       	pop	r11
    17ca:	af 90       	pop	r10
    17cc:	9f 90       	pop	r9
    17ce:	8f 90       	pop	r8
    17d0:	7f 90       	pop	r7
    17d2:	6f 90       	pop	r6
    17d4:	5f 90       	pop	r5
    17d6:	4f 90       	pop	r4
    17d8:	3f 90       	pop	r3
    17da:	2f 90       	pop	r2
    17dc:	08 95       	ret

000017de <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	ec 01       	movw	r28, r24
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	0e 94 55 06 	call	0xcaa	; 0xcaa <dir_sdi>
    17ee:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    17f0:	81 11       	cpse	r24, r1
    17f2:	1a c0       	rjmp	.+52     	; 0x1828 <dir_register+0x4a>
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
    17f4:	4e 85       	ldd	r20, Y+14	; 0x0e
    17f6:	5f 85       	ldd	r21, Y+15	; 0x0f
    17f8:	68 89       	ldd	r22, Y+16	; 0x10
    17fa:	79 89       	ldd	r23, Y+17	; 0x11
    17fc:	88 81       	ld	r24, Y
    17fe:	99 81       	ldd	r25, Y+1	; 0x01
    1800:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
    1804:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    1806:	81 11       	cpse	r24, r1
    1808:	0f c0       	rjmp	.+30     	; 0x1828 <dir_register+0x4a>
			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
    180a:	ea 89       	ldd	r30, Y+18	; 0x12
    180c:	fb 89       	ldd	r31, Y+19	; 0x13
    180e:	80 81       	ld	r24, Z
    1810:	85 3e       	cpi	r24, 0xE5	; 229
    1812:	71 f0       	breq	.+28     	; 0x1830 <dir_register+0x52>
    1814:	88 23       	and	r24, r24
    1816:	61 f0       	breq	.+24     	; 0x1830 <dir_register+0x52>
				if (++n == nent) break;	/* A block of contiguous entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    1818:	61 e0       	ldi	r22, 0x01	; 1
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	ce 01       	movw	r24, r28
    181e:	0e 94 3c 09 	call	0x1278	; 0x1278 <dir_next>
    1822:	18 2f       	mov	r17, r24
		} while (res == FR_OK);
    1824:	88 23       	and	r24, r24
    1826:	31 f3       	breq	.-52     	; 0x17f4 <dir_register+0x16>
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1828:	14 30       	cpi	r17, 0x04	; 4
    182a:	11 f1       	breq	.+68     	; 0x1870 <dir_register+0x92>
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
    182c:	11 11       	cpse	r17, r1
    182e:	21 c0       	rjmp	.+66     	; 0x1872 <dir_register+0x94>
		res = move_window(dp->fs, dp->sect);
    1830:	4e 85       	ldd	r20, Y+14	; 0x0e
    1832:	5f 85       	ldd	r21, Y+15	; 0x0f
    1834:	68 89       	ldd	r22, Y+16	; 0x10
    1836:	79 89       	ldd	r23, Y+17	; 0x11
    1838:	88 81       	ld	r24, Y
    183a:	99 81       	ldd	r25, Y+1	; 0x01
    183c:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
    1840:	18 2f       	mov	r17, r24
		if (res == FR_OK) {
    1842:	81 11       	cpse	r24, r1
    1844:	16 c0       	rjmp	.+44     	; 0x1872 <dir_register+0x94>
			mem_set(dp->dir, 0, SZ_DIR);	/* Clean the entry */
    1846:	40 e2       	ldi	r20, 0x20	; 32
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	8a 89       	ldd	r24, Y+18	; 0x12
    1850:	9b 89       	ldd	r25, Y+19	; 0x13
    1852:	0e 94 8d 00 	call	0x11a	; 0x11a <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    1856:	6c 89       	ldd	r22, Y+20	; 0x14
    1858:	7d 89       	ldd	r23, Y+21	; 0x15
    185a:	4b e0       	ldi	r20, 0x0B	; 11
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	8a 89       	ldd	r24, Y+18	; 0x12
    1860:	9b 89       	ldd	r25, Y+19	; 0x13
    1862:	0e 94 5d 00 	call	0xba	; 0xba <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NS] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
    1866:	e8 81       	ld	r30, Y
    1868:	f9 81       	ldd	r31, Y+1	; 0x01
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	84 83       	std	Z+4, r24	; 0x04
    186e:	01 c0       	rjmp	.+2      	; 0x1872 <dir_register+0x94>
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1870:	17 e0       	ldi	r17, 0x07	; 7
			dp->fs->wflag = 1;
		}
	}

	return res;
}
    1872:	81 2f       	mov	r24, r17
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	08 95       	ret

0000187c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    187c:	8f 92       	push	r8
    187e:	9f 92       	push	r9
    1880:	af 92       	push	r10
    1882:	bf 92       	push	r11
    1884:	cf 92       	push	r12
    1886:	df 92       	push	r13
    1888:	ef 92       	push	r14
    188a:	ff 92       	push	r15
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	ec 01       	movw	r28, r24
    1896:	6a 01       	movw	r12, r20
    1898:	7b 01       	movw	r14, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    189a:	42 30       	cpi	r20, 0x02	; 2
    189c:	51 05       	cpc	r21, r1
    189e:	61 05       	cpc	r22, r1
    18a0:	71 05       	cpc	r23, r1
    18a2:	08 f4       	brcc	.+2      	; 0x18a6 <remove_chain+0x2a>
    18a4:	4e c0       	rjmp	.+156    	; 0x1942 <remove_chain+0xc6>
    18a6:	8a 89       	ldd	r24, Y+18	; 0x12
    18a8:	9b 89       	ldd	r25, Y+19	; 0x13
    18aa:	ac 89       	ldd	r26, Y+20	; 0x14
    18ac:	bd 89       	ldd	r27, Y+21	; 0x15
    18ae:	48 17       	cp	r20, r24
    18b0:	59 07       	cpc	r21, r25
    18b2:	6a 07       	cpc	r22, r26
    18b4:	7b 07       	cpc	r23, r27
    18b6:	08 f0       	brcs	.+2      	; 0x18ba <remove_chain+0x3e>
    18b8:	46 c0       	rjmp	.+140    	; 0x1946 <remove_chain+0xca>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    18ba:	b7 01       	movw	r22, r14
    18bc:	a6 01       	movw	r20, r12
    18be:	ce 01       	movw	r24, r28
    18c0:	0e 94 72 05 	call	0xae4	; 0xae4 <get_fat>
    18c4:	4b 01       	movw	r8, r22
    18c6:	5c 01       	movw	r10, r24
			if (nxt == 0) break;				/* Empty cluster? */
    18c8:	61 15       	cp	r22, r1
    18ca:	71 05       	cpc	r23, r1
    18cc:	81 05       	cpc	r24, r1
    18ce:	91 05       	cpc	r25, r1
    18d0:	e1 f1       	breq	.+120    	; 0x194a <remove_chain+0xce>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    18d2:	91 e0       	ldi	r25, 0x01	; 1
    18d4:	89 16       	cp	r8, r25
    18d6:	91 04       	cpc	r9, r1
    18d8:	a1 04       	cpc	r10, r1
    18da:	b1 04       	cpc	r11, r1
    18dc:	c1 f1       	breq	.+112    	; 0x194e <remove_chain+0xd2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	88 16       	cp	r8, r24
    18e2:	98 06       	cpc	r9, r24
    18e4:	a8 06       	cpc	r10, r24
    18e6:	b8 06       	cpc	r11, r24
    18e8:	a1 f1       	breq	.+104    	; 0x1952 <remove_chain+0xd6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    18ea:	00 e0       	ldi	r16, 0x00	; 0
    18ec:	10 e0       	ldi	r17, 0x00	; 0
    18ee:	98 01       	movw	r18, r16
    18f0:	b7 01       	movw	r22, r14
    18f2:	a6 01       	movw	r20, r12
    18f4:	ce 01       	movw	r24, r28
    18f6:	0e 94 12 07 	call	0xe24	; 0xe24 <put_fat>
			if (res != FR_OK) break;
    18fa:	81 11       	cpse	r24, r1
    18fc:	2b c0       	rjmp	.+86     	; 0x1954 <remove_chain+0xd8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    18fe:	4e 85       	ldd	r20, Y+14	; 0x0e
    1900:	5f 85       	ldd	r21, Y+15	; 0x0f
    1902:	68 89       	ldd	r22, Y+16	; 0x10
    1904:	79 89       	ldd	r23, Y+17	; 0x11
    1906:	4f 3f       	cpi	r20, 0xFF	; 255
    1908:	9f ef       	ldi	r25, 0xFF	; 255
    190a:	59 07       	cpc	r21, r25
    190c:	69 07       	cpc	r22, r25
    190e:	79 07       	cpc	r23, r25
    1910:	59 f0       	breq	.+22     	; 0x1928 <remove_chain+0xac>
				fs->free_clust++;
    1912:	4f 5f       	subi	r20, 0xFF	; 255
    1914:	5f 4f       	sbci	r21, 0xFF	; 255
    1916:	6f 4f       	sbci	r22, 0xFF	; 255
    1918:	7f 4f       	sbci	r23, 0xFF	; 255
    191a:	4e 87       	std	Y+14, r20	; 0x0e
    191c:	5f 87       	std	Y+15, r21	; 0x0f
    191e:	68 8b       	std	Y+16, r22	; 0x10
    1920:	79 8b       	std	Y+17, r23	; 0x11
				fs->fsi_flag |= 1;
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	91 60       	ori	r25, 0x01	; 1
    1926:	9d 83       	std	Y+5, r25	; 0x05
    1928:	75 01       	movw	r14, r10
    192a:	64 01       	movw	r12, r8
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    192c:	4a 89       	ldd	r20, Y+18	; 0x12
    192e:	5b 89       	ldd	r21, Y+19	; 0x13
    1930:	6c 89       	ldd	r22, Y+20	; 0x14
    1932:	7d 89       	ldd	r23, Y+21	; 0x15
    1934:	84 16       	cp	r8, r20
    1936:	95 06       	cpc	r9, r21
    1938:	a6 06       	cpc	r10, r22
    193a:	b7 06       	cpc	r11, r23
    193c:	08 f4       	brcc	.+2      	; 0x1940 <remove_chain+0xc4>
    193e:	bd cf       	rjmp	.-134    	; 0x18ba <remove_chain+0x3e>
    1940:	09 c0       	rjmp	.+18     	; 0x1954 <remove_chain+0xd8>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1942:	82 e0       	ldi	r24, 0x02	; 2
    1944:	07 c0       	rjmp	.+14     	; 0x1954 <remove_chain+0xd8>
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <remove_chain+0xd8>

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	03 c0       	rjmp	.+6      	; 0x1954 <remove_chain+0xd8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	01 c0       	rjmp	.+2      	; 0x1954 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1952:	81 e0       	ldi	r24, 0x01	; 1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	bf 90       	pop	r11
    1966:	af 90       	pop	r10
    1968:	9f 90       	pop	r9
    196a:	8f 90       	pop	r8
    196c:	08 95       	ret

0000196e <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	00 d0       	rcall	.+0      	; 0x1976 <f_mount+0x8>
    1976:	00 d0       	rcall	.+0      	; 0x1978 <f_mount+0xa>
    1978:	00 d0       	rcall	.+0      	; 0x197a <f_mount+0xc>
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	9c 83       	std	Y+4, r25	; 0x04
    1980:	8b 83       	std	Y+3, r24	; 0x03
    1982:	7e 83       	std	Y+6, r23	; 0x06
    1984:	6d 83       	std	Y+5, r22	; 0x05
    1986:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1988:	7a 83       	std	Y+2, r23	; 0x02
    198a:	69 83       	std	Y+1, r22	; 0x01


	vol = get_ldnumber(&rp);
    198c:	ce 01       	movw	r24, r28
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	0e 94 bc 00 	call	0x178	; 0x178 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    1994:	99 23       	and	r25, r25
    1996:	34 f1       	brlt	.+76     	; 0x19e4 <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1998:	fc 01       	movw	r30, r24
    199a:	ee 0f       	add	r30, r30
    199c:	ff 1f       	adc	r31, r31
    199e:	e8 5d       	subi	r30, 0xD8	; 216
    19a0:	fe 4f       	sbci	r31, 0xFE	; 254
    19a2:	01 90       	ld	r0, Z+
    19a4:	f0 81       	ld	r31, Z
    19a6:	e0 2d       	mov	r30, r0

	if (cfs) {
    19a8:	30 97       	sbiw	r30, 0x00	; 0
    19aa:	09 f0       	breq	.+2      	; 0x19ae <f_mount+0x40>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    19ac:	10 82       	st	Z, r1
	}

	if (fs) {
    19ae:	eb 81       	ldd	r30, Y+3	; 0x03
    19b0:	fc 81       	ldd	r31, Y+4	; 0x04
    19b2:	30 97       	sbiw	r30, 0x00	; 0
    19b4:	e9 f0       	breq	.+58     	; 0x19f0 <f_mount+0x82>
		fs->fs_type = 0;				/* Clear new fs object */
    19b6:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    19b8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ba:	3c 81       	ldd	r19, Y+4	; 0x04
    19bc:	fc 01       	movw	r30, r24
    19be:	ee 0f       	add	r30, r30
    19c0:	ff 1f       	adc	r31, r31
    19c2:	e8 5d       	subi	r30, 0xD8	; 216
    19c4:	fe 4f       	sbci	r31, 0xFE	; 254
    19c6:	31 83       	std	Z+1, r19	; 0x01
    19c8:	20 83       	st	Z, r18

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    19ca:	23 2b       	or	r18, r19
    19cc:	69 f0       	breq	.+26     	; 0x19e8 <f_mount+0x7a>
    19ce:	11 30       	cpi	r17, 0x01	; 1
    19d0:	69 f4       	brne	.+26     	; 0x19ec <f_mount+0x7e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	be 01       	movw	r22, r28
    19d6:	6b 5f       	subi	r22, 0xFB	; 251
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	ce 01       	movw	r24, r28
    19dc:	03 96       	adiw	r24, 0x03	; 3
    19de:	0e 94 00 02 	call	0x400	; 0x400 <find_volume>
    19e2:	0e c0       	rjmp	.+28     	; 0x1a00 <f_mount+0x92>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    19e4:	8b e0       	ldi	r24, 0x0B	; 11
    19e6:	0c c0       	rjmp	.+24     	; 0x1a00 <f_mount+0x92>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	0a c0       	rjmp	.+20     	; 0x1a00 <f_mount+0x92>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	08 c0       	rjmp	.+16     	; 0x1a00 <f_mount+0x92>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    19f0:	fc 01       	movw	r30, r24
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	e8 5d       	subi	r30, 0xD8	; 216
    19f8:	fe 4f       	sbci	r31, 0xFE	; 254
    19fa:	11 82       	std	Z+1, r1	; 0x01
    19fc:	10 82       	st	Z, r1

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    19fe:	80 e0       	ldi	r24, 0x00	; 0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    1a00:	26 96       	adiw	r28, 0x06	; 6
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	08 95       	ret

00001a14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1a14:	4f 92       	push	r4
    1a16:	5f 92       	push	r5
    1a18:	6f 92       	push	r6
    1a1a:	7f 92       	push	r7
    1a1c:	af 92       	push	r10
    1a1e:	bf 92       	push	r11
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	a8 97       	sbiw	r28, 0x28	; 40
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	8c 01       	movw	r16, r24
    1a42:	7c a3       	std	Y+36, r23	; 0x24
    1a44:	6b a3       	std	Y+35, r22	; 0x23
    1a46:	f4 2e       	mov	r15, r20
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <f_open+0x3a>
    1a4c:	d4 c0       	rjmp	.+424    	; 0x1bf6 <f_open+0x1e2>
	fp->fs = 0;			/* Clear file object */
    1a4e:	dc 01       	movw	r26, r24
    1a50:	1d 92       	st	X+, r1
    1a52:	1c 92       	st	X, r1

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    1a54:	4e 71       	andi	r20, 0x1E	; 30
    1a56:	be 01       	movw	r22, r28
    1a58:	6d 5d       	subi	r22, 0xDD	; 221
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	0e 94 00 02 	call	0x400	; 0x400 <find_volume>
    1a64:	b8 2e       	mov	r11, r24
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    1a66:	81 11       	cpse	r24, r1
    1a68:	ed c0       	rjmp	.+474    	; 0x1c44 <f_open+0x230>
	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    1a6a:	0f 2e       	mov	r0, r31
    1a6c:	ff e1       	ldi	r31, 0x1F	; 31
    1a6e:	af 2e       	mov	r10, r31
    1a70:	f0 2d       	mov	r31, r0
    1a72:	af 20       	and	r10, r15
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
    1a74:	ce 01       	movw	r24, r28
    1a76:	47 96       	adiw	r24, 0x17	; 23
    1a78:	9e 8b       	std	Y+22, r25	; 0x16
    1a7a:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    1a7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a80:	ce 01       	movw	r24, r28
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	0e 94 5f 0a 	call	0x14be	; 0x14be <follow_path>
		dir = dj.dir;
    1a88:	cb 88       	ldd	r12, Y+19	; 0x13
    1a8a:	dc 88       	ldd	r13, Y+20	; 0x14
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    1a8c:	81 11       	cpse	r24, r1
    1a8e:	be c0       	rjmp	.+380    	; 0x1c0c <f_open+0x1f8>
			if (!dir)	/* Default directory itself */
    1a90:	c1 14       	cp	r12, r1
    1a92:	d1 04       	cpc	r13, r1
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <f_open+0x84>
    1a96:	b4 c0       	rjmp	.+360    	; 0x1c00 <f_open+0x1ec>
    1a98:	b8 c0       	rjmp	.+368    	; 0x1c0a <f_open+0x1f6>
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
    1a9a:	88 23       	and	r24, r24
    1a9c:	79 f0       	breq	.+30     	; 0x1abc <f_open+0xa8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    1a9e:	84 30       	cpi	r24, 0x04	; 4
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <f_open+0x90>
    1aa2:	c2 c0       	rjmp	.+388    	; 0x1c28 <f_open+0x214>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	0e 94 ef 0b 	call	0x17de	; 0x17de <dir_register>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1aac:	b8 e0       	ldi	r27, 0x08	; 8
    1aae:	ab 2a       	or	r10, r27
				dir = dj.dir;					/* New entry */
    1ab0:	cb 88       	ldd	r12, Y+19	; 0x13
    1ab2:	dc 88       	ldd	r13, Y+20	; 0x14
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1ab4:	88 23       	and	r24, r24
    1ab6:	49 f0       	breq	.+18     	; 0x1aca <f_open+0xb6>
			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    1ab8:	b8 2e       	mov	r11, r24
    1aba:	c4 c0       	rjmp	.+392    	; 0x1c44 <f_open+0x230>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1abc:	f6 01       	movw	r30, r12
    1abe:	83 85       	ldd	r24, Z+11	; 0x0b
    1ac0:	81 71       	andi	r24, 0x11	; 17
    1ac2:	09 f0       	breq	.+2      	; 0x1ac6 <f_open+0xb2>
    1ac4:	a8 c0       	rjmp	.+336    	; 0x1c16 <f_open+0x202>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    1ac6:	f2 fc       	sbrc	r15, 2
    1ac8:	ab c0       	rjmp	.+342    	; 0x1c20 <f_open+0x20c>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1aca:	a3 fe       	sbrs	r10, 3
    1acc:	54 c0       	rjmp	.+168    	; 0x1b76 <f_open+0x162>
				dw = get_fattime();				/* Created time */
    1ace:	0e 94 df 14 	call	0x29be	; 0x29be <get_fattime>
				ST_DWORD(dir+DIR_CrtTime, dw);
    1ad2:	d6 01       	movw	r26, r12
    1ad4:	1e 96       	adiw	r26, 0x0e	; 14
    1ad6:	6d 93       	st	X+, r22
    1ad8:	7d 93       	st	X+, r23
    1ada:	8d 93       	st	X+, r24
    1adc:	9c 93       	st	X, r25
    1ade:	51 97       	sbiw	r26, 0x11	; 17
				dir[DIR_Attr] = 0;				/* Reset attribute */
    1ae0:	1b 96       	adiw	r26, 0x0b	; 11
    1ae2:	1c 92       	st	X, r1
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    1ae4:	f6 01       	movw	r30, r12
    1ae6:	14 8e       	std	Z+28, r1	; 0x1c
    1ae8:	15 8e       	std	Z+29, r1	; 0x1d
    1aea:	16 8e       	std	Z+30, r1	; 0x1e
    1aec:	17 8e       	std	Z+31, r1	; 0x1f
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
    1aee:	b6 01       	movw	r22, r12
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	0e 94 98 00 	call	0x130	; 0x130 <ld_clust>
    1af8:	2b 01       	movw	r4, r22
    1afa:	3c 01       	movw	r6, r24
				st_clust(dir, 0);				/* cluster = 0 */
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	50 e0       	ldi	r21, 0x00	; 0
    1b00:	ba 01       	movw	r22, r20
    1b02:	c6 01       	movw	r24, r12
    1b04:	0e 94 b6 00 	call	0x16c	; 0x16c <st_clust>
				dj.fs->wflag = 1;
    1b08:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {						/* Remove the cluster chain if exist */
    1b10:	41 14       	cp	r4, r1
    1b12:	51 04       	cpc	r5, r1
    1b14:	61 04       	cpc	r6, r1
    1b16:	71 04       	cpc	r7, r1
    1b18:	71 f1       	breq	.+92     	; 0x1b76 <f_open+0x162>
					dw = dj.fs->winsect;
    1b1a:	82 a5       	ldd	r24, Z+42	; 0x2a
    1b1c:	93 a5       	ldd	r25, Z+43	; 0x2b
    1b1e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1b20:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1b22:	8d a3       	std	Y+37, r24	; 0x25
    1b24:	9e a3       	std	Y+38, r25	; 0x26
    1b26:	af a3       	std	Y+39, r26	; 0x27
    1b28:	b8 a7       	std	Y+40, r27	; 0x28
					res = remove_chain(dj.fs, cl);
    1b2a:	b3 01       	movw	r22, r6
    1b2c:	a2 01       	movw	r20, r4
    1b2e:	cf 01       	movw	r24, r30
    1b30:	0e 94 3e 0c 	call	0x187c	; 0x187c <remove_chain>
					if (res == FR_OK) {
    1b34:	81 11       	cpse	r24, r1
    1b36:	7a c0       	rjmp	.+244    	; 0x1c2c <f_open+0x218>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3c:	a1 e0       	ldi	r26, 0x01	; 1
    1b3e:	4a 1a       	sub	r4, r26
    1b40:	51 08       	sbc	r5, r1
    1b42:	61 08       	sbc	r6, r1
    1b44:	71 08       	sbc	r7, r1
    1b46:	fc 01       	movw	r30, r24
    1b48:	42 86       	std	Z+10, r4	; 0x0a
    1b4a:	53 86       	std	Z+11, r5	; 0x0b
    1b4c:	64 86       	std	Z+12, r6	; 0x0c
    1b4e:	75 86       	std	Z+13, r7	; 0x0d
						res = move_window(dj.fs, dw);
    1b50:	4d a1       	ldd	r20, Y+37	; 0x25
    1b52:	5e a1       	ldd	r21, Y+38	; 0x26
    1b54:	6f a1       	ldd	r22, Y+39	; 0x27
    1b56:	78 a5       	ldd	r23, Y+40	; 0x28
    1b58:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
    1b5c:	0a c0       	rjmp	.+20     	; 0x1b72 <f_open+0x15e>
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    1b5e:	d6 01       	movw	r26, r12
    1b60:	1b 96       	adiw	r26, 0x0b	; 11
    1b62:	8c 91       	ld	r24, X
    1b64:	84 fd       	sbrc	r24, 4
    1b66:	64 c0       	rjmp	.+200    	; 0x1c30 <f_open+0x21c>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1b68:	f1 fe       	sbrs	r15, 1
    1b6a:	05 c0       	rjmp	.+10     	; 0x1b76 <f_open+0x162>
    1b6c:	80 fd       	sbrc	r24, 0
    1b6e:	64 c0       	rjmp	.+200    	; 0x1c38 <f_open+0x224>
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <f_open+0x162>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    1b72:	81 11       	cpse	r24, r1
    1b74:	66 c0       	rjmp	.+204    	; 0x1c42 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    1b76:	a3 fe       	sbrs	r10, 3
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <f_open+0x16a>
				mode |= FA__WRITTEN;
    1b7a:	b0 e2       	ldi	r27, 0x20	; 32
    1b7c:	ab 2a       	or	r10, r27
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    1b7e:	e9 80       	ldd	r14, Y+1	; 0x01
    1b80:	fa 80       	ldd	r15, Y+2	; 0x02
    1b82:	f7 01       	movw	r30, r14
    1b84:	82 a5       	ldd	r24, Z+42	; 0x2a
    1b86:	93 a5       	ldd	r25, Z+43	; 0x2b
    1b88:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1b8a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	82 8f       	std	Z+26, r24	; 0x1a
    1b90:	93 8f       	std	Z+27, r25	; 0x1b
    1b92:	a4 8f       	std	Z+28, r26	; 0x1c
    1b94:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    1b96:	d7 8e       	std	Z+31, r13	; 0x1f
    1b98:	c6 8e       	std	Z+30, r12	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    1b9a:	a4 82       	std	Z+4, r10	; 0x04
			fp->err = 0;						/* Clear error flag */
    1b9c:	15 82       	std	Z+5, r1	; 0x05
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    1b9e:	b6 01       	movw	r22, r12
    1ba0:	c7 01       	movw	r24, r14
    1ba2:	0e 94 98 00 	call	0x130	; 0x130 <ld_clust>
    1ba6:	d8 01       	movw	r26, r16
    1ba8:	1e 96       	adiw	r26, 0x0e	; 14
    1baa:	6d 93       	st	X+, r22
    1bac:	7d 93       	st	X+, r23
    1bae:	8d 93       	st	X+, r24
    1bb0:	9c 93       	st	X, r25
    1bb2:	51 97       	sbiw	r26, 0x11	; 17
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1bb4:	f6 01       	movw	r30, r12
    1bb6:	44 8d       	ldd	r20, Z+28	; 0x1c
    1bb8:	55 8d       	ldd	r21, Z+29	; 0x1d
    1bba:	66 8d       	ldd	r22, Z+30	; 0x1e
    1bbc:	77 8d       	ldd	r23, Z+31	; 0x1f
    1bbe:	1a 96       	adiw	r26, 0x0a	; 10
    1bc0:	4d 93       	st	X+, r20
    1bc2:	5d 93       	st	X+, r21
    1bc4:	6d 93       	st	X+, r22
    1bc6:	7c 93       	st	X, r23
    1bc8:	1d 97       	sbiw	r26, 0x0d	; 13
			fp->fptr = 0;						/* File pointer */
    1bca:	f8 01       	movw	r30, r16
    1bcc:	16 82       	std	Z+6, r1	; 0x06
    1bce:	17 82       	std	Z+7, r1	; 0x07
    1bd0:	10 86       	std	Z+8, r1	; 0x08
    1bd2:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    1bd4:	56 96       	adiw	r26, 0x16	; 22
    1bd6:	1d 92       	st	X+, r1
    1bd8:	1d 92       	st	X+, r1
    1bda:	1d 92       	st	X+, r1
    1bdc:	1c 92       	st	X, r1
    1bde:	59 97       	sbiw	r26, 0x19	; 25
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    1be0:	11 96       	adiw	r26, 0x01	; 1
    1be2:	fc 92       	st	X, r15
    1be4:	ee 92       	st	-X, r14
			fp->id = fp->fs->id;
    1be6:	f7 01       	movw	r30, r14
    1be8:	86 81       	ldd	r24, Z+6	; 0x06
    1bea:	97 81       	ldd	r25, Z+7	; 0x07
    1bec:	13 96       	adiw	r26, 0x03	; 3
    1bee:	9c 93       	st	X, r25
    1bf0:	8e 93       	st	-X, r24
    1bf2:	12 97       	sbiw	r26, 0x02	; 2
    1bf4:	27 c0       	rjmp	.+78     	; 0x1c44 <f_open+0x230>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    1bf6:	0f 2e       	mov	r0, r31
    1bf8:	f9 e0       	ldi	r31, 0x09	; 9
    1bfa:	bf 2e       	mov	r11, r31
    1bfc:	f0 2d       	mov	r31, r0
    1bfe:	22 c0       	rjmp	.+68     	; 0x1c44 <f_open+0x230>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1c00:	8f 2d       	mov	r24, r15
    1c02:	8c 71       	andi	r24, 0x1C	; 28
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <f_open+0x1f4>
    1c06:	5a cf       	rjmp	.-332    	; 0x1abc <f_open+0xa8>
    1c08:	aa cf       	rjmp	.-172    	; 0x1b5e <f_open+0x14a>
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
    1c0a:	86 e0       	ldi	r24, 0x06	; 6
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1c0c:	9f 2d       	mov	r25, r15
    1c0e:	9c 71       	andi	r25, 0x1C	; 28
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <f_open+0x200>
    1c12:	43 cf       	rjmp	.-378    	; 0x1a9a <f_open+0x86>
    1c14:	ae cf       	rjmp	.-164    	; 0x1b72 <f_open+0x15e>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    1c16:	0f 2e       	mov	r0, r31
    1c18:	f7 e0       	ldi	r31, 0x07	; 7
    1c1a:	bf 2e       	mov	r11, r31
    1c1c:	f0 2d       	mov	r31, r0
    1c1e:	12 c0       	rjmp	.+36     	; 0x1c44 <f_open+0x230>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    1c20:	68 94       	set
    1c22:	bb 24       	eor	r11, r11
    1c24:	b3 f8       	bld	r11, 3
    1c26:	0e c0       	rjmp	.+28     	; 0x1c44 <f_open+0x230>
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    1c28:	b8 2e       	mov	r11, r24
    1c2a:	0c c0       	rjmp	.+24     	; 0x1c44 <f_open+0x230>
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
				if (cl) {						/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
    1c2c:	b8 2e       	mov	r11, r24
    1c2e:	0a c0       	rjmp	.+20     	; 0x1c44 <f_open+0x230>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
    1c30:	68 94       	set
    1c32:	bb 24       	eor	r11, r11
    1c34:	b2 f8       	bld	r11, 2
    1c36:	06 c0       	rjmp	.+12     	; 0x1c44 <f_open+0x230>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    1c38:	0f 2e       	mov	r0, r31
    1c3a:	f7 e0       	ldi	r31, 0x07	; 7
    1c3c:	bf 2e       	mov	r11, r31
    1c3e:	f0 2d       	mov	r31, r0
    1c40:	01 c0       	rjmp	.+2      	; 0x1c44 <f_open+0x230>
				}
			}
		}
		if (res == FR_OK) {
    1c42:	b8 2e       	mov	r11, r24
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    1c44:	8b 2d       	mov	r24, r11
    1c46:	a8 96       	adiw	r28, 0x28	; 40
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	ef 90       	pop	r14
    1c5e:	df 90       	pop	r13
    1c60:	cf 90       	pop	r12
    1c62:	bf 90       	pop	r11
    1c64:	af 90       	pop	r10
    1c66:	7f 90       	pop	r7
    1c68:	6f 90       	pop	r6
    1c6a:	5f 90       	pop	r5
    1c6c:	4f 90       	pop	r4
    1c6e:	08 95       	ret

00001c70 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    1c70:	2f 92       	push	r2
    1c72:	3f 92       	push	r3
    1c74:	4f 92       	push	r4
    1c76:	5f 92       	push	r5
    1c78:	6f 92       	push	r6
    1c7a:	7f 92       	push	r7
    1c7c:	8f 92       	push	r8
    1c7e:	9f 92       	push	r9
    1c80:	af 92       	push	r10
    1c82:	bf 92       	push	r11
    1c84:	cf 92       	push	r12
    1c86:	df 92       	push	r13
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <f_write+0x26>
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <f_write+0x28>
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	9c 83       	std	Y+4, r25	; 0x04
    1c9e:	8b 83       	std	Y+3, r24	; 0x03
    1ca0:	96 2e       	mov	r9, r22
    1ca2:	17 2f       	mov	r17, r23
    1ca4:	7a 01       	movw	r14, r20
    1ca6:	69 01       	movw	r12, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    1ca8:	d9 01       	movw	r26, r18
    1caa:	1d 92       	st	X+, r1
    1cac:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    1cae:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <validate>
    1cb2:	38 2e       	mov	r3, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1cb4:	81 11       	cpse	r24, r1
    1cb6:	d3 c1       	rjmp	.+934    	; 0x205e <f_write+0x3ee>
	if (fp->err)							/* Check error */
    1cb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cba:	fc 81       	ldd	r31, Y+4	; 0x04
    1cbc:	85 81       	ldd	r24, Z+5	; 0x05
    1cbe:	81 11       	cpse	r24, r1
    1cc0:	c8 c1       	rjmp	.+912    	; 0x2052 <f_write+0x3e2>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    1cc2:	84 81       	ldd	r24, Z+4	; 0x04
    1cc4:	81 ff       	sbrs	r24, 1
    1cc6:	c7 c1       	rjmp	.+910    	; 0x2056 <f_write+0x3e6>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    1cc8:	86 81       	ldd	r24, Z+6	; 0x06
    1cca:	97 81       	ldd	r25, Z+7	; 0x07
    1ccc:	a0 85       	ldd	r26, Z+8	; 0x08
    1cce:	b1 85       	ldd	r27, Z+9	; 0x09
    1cd0:	ac 01       	movw	r20, r24
    1cd2:	bd 01       	movw	r22, r26
    1cd4:	4e 0d       	add	r20, r14
    1cd6:	5f 1d       	adc	r21, r15
    1cd8:	61 1d       	adc	r22, r1
    1cda:	71 1d       	adc	r23, r1
    1cdc:	48 17       	cp	r20, r24
    1cde:	59 07       	cpc	r21, r25
    1ce0:	6a 07       	cpc	r22, r26
    1ce2:	7b 07       	cpc	r23, r27
    1ce4:	08 f4       	brcc	.+2      	; 0x1ce8 <f_write+0x78>
    1ce6:	99 c1       	rjmp	.+818    	; 0x201a <f_write+0x3aa>

	for ( ;  btw;							/* Repeat until all data written */
    1ce8:	e1 14       	cp	r14, r1
    1cea:	f1 04       	cpc	r15, r1
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <f_write+0x80>
    1cee:	95 c1       	rjmp	.+810    	; 0x201a <f_write+0x3aa>
    1cf0:	a9 2c       	mov	r10, r9
    1cf2:	b1 2e       	mov	r11, r17
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    1cf4:	22 24       	eor	r2, r2
    1cf6:	23 94       	inc	r2
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    1cf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1cfc:	86 81       	ldd	r24, Z+6	; 0x06
    1cfe:	97 81       	ldd	r25, Z+7	; 0x07
    1d00:	a0 85       	ldd	r26, Z+8	; 0x08
    1d02:	b1 85       	ldd	r27, Z+9	; 0x09
    1d04:	ac 01       	movw	r20, r24
    1d06:	bd 01       	movw	r22, r26
    1d08:	51 70       	andi	r21, 0x01	; 1
    1d0a:	66 27       	eor	r22, r22
    1d0c:	77 27       	eor	r23, r23
    1d0e:	45 2b       	or	r20, r21
    1d10:	46 2b       	or	r20, r22
    1d12:	47 2b       	or	r20, r23
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <f_write+0xa8>
    1d16:	27 c1       	rjmp	.+590    	; 0x1f66 <f_write+0x2f6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    1d18:	20 81       	ld	r18, Z
    1d1a:	31 81       	ldd	r19, Z+1	; 0x01
    1d1c:	ac 01       	movw	r20, r24
    1d1e:	bd 01       	movw	r22, r26
    1d20:	03 2e       	mov	r0, r19
    1d22:	39 e0       	ldi	r19, 0x09	; 9
    1d24:	76 95       	lsr	r23
    1d26:	67 95       	ror	r22
    1d28:	57 95       	ror	r21
    1d2a:	47 95       	ror	r20
    1d2c:	3a 95       	dec	r19
    1d2e:	d1 f7       	brne	.-12     	; 0x1d24 <f_write+0xb4>
    1d30:	30 2d       	mov	r19, r0
    1d32:	f9 01       	movw	r30, r18
    1d34:	12 81       	ldd	r17, Z+2	; 0x02
    1d36:	11 50       	subi	r17, 0x01	; 1
    1d38:	14 23       	and	r17, r20
			if (!csect) {					/* On the cluster boundary? */
    1d3a:	09 f0       	breq	.+2      	; 0x1d3e <f_write+0xce>
    1d3c:	50 c0       	rjmp	.+160    	; 0x1dde <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    1d3e:	89 2b       	or	r24, r25
    1d40:	8a 2b       	or	r24, r26
    1d42:	8b 2b       	or	r24, r27
    1d44:	d1 f4       	brne	.+52     	; 0x1d7a <f_write+0x10a>
					clst = fp->sclust;		/* Follow from the origin */
    1d46:	ab 81       	ldd	r26, Y+3	; 0x03
    1d48:	bc 81       	ldd	r27, Y+4	; 0x04
    1d4a:	1e 96       	adiw	r26, 0x0e	; 14
    1d4c:	6d 91       	ld	r22, X+
    1d4e:	7d 91       	ld	r23, X+
    1d50:	8d 91       	ld	r24, X+
    1d52:	9c 91       	ld	r25, X
    1d54:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)			/* When no cluster is allocated, */
    1d56:	61 15       	cp	r22, r1
    1d58:	71 05       	cpc	r23, r1
    1d5a:	81 05       	cpc	r24, r1
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	f1 f4       	brne	.+60     	; 0x1d9c <f_write+0x12c>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	50 e0       	ldi	r21, 0x00	; 0
    1d64:	ba 01       	movw	r22, r20
    1d66:	c9 01       	movw	r24, r18
    1d68:	0e 94 19 08 	call	0x1032	; 0x1032 <create_chain>
    1d6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d70:	66 87       	std	Z+14, r22	; 0x0e
    1d72:	77 87       	std	Z+15, r23	; 0x0f
    1d74:	80 8b       	std	Z+16, r24	; 0x10
    1d76:	91 8b       	std	Z+17, r25	; 0x11
    1d78:	0b c0       	rjmp	.+22     	; 0x1d90 <f_write+0x120>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    1d7a:	ab 81       	ldd	r26, Y+3	; 0x03
    1d7c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d7e:	52 96       	adiw	r26, 0x12	; 18
    1d80:	4d 91       	ld	r20, X+
    1d82:	5d 91       	ld	r21, X+
    1d84:	6d 91       	ld	r22, X+
    1d86:	7c 91       	ld	r23, X
    1d88:	55 97       	sbiw	r26, 0x15	; 21
    1d8a:	c9 01       	movw	r24, r18
    1d8c:	0e 94 19 08 	call	0x1032	; 0x1032 <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    1d90:	61 15       	cp	r22, r1
    1d92:	71 05       	cpc	r23, r1
    1d94:	81 05       	cpc	r24, r1
    1d96:	91 05       	cpc	r25, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <f_write+0x12c>
    1d9a:	3f c1       	rjmp	.+638    	; 0x201a <f_write+0x3aa>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1d9c:	61 30       	cpi	r22, 0x01	; 1
    1d9e:	71 05       	cpc	r23, r1
    1da0:	81 05       	cpc	r24, r1
    1da2:	91 05       	cpc	r25, r1
    1da4:	41 f4       	brne	.+16     	; 0x1db6 <f_write+0x146>
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	eb 81       	ldd	r30, Y+3	; 0x03
    1daa:	fc 81       	ldd	r31, Y+4	; 0x04
    1dac:	85 83       	std	Z+5, r24	; 0x05
    1dae:	68 94       	set
    1db0:	33 24       	eor	r3, r3
    1db2:	31 f8       	bld	r3, 1
    1db4:	54 c1       	rjmp	.+680    	; 0x205e <f_write+0x3ee>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1db6:	6f 3f       	cpi	r22, 0xFF	; 255
    1db8:	ff ef       	ldi	r31, 0xFF	; 255
    1dba:	7f 07       	cpc	r23, r31
    1dbc:	8f 07       	cpc	r24, r31
    1dbe:	9f 07       	cpc	r25, r31
    1dc0:	41 f4       	brne	.+16     	; 0x1dd2 <f_write+0x162>
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	ab 81       	ldd	r26, Y+3	; 0x03
    1dc6:	bc 81       	ldd	r27, Y+4	; 0x04
    1dc8:	15 96       	adiw	r26, 0x05	; 5
    1dca:	8c 93       	st	X, r24
    1dcc:	33 24       	eor	r3, r3
    1dce:	33 94       	inc	r3
    1dd0:	46 c1       	rjmp	.+652    	; 0x205e <f_write+0x3ee>
				fp->clust = clst;			/* Update current cluster */
    1dd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd6:	62 8b       	std	Z+18, r22	; 0x12
    1dd8:	73 8b       	std	Z+19, r23	; 0x13
    1dda:	84 8b       	std	Z+20, r24	; 0x14
    1ddc:	95 8b       	std	Z+21, r25	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    1dde:	ab 81       	ldd	r26, Y+3	; 0x03
    1de0:	bc 81       	ldd	r27, Y+4	; 0x04
    1de2:	2d 91       	ld	r18, X+
    1de4:	3c 91       	ld	r19, X
    1de6:	f9 01       	movw	r30, r18
    1de8:	82 a5       	ldd	r24, Z+42	; 0x2a
    1dea:	93 a5       	ldd	r25, Z+43	; 0x2b
    1dec:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1dee:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1df0:	eb 81       	ldd	r30, Y+3	; 0x03
    1df2:	fc 81       	ldd	r31, Y+4	; 0x04
    1df4:	46 89       	ldd	r20, Z+22	; 0x16
    1df6:	57 89       	ldd	r21, Z+23	; 0x17
    1df8:	60 8d       	ldd	r22, Z+24	; 0x18
    1dfa:	71 8d       	ldd	r23, Z+25	; 0x19
    1dfc:	84 17       	cp	r24, r20
    1dfe:	95 07       	cpc	r25, r21
    1e00:	a6 07       	cpc	r26, r22
    1e02:	b7 07       	cpc	r27, r23
    1e04:	69 f4       	brne	.+26     	; 0x1e20 <f_write+0x1b0>
    1e06:	c9 01       	movw	r24, r18
    1e08:	0e 94 1f 01 	call	0x23e	; 0x23e <sync_window>
    1e0c:	88 23       	and	r24, r24
    1e0e:	41 f0       	breq	.+16     	; 0x1e20 <f_write+0x1b0>
				ABORT(fp->fs, FR_DISK_ERR);
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	ab 81       	ldd	r26, Y+3	; 0x03
    1e14:	bc 81       	ldd	r27, Y+4	; 0x04
    1e16:	15 96       	adiw	r26, 0x05	; 5
    1e18:	8c 93       	st	X, r24
    1e1a:	33 24       	eor	r3, r3
    1e1c:	33 94       	inc	r3
    1e1e:	1f c1       	rjmp	.+574    	; 0x205e <f_write+0x3ee>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    1e20:	eb 81       	ldd	r30, Y+3	; 0x03
    1e22:	fc 81       	ldd	r31, Y+4	; 0x04
    1e24:	01 90       	ld	r0, Z+
    1e26:	f0 81       	ld	r31, Z
    1e28:	e0 2d       	mov	r30, r0
    1e2a:	fa 83       	std	Y+2, r31	; 0x02
    1e2c:	e9 83       	std	Y+1, r30	; 0x01
    1e2e:	ab 81       	ldd	r26, Y+3	; 0x03
    1e30:	bc 81       	ldd	r27, Y+4	; 0x04
    1e32:	52 96       	adiw	r26, 0x12	; 18
    1e34:	4d 91       	ld	r20, X+
    1e36:	5d 91       	ld	r21, X+
    1e38:	6d 91       	ld	r22, X+
    1e3a:	7c 91       	ld	r23, X
    1e3c:	55 97       	sbiw	r26, 0x15	; 21
    1e3e:	cf 01       	movw	r24, r30
    1e40:	0e 94 3c 05 	call	0xa78	; 0xa78 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1e44:	61 15       	cp	r22, r1
    1e46:	71 05       	cpc	r23, r1
    1e48:	81 05       	cpc	r24, r1
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	41 f4       	brne	.+16     	; 0x1e5e <f_write+0x1ee>
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	eb 81       	ldd	r30, Y+3	; 0x03
    1e52:	fc 81       	ldd	r31, Y+4	; 0x04
    1e54:	85 83       	std	Z+5, r24	; 0x05
    1e56:	68 94       	set
    1e58:	33 24       	eor	r3, r3
    1e5a:	31 f8       	bld	r3, 1
    1e5c:	00 c1       	rjmp	.+512    	; 0x205e <f_write+0x3ee>
			sect += csect;
    1e5e:	2b 01       	movw	r4, r22
    1e60:	3c 01       	movw	r6, r24
    1e62:	41 0e       	add	r4, r17
    1e64:	51 1c       	adc	r5, r1
    1e66:	61 1c       	adc	r6, r1
    1e68:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    1e6a:	47 01       	movw	r8, r14
    1e6c:	89 2c       	mov	r8, r9
    1e6e:	99 24       	eor	r9, r9
    1e70:	86 94       	lsr	r8
			if (cc) {						/* Write maximum contiguous sectors directly */
    1e72:	81 14       	cp	r8, r1
    1e74:	91 04       	cpc	r9, r1
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <f_write+0x20a>
    1e78:	4b c0       	rjmp	.+150    	; 0x1f10 <f_write+0x2a0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1e7a:	a9 81       	ldd	r26, Y+1	; 0x01
    1e7c:	ba 81       	ldd	r27, Y+2	; 0x02
    1e7e:	12 96       	adiw	r26, 0x02	; 2
    1e80:	4c 91       	ld	r20, X
    1e82:	94 01       	movw	r18, r8
    1e84:	21 0f       	add	r18, r17
    1e86:	31 1d       	adc	r19, r1
    1e88:	84 2f       	mov	r24, r20
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	82 17       	cp	r24, r18
    1e8e:	93 07       	cpc	r25, r19
    1e90:	18 f4       	brcc	.+6      	; 0x1e98 <f_write+0x228>
					cc = fp->fs->csize - csect;
    1e92:	4c 01       	movw	r8, r24
    1e94:	81 1a       	sub	r8, r17
    1e96:	91 08       	sbc	r9, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc))
    1e98:	84 01       	movw	r16, r8
    1e9a:	a3 01       	movw	r20, r6
    1e9c:	92 01       	movw	r18, r4
    1e9e:	b5 01       	movw	r22, r10
    1ea0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea4:	81 81       	ldd	r24, Z+1	; 0x01
    1ea6:	0e 94 81 13 	call	0x2702	; 0x2702 <disk_write>
    1eaa:	88 23       	and	r24, r24
    1eac:	41 f0       	breq	.+16     	; 0x1ebe <f_write+0x24e>
					ABORT(fp->fs, FR_DISK_ERR);
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	ab 81       	ldd	r26, Y+3	; 0x03
    1eb2:	bc 81       	ldd	r27, Y+4	; 0x04
    1eb4:	15 96       	adiw	r26, 0x05	; 5
    1eb6:	8c 93       	st	X, r24
    1eb8:	33 24       	eor	r3, r3
    1eba:	33 94       	inc	r3
    1ebc:	d0 c0       	rjmp	.+416    	; 0x205e <f_write+0x3ee>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    1ebe:	ab 81       	ldd	r26, Y+3	; 0x03
    1ec0:	bc 81       	ldd	r27, Y+4	; 0x04
    1ec2:	ed 91       	ld	r30, X+
    1ec4:	fc 91       	ld	r31, X
    1ec6:	42 a5       	ldd	r20, Z+42	; 0x2a
    1ec8:	53 a5       	ldd	r21, Z+43	; 0x2b
    1eca:	64 a5       	ldd	r22, Z+44	; 0x2c
    1ecc:	75 a5       	ldd	r23, Z+45	; 0x2d
    1ece:	44 19       	sub	r20, r4
    1ed0:	55 09       	sbc	r21, r5
    1ed2:	66 09       	sbc	r22, r6
    1ed4:	77 09       	sbc	r23, r7
    1ed6:	c4 01       	movw	r24, r8
    1ed8:	a0 e0       	ldi	r26, 0x00	; 0
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	48 17       	cp	r20, r24
    1ede:	59 07       	cpc	r21, r25
    1ee0:	6a 07       	cpc	r22, r26
    1ee2:	7b 07       	cpc	r23, r27
    1ee4:	88 f4       	brcc	.+34     	; 0x1f08 <f_write+0x298>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    1ee6:	54 2f       	mov	r21, r20
    1ee8:	44 27       	eor	r20, r20
    1eea:	55 0f       	add	r21, r21
    1eec:	b5 01       	movw	r22, r10
    1eee:	64 0f       	add	r22, r20
    1ef0:	75 1f       	adc	r23, r21
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	52 e0       	ldi	r21, 0x02	; 2
    1ef6:	cf 01       	movw	r24, r30
    1ef8:	8e 96       	adiw	r24, 0x2e	; 46
    1efa:	0e 94 5d 00 	call	0xba	; 0xba <mem_cpy>
					fp->fs->wflag = 0;
    1efe:	ab 81       	ldd	r26, Y+3	; 0x03
    1f00:	bc 81       	ldd	r27, Y+4	; 0x04
    1f02:	ed 91       	ld	r30, X+
    1f04:	fc 91       	ld	r31, X
    1f06:	14 82       	std	Z+4, r1	; 0x04
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    1f08:	98 2c       	mov	r9, r8
    1f0a:	88 24       	eor	r8, r8
    1f0c:	99 0c       	add	r9, r9
				continue;
    1f0e:	69 c0       	rjmp	.+210    	; 0x1fe2 <f_write+0x372>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    1f10:	eb 81       	ldd	r30, Y+3	; 0x03
    1f12:	fc 81       	ldd	r31, Y+4	; 0x04
    1f14:	46 81       	ldd	r20, Z+6	; 0x06
    1f16:	57 81       	ldd	r21, Z+7	; 0x07
    1f18:	60 85       	ldd	r22, Z+8	; 0x08
    1f1a:	71 85       	ldd	r23, Z+9	; 0x09
    1f1c:	82 85       	ldd	r24, Z+10	; 0x0a
    1f1e:	93 85       	ldd	r25, Z+11	; 0x0b
    1f20:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f22:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f24:	48 17       	cp	r20, r24
    1f26:	59 07       	cpc	r21, r25
    1f28:	6a 07       	cpc	r22, r26
    1f2a:	7b 07       	cpc	r23, r27
    1f2c:	b0 f0       	brcs	.+44     	; 0x1f5a <f_write+0x2ea>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	0e 94 1f 01 	call	0x23e	; 0x23e <sync_window>
    1f36:	88 23       	and	r24, r24
    1f38:	41 f0       	breq	.+16     	; 0x1f4a <f_write+0x2da>
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f3e:	bc 81       	ldd	r27, Y+4	; 0x04
    1f40:	15 96       	adiw	r26, 0x05	; 5
    1f42:	8c 93       	st	X, r24
    1f44:	33 24       	eor	r3, r3
    1f46:	33 94       	inc	r3
    1f48:	8a c0       	rjmp	.+276    	; 0x205e <f_write+0x3ee>
				fp->fs->winsect = sect;
    1f4a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f4c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f4e:	ed 91       	ld	r30, X+
    1f50:	fc 91       	ld	r31, X
    1f52:	42 a6       	std	Z+42, r4	; 0x2a
    1f54:	53 a6       	std	Z+43, r5	; 0x2b
    1f56:	64 a6       	std	Z+44, r6	; 0x2c
    1f58:	75 a6       	std	Z+45, r7	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1))
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    1f5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5e:	46 8a       	std	Z+22, r4	; 0x16
    1f60:	57 8a       	std	Z+23, r5	; 0x17
    1f62:	60 8e       	std	Z+24, r6	; 0x18
    1f64:	71 8e       	std	Z+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    1f66:	eb 81       	ldd	r30, Y+3	; 0x03
    1f68:	fc 81       	ldd	r31, Y+4	; 0x04
    1f6a:	86 81       	ldd	r24, Z+6	; 0x06
    1f6c:	97 81       	ldd	r25, Z+7	; 0x07
    1f6e:	a0 85       	ldd	r26, Z+8	; 0x08
    1f70:	b1 85       	ldd	r27, Z+9	; 0x09
    1f72:	91 70       	andi	r25, 0x01	; 1
    1f74:	aa 27       	eor	r26, r26
    1f76:	bb 27       	eor	r27, r27
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	32 e0       	ldi	r19, 0x02	; 2
    1f7c:	28 1b       	sub	r18, r24
    1f7e:	39 0b       	sbc	r19, r25
    1f80:	47 01       	movw	r8, r14
    1f82:	2e 15       	cp	r18, r14
    1f84:	3f 05       	cpc	r19, r15
    1f86:	08 f4       	brcc	.+2      	; 0x1f8a <f_write+0x31a>
    1f88:	49 01       	movw	r8, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    1f8a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f8c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f8e:	56 96       	adiw	r26, 0x16	; 22
    1f90:	4d 91       	ld	r20, X+
    1f92:	5d 91       	ld	r21, X+
    1f94:	6d 91       	ld	r22, X+
    1f96:	7c 91       	ld	r23, X
    1f98:	59 97       	sbiw	r26, 0x19	; 25
    1f9a:	8d 91       	ld	r24, X+
    1f9c:	9c 91       	ld	r25, X
    1f9e:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
    1fa2:	88 23       	and	r24, r24
    1fa4:	39 f0       	breq	.+14     	; 0x1fb4 <f_write+0x344>
			ABORT(fp->fs, FR_DISK_ERR);
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	eb 81       	ldd	r30, Y+3	; 0x03
    1faa:	fc 81       	ldd	r31, Y+4	; 0x04
    1fac:	85 83       	std	Z+5, r24	; 0x05
    1fae:	33 24       	eor	r3, r3
    1fb0:	33 94       	inc	r3
    1fb2:	55 c0       	rjmp	.+170    	; 0x205e <f_write+0x3ee>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    1fb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb8:	86 81       	ldd	r24, Z+6	; 0x06
    1fba:	97 81       	ldd	r25, Z+7	; 0x07
    1fbc:	a0 85       	ldd	r26, Z+8	; 0x08
    1fbe:	b1 85       	ldd	r27, Z+9	; 0x09
    1fc0:	91 70       	andi	r25, 0x01	; 1
    1fc2:	aa 27       	eor	r26, r26
    1fc4:	bb 27       	eor	r27, r27
    1fc6:	8e 96       	adiw	r24, 0x2e	; 46
    1fc8:	20 81       	ld	r18, Z
    1fca:	31 81       	ldd	r19, Z+1	; 0x01
    1fcc:	a4 01       	movw	r20, r8
    1fce:	b5 01       	movw	r22, r10
    1fd0:	82 0f       	add	r24, r18
    1fd2:	93 1f       	adc	r25, r19
    1fd4:	0e 94 5d 00 	call	0xba	; 0xba <mem_cpy>
		fp->fs->wflag = 1;
    1fd8:	ab 81       	ldd	r26, Y+3	; 0x03
    1fda:	bc 81       	ldd	r27, Y+4	; 0x04
    1fdc:	ed 91       	ld	r30, X+
    1fde:	fc 91       	ld	r31, X
    1fe0:	24 82       	std	Z+4, r2	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    1fe2:	a8 0c       	add	r10, r8
    1fe4:	b9 1c       	adc	r11, r9
    1fe6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fea:	86 81       	ldd	r24, Z+6	; 0x06
    1fec:	97 81       	ldd	r25, Z+7	; 0x07
    1fee:	a0 85       	ldd	r26, Z+8	; 0x08
    1ff0:	b1 85       	ldd	r27, Z+9	; 0x09
    1ff2:	88 0d       	add	r24, r8
    1ff4:	99 1d       	adc	r25, r9
    1ff6:	a1 1d       	adc	r26, r1
    1ff8:	b1 1d       	adc	r27, r1
    1ffa:	86 83       	std	Z+6, r24	; 0x06
    1ffc:	97 83       	std	Z+7, r25	; 0x07
    1ffe:	a0 87       	std	Z+8, r26	; 0x08
    2000:	b1 87       	std	Z+9, r27	; 0x09
    2002:	d6 01       	movw	r26, r12
    2004:	8d 91       	ld	r24, X+
    2006:	9c 91       	ld	r25, X
    2008:	11 97       	sbiw	r26, 0x01	; 1
    200a:	88 0d       	add	r24, r8
    200c:	99 1d       	adc	r25, r9
    200e:	8d 93       	st	X+, r24
    2010:	9c 93       	st	X, r25
    2012:	e8 18       	sub	r14, r8
    2014:	f9 08       	sbc	r15, r9
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2016:	09 f0       	breq	.+2      	; 0x201a <f_write+0x3aa>
    2018:	6f ce       	rjmp	.-802    	; 0x1cf8 <f_write+0x88>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    201a:	eb 81       	ldd	r30, Y+3	; 0x03
    201c:	fc 81       	ldd	r31, Y+4	; 0x04
    201e:	86 81       	ldd	r24, Z+6	; 0x06
    2020:	97 81       	ldd	r25, Z+7	; 0x07
    2022:	a0 85       	ldd	r26, Z+8	; 0x08
    2024:	b1 85       	ldd	r27, Z+9	; 0x09
    2026:	42 85       	ldd	r20, Z+10	; 0x0a
    2028:	53 85       	ldd	r21, Z+11	; 0x0b
    202a:	64 85       	ldd	r22, Z+12	; 0x0c
    202c:	75 85       	ldd	r23, Z+13	; 0x0d
    202e:	48 17       	cp	r20, r24
    2030:	59 07       	cpc	r21, r25
    2032:	6a 07       	cpc	r22, r26
    2034:	7b 07       	cpc	r23, r27
    2036:	20 f4       	brcc	.+8      	; 0x2040 <f_write+0x3d0>
    2038:	82 87       	std	Z+10, r24	; 0x0a
    203a:	93 87       	std	Z+11, r25	; 0x0b
    203c:	a4 87       	std	Z+12, r26	; 0x0c
    203e:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2040:	ab 81       	ldd	r26, Y+3	; 0x03
    2042:	bc 81       	ldd	r27, Y+4	; 0x04
    2044:	14 96       	adiw	r26, 0x04	; 4
    2046:	8c 91       	ld	r24, X
    2048:	14 97       	sbiw	r26, 0x04	; 4
    204a:	80 62       	ori	r24, 0x20	; 32
    204c:	14 96       	adiw	r26, 0x04	; 4
    204e:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
    2050:	06 c0       	rjmp	.+12     	; 0x205e <f_write+0x3ee>
	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    2052:	38 2e       	mov	r3, r24
    2054:	04 c0       	rjmp	.+8      	; 0x205e <f_write+0x3ee>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2056:	0f 2e       	mov	r0, r31
    2058:	f7 e0       	ldi	r31, 0x07	; 7
    205a:	3f 2e       	mov	r3, r31
    205c:	f0 2d       	mov	r31, r0

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    205e:	83 2d       	mov	r24, r3
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	bf 90       	pop	r11
    207a:	af 90       	pop	r10
    207c:	9f 90       	pop	r9
    207e:	8f 90       	pop	r8
    2080:	7f 90       	pop	r7
    2082:	6f 90       	pop	r6
    2084:	5f 90       	pop	r5
    2086:	4f 90       	pop	r4
    2088:	3f 90       	pop	r3
    208a:	2f 90       	pop	r2
    208c:	08 95       	ret

0000208e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2098:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <validate>
	if (res == FR_OK) {
    209c:	81 11       	cpse	r24, r1
    209e:	36 c0       	rjmp	.+108    	; 0x210c <f_sync+0x7e>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    20a0:	9c 81       	ldd	r25, Y+4	; 0x04
    20a2:	95 ff       	sbrs	r25, 5
    20a4:	33 c0       	rjmp	.+102    	; 0x210c <f_sync+0x7e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    20a6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    20a8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    20aa:	6c 8d       	ldd	r22, Y+28	; 0x1c
    20ac:	7d 8d       	ldd	r23, Y+29	; 0x1d
    20ae:	88 81       	ld	r24, Y
    20b0:	99 81       	ldd	r25, Y+1	; 0x01
    20b2:	0e 94 89 01 	call	0x312	; 0x312 <move_window>
			if (res == FR_OK) {
    20b6:	81 11       	cpse	r24, r1
    20b8:	29 c0       	rjmp	.+82     	; 0x210c <f_sync+0x7e>
				dir = fp->dir_ptr;
    20ba:	0e 8d       	ldd	r16, Y+30	; 0x1e
    20bc:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    20be:	f8 01       	movw	r30, r16
    20c0:	83 85       	ldd	r24, Z+11	; 0x0b
    20c2:	80 62       	ori	r24, 0x20	; 32
    20c4:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    20c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ca:	ac 85       	ldd	r26, Y+12	; 0x0c
    20cc:	bd 85       	ldd	r27, Y+13	; 0x0d
    20ce:	84 8f       	std	Z+28, r24	; 0x1c
    20d0:	95 8f       	std	Z+29, r25	; 0x1d
    20d2:	a6 8f       	std	Z+30, r26	; 0x1e
    20d4:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    20d6:	4e 85       	ldd	r20, Y+14	; 0x0e
    20d8:	5f 85       	ldd	r21, Y+15	; 0x0f
    20da:	68 89       	ldd	r22, Y+16	; 0x10
    20dc:	79 89       	ldd	r23, Y+17	; 0x11
    20de:	c8 01       	movw	r24, r16
    20e0:	0e 94 b6 00 	call	0x16c	; 0x16c <st_clust>
				tm = get_fattime();							/* Update updated time */
    20e4:	0e 94 df 14 	call	0x29be	; 0x29be <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tm);
    20e8:	f8 01       	movw	r30, r16
    20ea:	66 8b       	std	Z+22, r22	; 0x16
    20ec:	77 8b       	std	Z+23, r23	; 0x17
    20ee:	80 8f       	std	Z+24, r24	; 0x18
    20f0:	91 8f       	std	Z+25, r25	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    20f2:	13 8a       	std	Z+19, r1	; 0x13
    20f4:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    20f6:	8c 81       	ldd	r24, Y+4	; 0x04
    20f8:	8f 7d       	andi	r24, 0xDF	; 223
    20fa:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    20fc:	e8 81       	ld	r30, Y
    20fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    2104:	88 81       	ld	r24, Y
    2106:	99 81       	ldd	r25, Y+1	; 0x01
    2108:	0e 94 c6 04 	call	0x98c	; 0x98c <sync_fs>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	08 95       	ret

00002116 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    211c:	0e 94 47 10 	call	0x208e	; 0x208e <f_sync>
	if (res == FR_OK)
    2120:	81 11       	cpse	r24, r1
    2122:	07 c0       	rjmp	.+14     	; 0x2132 <f_close+0x1c>
#endif
	{
		res = validate(fp);				/* Lock volume */
    2124:	ce 01       	movw	r24, r28
    2126:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <validate>
		if (res == FR_OK) {
    212a:	81 11       	cpse	r24, r1
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <f_close+0x1c>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    212e:	19 82       	std	Y+1, r1	; 0x01
    2130:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	08 95       	ret

00002138 <dly_us>:

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
    2138:	23 b1       	in	r18, 0x03	; 3
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	e9 f7       	brne	.-6      	; 0x2138 <dly_us>
}
    213e:	08 95       	ret

00002140 <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    2140:	fc 01       	movw	r30, r24
/*-----------------------------------------------------------------------*/
/* Transmit bytes to the card (bitbanging)                               */
/*-----------------------------------------------------------------------*/

static
void xmit_mmc (
    2142:	68 0f       	add	r22, r24
    2144:	79 1f       	adc	r23, r25
{
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
    2146:	81 91       	ld	r24, Z+
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
    2148:	88 23       	and	r24, r24
    214a:	14 f4       	brge	.+4      	; 0x2150 <xmit_mmc+0x10>
    214c:	2d 9a       	sbi	0x05, 5	; 5
    214e:	01 c0       	rjmp	.+2      	; 0x2152 <xmit_mmc+0x12>
    2150:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    2152:	2f 9a       	sbi	0x05, 7	; 5
    2154:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
    2156:	86 ff       	sbrs	r24, 6
    2158:	02 c0       	rjmp	.+4      	; 0x215e <xmit_mmc+0x1e>
    215a:	2d 9a       	sbi	0x05, 5	; 5
    215c:	01 c0       	rjmp	.+2      	; 0x2160 <xmit_mmc+0x20>
    215e:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    2160:	2f 9a       	sbi	0x05, 7	; 5
    2162:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
    2164:	85 ff       	sbrs	r24, 5
    2166:	02 c0       	rjmp	.+4      	; 0x216c <xmit_mmc+0x2c>
    2168:	2d 9a       	sbi	0x05, 5	; 5
    216a:	01 c0       	rjmp	.+2      	; 0x216e <xmit_mmc+0x2e>
    216c:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    216e:	2f 9a       	sbi	0x05, 7	; 5
    2170:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
    2172:	84 ff       	sbrs	r24, 4
    2174:	02 c0       	rjmp	.+4      	; 0x217a <xmit_mmc+0x3a>
    2176:	2d 9a       	sbi	0x05, 5	; 5
    2178:	01 c0       	rjmp	.+2      	; 0x217c <xmit_mmc+0x3c>
    217a:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    217c:	2f 9a       	sbi	0x05, 7	; 5
    217e:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
    2180:	83 ff       	sbrs	r24, 3
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <xmit_mmc+0x48>
    2184:	2d 9a       	sbi	0x05, 5	; 5
    2186:	01 c0       	rjmp	.+2      	; 0x218a <xmit_mmc+0x4a>
    2188:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    218a:	2f 9a       	sbi	0x05, 7	; 5
    218c:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
    218e:	82 ff       	sbrs	r24, 2
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <xmit_mmc+0x56>
    2192:	2d 9a       	sbi	0x05, 5	; 5
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <xmit_mmc+0x58>
    2196:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    2198:	2f 9a       	sbi	0x05, 7	; 5
    219a:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
    219c:	81 ff       	sbrs	r24, 1
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <xmit_mmc+0x64>
    21a0:	2d 9a       	sbi	0x05, 5	; 5
    21a2:	01 c0       	rjmp	.+2      	; 0x21a6 <xmit_mmc+0x66>
    21a4:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    21a6:	2f 9a       	sbi	0x05, 7	; 5
    21a8:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
    21aa:	80 ff       	sbrs	r24, 0
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <xmit_mmc+0x72>
    21ae:	2d 9a       	sbi	0x05, 5	; 5
    21b0:	01 c0       	rjmp	.+2      	; 0x21b4 <xmit_mmc+0x74>
    21b2:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    21b4:	2f 9a       	sbi	0x05, 7	; 5
    21b6:	2f 98       	cbi	0x05, 7	; 5
	} while (--bc);
    21b8:	e6 17       	cp	r30, r22
    21ba:	f7 07       	cpc	r31, r23
    21bc:	21 f6       	brne	.-120    	; 0x2146 <xmit_mmc+0x6>
}
    21be:	08 95       	ret

000021c0 <rcvr_mmc>:
static
void rcvr_mmc (
	BYTE *buff,	/* Pointer to read buffer */
	UINT bc		/* Number of bytes to receive */
)
{
    21c0:	fc 01       	movw	r30, r24
	BYTE r;


	DI_H();	/* Send 0xFF */
    21c2:	2d 9a       	sbi	0x05, 5	; 5
/*-----------------------------------------------------------------------*/
/* Receive bytes from the card (bitbanging)                              */
/*-----------------------------------------------------------------------*/

static
void rcvr_mmc (
    21c4:	68 0f       	add	r22, r24
    21c6:	79 1f       	adc	r23, r25


	DI_H();	/* Send 0xFF */

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    21c8:	83 b1       	in	r24, 0x03	; 3
		CK_H(); CK_L();
    21ca:	2f 9a       	sbi	0x05, 7	; 5
    21cc:	2f 98       	cbi	0x05, 7	; 5


	DI_H();	/* Send 0xFF */

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    21ce:	86 fb       	bst	r24, 6
    21d0:	88 27       	eor	r24, r24
    21d2:	80 f9       	bld	r24, 0
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit6 */
    21d4:	88 0f       	add	r24, r24
    21d6:	1e 99       	sbic	0x03, 6	; 3
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    21da:	2f 9a       	sbi	0x05, 7	; 5
    21dc:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit5 */
    21de:	88 0f       	add	r24, r24
    21e0:	1e 99       	sbic	0x03, 6	; 3
    21e2:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    21e4:	2f 9a       	sbi	0x05, 7	; 5
    21e6:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit4 */
    21e8:	88 0f       	add	r24, r24
    21ea:	1e 99       	sbic	0x03, 6	; 3
    21ec:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    21ee:	2f 9a       	sbi	0x05, 7	; 5
    21f0:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit3 */
    21f2:	88 0f       	add	r24, r24
    21f4:	1e 99       	sbic	0x03, 6	; 3
    21f6:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    21f8:	2f 9a       	sbi	0x05, 7	; 5
    21fa:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit2 */
    21fc:	88 0f       	add	r24, r24
    21fe:	1e 99       	sbic	0x03, 6	; 3
    2200:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    2202:	2f 9a       	sbi	0x05, 7	; 5
    2204:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit1 */
    2206:	88 0f       	add	r24, r24
    2208:	1e 99       	sbic	0x03, 6	; 3
    220a:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    220c:	2f 9a       	sbi	0x05, 7	; 5
    220e:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit0 */
    2210:	88 0f       	add	r24, r24
    2212:	1e 99       	sbic	0x03, 6	; 3
    2214:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    2216:	2f 9a       	sbi	0x05, 7	; 5
    2218:	2f 98       	cbi	0x05, 7	; 5
		*buff++ = r;			/* Store a received byte */
    221a:	81 93       	st	Z+, r24
	} while (--bc);
    221c:	e6 17       	cp	r30, r22
    221e:	f7 07       	cpc	r31, r23
    2220:	99 f6       	brne	.-90     	; 0x21c8 <rcvr_mmc+0x8>
}
    2222:	08 95       	ret

00002224 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    2224:	0f 93       	push	r16
    2226:	1f 93       	push	r17
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	1f 92       	push	r1
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    2232:	08 e8       	ldi	r16, 0x88	; 136
    2234:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
    2236:	61 e0       	ldi	r22, 0x01	; 1
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	ce 01       	movw	r24, r28
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>
		if (d == 0xFF) break;
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	8f 3f       	cpi	r24, 0xFF	; 255
    2246:	39 f0       	breq	.+14     	; 0x2256 <wait_ready+0x32>
		dly_us(100);
    2248:	84 e6       	ldi	r24, 0x64	; 100
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 9c 10 	call	0x2138	; 0x2138 <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    2250:	01 50       	subi	r16, 0x01	; 1
    2252:	11 09       	sbc	r17, r1
    2254:	81 f7       	brne	.-32     	; 0x2236 <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
    2256:	21 e0       	ldi	r18, 0x01	; 1
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	01 2b       	or	r16, r17
    225c:	11 f4       	brne	.+4      	; 0x2262 <wait_ready+0x3e>
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
}
    2262:	82 2f       	mov	r24, r18
    2264:	93 2f       	mov	r25, r19
    2266:	0f 90       	pop	r0
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	08 95       	ret

00002272 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	1f 92       	push	r1
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();
    227c:	2b 9a       	sbi	0x05, 3	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    227e:	61 e0       	ldi	r22, 0x01	; 1
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	ce 01       	movw	r24, r28
    2284:	01 96       	adiw	r24, 0x01	; 1
    2286:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>
}
    228a:	0f 90       	pop	r0
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	08 95       	ret

00002292 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	1f 92       	push	r1
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();
    229c:	2b 98       	cbi	0x05, 3	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    229e:	61 e0       	ldi	r22, 0x01	; 1
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	ce 01       	movw	r24, r28
    22a4:	01 96       	adiw	r24, 0x01	; 1
    22a6:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>

	if (wait_ready()) return 1;	/* OK */
    22aa:	0e 94 12 11 	call	0x2224	; 0x2224 <wait_ready>
    22ae:	89 2b       	or	r24, r25
    22b0:	29 f4       	brne	.+10     	; 0x22bc <select+0x2a>
	deselect();
    22b2:	0e 94 39 11 	call	0x2272	; 0x2272 <deselect>
	return 0;			/* Failed */
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <select+0x2e>
	BYTE d;

	CS_L();
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
    22bc:	21 e0       	ldi	r18, 0x01	; 1
    22be:	30 e0       	ldi	r19, 0x00	; 0
	deselect();
	return 0;			/* Failed */
}
    22c0:	82 2f       	mov	r24, r18
    22c2:	93 2f       	mov	r25, r19
    22c4:	0f 90       	pop	r0
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	08 95       	ret

000022cc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    22cc:	cf 92       	push	r12
    22ce:	df 92       	push	r13
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	00 d0       	rcall	.+0      	; 0x22de <rcvr_datablock+0x12>
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	7c 01       	movw	r14, r24
    22e4:	6b 01       	movw	r12, r22
    22e6:	08 ee       	ldi	r16, 0xE8	; 232
    22e8:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    22ea:	61 e0       	ldi	r22, 0x01	; 1
    22ec:	70 e0       	ldi	r23, 0x00	; 0
    22ee:	ce 01       	movw	r24, r28
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>
		if (d[0] != 0xFF) break;
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	8f 3f       	cpi	r24, 0xFF	; 255
    22fa:	39 f4       	brne	.+14     	; 0x230a <rcvr_datablock+0x3e>
		dly_us(100);
    22fc:	84 e6       	ldi	r24, 0x64	; 100
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	0e 94 9c 10 	call	0x2138	; 0x2138 <dly_us>
    2304:	01 50       	subi	r16, 0x01	; 1
    2306:	11 09       	sbc	r17, r1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    2308:	81 f7       	brne	.-32     	; 0x22ea <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	8e 3f       	cpi	r24, 0xFE	; 254
    230e:	69 f4       	brne	.+26     	; 0x232a <rcvr_datablock+0x5e>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    2310:	b6 01       	movw	r22, r12
    2312:	c7 01       	movw	r24, r14
    2314:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    2318:	62 e0       	ldi	r22, 0x02	; 2
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	ce 01       	movw	r24, r28
    231e:	01 96       	adiw	r24, 0x01	; 1
    2320:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>

	return 1;						/* Return with success */
    2324:	21 e0       	ldi	r18, 0x01	; 1
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	02 c0       	rjmp	.+4      	; 0x232e <rcvr_datablock+0x62>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    232e:	82 2f       	mov	r24, r18
    2330:	93 2f       	mov	r25, r19
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	ff 90       	pop	r15
    2340:	ef 90       	pop	r14
    2342:	df 90       	pop	r13
    2344:	cf 90       	pop	r12
    2346:	08 95       	ret

00002348 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2348:	ff 92       	push	r15
    234a:	0f 93       	push	r16
    234c:	1f 93       	push	r17
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	00 d0       	rcall	.+0      	; 0x2354 <xmit_datablock+0xc>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	8c 01       	movw	r16, r24
    235a:	f6 2e       	mov	r15, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
    235c:	0e 94 12 11 	call	0x2224	; 0x2224 <wait_ready>
    2360:	89 2b       	or	r24, r25
    2362:	21 f1       	breq	.+72     	; 0x23ac <xmit_datablock+0x64>

	d[0] = token;
    2364:	f9 82       	std	Y+1, r15	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
    2366:	61 e0       	ldi	r22, 0x01	; 1
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	ce 01       	movw	r24, r28
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	0e 94 a0 10 	call	0x2140	; 0x2140 <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    2372:	8d ef       	ldi	r24, 0xFD	; 253
    2374:	f8 16       	cp	r15, r24
    2376:	e9 f0       	breq	.+58     	; 0x23b2 <xmit_datablock+0x6a>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	72 e0       	ldi	r23, 0x02	; 2
    237c:	c8 01       	movw	r24, r16
    237e:	0e 94 a0 10 	call	0x2140	; 0x2140 <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    2382:	62 e0       	ldi	r22, 0x02	; 2
    2384:	70 e0       	ldi	r23, 0x00	; 0
    2386:	ce 01       	movw	r24, r28
    2388:	01 96       	adiw	r24, 0x01	; 1
    238a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    238e:	61 e0       	ldi	r22, 0x01	; 1
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	ce 01       	movw	r24, r28
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	8f 71       	andi	r24, 0x1F	; 31
    239e:	21 e0       	ldi	r18, 0x01	; 1
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	85 30       	cpi	r24, 0x05	; 5
    23a4:	41 f0       	breq	.+16     	; 0x23b6 <xmit_datablock+0x6e>
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	05 c0       	rjmp	.+10     	; 0x23b6 <xmit_datablock+0x6e>
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <xmit_datablock+0x6e>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
    23b2:	21 e0       	ldi	r18, 0x01	; 1
    23b4:	30 e0       	ldi	r19, 0x00	; 0
}
    23b6:	82 2f       	mov	r24, r18
    23b8:	93 2f       	mov	r25, r19
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	ff 90       	pop	r15
    23c8:	08 95       	ret

000023ca <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    23ca:	df 92       	push	r13
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	27 97       	sbiw	r28, 0x07	; 7
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	18 2f       	mov	r17, r24
    23ea:	04 2f       	mov	r16, r20
    23ec:	f5 2e       	mov	r15, r21
    23ee:	e6 2e       	mov	r14, r22
    23f0:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    23f2:	88 23       	and	r24, r24
    23f4:	54 f4       	brge	.+20     	; 0x240a <send_cmd+0x40>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	50 e0       	ldi	r21, 0x00	; 0
    23fa:	ba 01       	movw	r22, r20
    23fc:	87 e3       	ldi	r24, 0x37	; 55
    23fe:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
		if (n > 1) return n;
    2402:	82 30       	cpi	r24, 0x02	; 2
    2404:	08 f0       	brcs	.+2      	; 0x2408 <send_cmd+0x3e>
    2406:	4c c0       	rjmp	.+152    	; 0x24a0 <send_cmd+0xd6>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    2408:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    240a:	1c 30       	cpi	r17, 0x0C	; 12
    240c:	81 f1       	breq	.+96     	; 0x246e <send_cmd+0xa4>
		deselect();
    240e:	0e 94 39 11 	call	0x2272	; 0x2272 <deselect>
		if (!select()) return 0xFF;
    2412:	0e 94 49 11 	call	0x2292	; 0x2292 <select>
    2416:	89 2b       	or	r24, r25
    2418:	41 f1       	breq	.+80     	; 0x246a <send_cmd+0xa0>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    241a:	81 2f       	mov	r24, r17
    241c:	80 64       	ori	r24, 0x40	; 64
    241e:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    2420:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    2422:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    2424:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    2426:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    2428:	11 23       	and	r17, r17
    242a:	89 f1       	breq	.+98     	; 0x248e <send_cmd+0xc4>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    242c:	18 30       	cpi	r17, 0x08	; 8
    242e:	31 f1       	breq	.+76     	; 0x247c <send_cmd+0xb2>
	buf[5] = n;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    2434:	66 e0       	ldi	r22, 0x06	; 6
    2436:	70 e0       	ldi	r23, 0x00	; 0
    2438:	ce 01       	movw	r24, r28
    243a:	02 96       	adiw	r24, 0x02	; 2
    243c:	0e 94 a0 10 	call	0x2140	; 0x2140 <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    2440:	1c 30       	cpi	r17, 0x0C	; 12
    2442:	31 f4       	brne	.+12     	; 0x2450 <send_cmd+0x86>
    2444:	61 e0       	ldi	r22, 0x01	; 1
    2446:	70 e0       	ldi	r23, 0x00	; 0
    2448:	ce 01       	movw	r24, r28
    244a:	01 96       	adiw	r24, 0x01	; 1
    244c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    2450:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    2452:	61 e0       	ldi	r22, 0x01	; 1
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	ce 01       	movw	r24, r28
    2458:	01 96       	adiw	r24, 0x01	; 1
    245a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>
	while ((d & 0x80) && --n);
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	88 23       	and	r24, r24
    2462:	f4 f4       	brge	.+60     	; 0x24a0 <send_cmd+0xd6>
    2464:	11 50       	subi	r17, 0x01	; 1
    2466:	a9 f7       	brne	.-22     	; 0x2452 <send_cmd+0x88>
    2468:	1b c0       	rjmp	.+54     	; 0x24a0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    246a:	8f ef       	ldi	r24, 0xFF	; 255
    246c:	19 c0       	rjmp	.+50     	; 0x24a0 <send_cmd+0xd6>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    246e:	8c e4       	ldi	r24, 0x4C	; 76
    2470:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    2472:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    2474:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    2476:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    2478:	0e 83       	std	Y+6, r16	; 0x06
    247a:	da cf       	rjmp	.-76     	; 0x2430 <send_cmd+0x66>
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    247c:	87 e8       	ldi	r24, 0x87	; 135
    247e:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    2480:	66 e0       	ldi	r22, 0x06	; 6
    2482:	70 e0       	ldi	r23, 0x00	; 0
    2484:	ce 01       	movw	r24, r28
    2486:	02 96       	adiw	r24, 0x02	; 2
    2488:	0e 94 a0 10 	call	0x2140	; 0x2140 <xmit_mmc>
    248c:	e1 cf       	rjmp	.-62     	; 0x2450 <send_cmd+0x86>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    248e:	85 e9       	ldi	r24, 0x95	; 149
    2490:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    2492:	66 e0       	ldi	r22, 0x06	; 6
    2494:	70 e0       	ldi	r23, 0x00	; 0
    2496:	ce 01       	movw	r24, r28
    2498:	02 96       	adiw	r24, 0x02	; 2
    249a:	0e 94 a0 10 	call	0x2140	; 0x2140 <xmit_mmc>
    249e:	d8 cf       	rjmp	.-80     	; 0x2450 <send_cmd+0x86>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
    24a0:	27 96       	adiw	r28, 0x07	; 7
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	ff 90       	pop	r15
    24b6:	ef 90       	pop	r14
    24b8:	df 90       	pop	r13
    24ba:	08 95       	ret

000024bc <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    24bc:	81 11       	cpse	r24, r1
    24be:	03 c0       	rjmp	.+6      	; 0x24c6 <disk_status+0xa>

	return Stat;
    24c0:	80 91 00 01 	lds	r24, 0x0100
    24c4:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    24c6:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
    24c8:	08 95       	ret

000024ca <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    24ca:	ef 92       	push	r14
    24cc:	ff 92       	push	r15
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <disk_initialize+0xe>
    24d8:	00 d0       	rcall	.+0      	; 0x24da <disk_initialize+0x10>
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    24de:	81 11       	cpse	r24, r1
    24e0:	ad c0       	rjmp	.+346    	; 0x263c <disk_initialize+0x172>

	dly_us(10000);			/* 10ms */
    24e2:	80 e1       	ldi	r24, 0x10	; 16
    24e4:	97 e2       	ldi	r25, 0x27	; 39
    24e6:	0e 94 9c 10 	call	0x2138	; 0x2138 <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
    24ea:	23 9a       	sbi	0x04, 3	; 4
    24ec:	2b 9a       	sbi	0x05, 3	; 5
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
    24ee:	27 9a       	sbi	0x04, 7	; 4
    24f0:	2f 98       	cbi	0x05, 7	; 5
	DI_INIT();				/* Initialize port pin tied to DI */
    24f2:	25 9a       	sbi	0x04, 5	; 4
    24f4:	1a e0       	ldi	r17, 0x0A	; 10
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    24f6:	61 e0       	ldi	r22, 0x01	; 1
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	ce 01       	movw	r24, r28
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>
    2502:	11 50       	subi	r17, 0x01	; 1
    2504:	c1 f7       	brne	.-16     	; 0x24f6 <disk_initialize+0x2c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	50 e0       	ldi	r21, 0x00	; 0
    250a:	ba 01       	movw	r22, r20
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
    2512:	81 30       	cpi	r24, 0x01	; 1
    2514:	09 f0       	breq	.+2      	; 0x2518 <disk_initialize+0x4e>
    2516:	77 c0       	rjmp	.+238    	; 0x2606 <disk_initialize+0x13c>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    2518:	4a ea       	ldi	r20, 0xAA	; 170
    251a:	51 e0       	ldi	r21, 0x01	; 1
    251c:	60 e0       	ldi	r22, 0x00	; 0
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	88 e0       	ldi	r24, 0x08	; 8
    2522:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
    2526:	81 30       	cpi	r24, 0x01	; 1
    2528:	d9 f5       	brne	.+118    	; 0x25a0 <disk_initialize+0xd6>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    252a:	64 e0       	ldi	r22, 0x04	; 4
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	ce 01       	movw	r24, r28
    2530:	01 96       	adiw	r24, 0x01	; 1
    2532:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	81 30       	cpi	r24, 0x01	; 1
    253a:	09 f0       	breq	.+2      	; 0x253e <disk_initialize+0x74>
    253c:	66 c0       	rjmp	.+204    	; 0x260a <disk_initialize+0x140>
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	8a 3a       	cpi	r24, 0xAA	; 170
    2542:	09 f0       	breq	.+2      	; 0x2546 <disk_initialize+0x7c>
    2544:	64 c0       	rjmp	.+200    	; 0x260e <disk_initialize+0x144>
    2546:	08 ee       	ldi	r16, 0xE8	; 232
    2548:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    254a:	40 e0       	ldi	r20, 0x00	; 0
    254c:	50 e0       	ldi	r21, 0x00	; 0
    254e:	60 e0       	ldi	r22, 0x00	; 0
    2550:	70 e4       	ldi	r23, 0x40	; 64
    2552:	89 ea       	ldi	r24, 0xA9	; 169
    2554:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
    2558:	88 23       	and	r24, r24
    255a:	49 f0       	breq	.+18     	; 0x256e <disk_initialize+0xa4>
					dly_us(1000);
    255c:	88 ee       	ldi	r24, 0xE8	; 232
    255e:	93 e0       	ldi	r25, 0x03	; 3
    2560:	0e 94 9c 10 	call	0x2138	; 0x2138 <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2564:	01 50       	subi	r16, 0x01	; 1
    2566:	11 09       	sbc	r17, r1
    2568:	81 f7       	brne	.-32     	; 0x254a <disk_initialize+0x80>
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
    256a:	f1 2c       	mov	r15, r1
    256c:	5d c0       	rjmp	.+186    	; 0x2628 <disk_initialize+0x15e>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    256e:	01 2b       	or	r16, r17
    2570:	09 f4       	brne	.+2      	; 0x2574 <disk_initialize+0xaa>
    2572:	4f c0       	rjmp	.+158    	; 0x2612 <disk_initialize+0x148>
    2574:	40 e0       	ldi	r20, 0x00	; 0
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	ba 01       	movw	r22, r20
    257a:	8a e3       	ldi	r24, 0x3A	; 58
    257c:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
    2580:	81 11       	cpse	r24, r1
    2582:	49 c0       	rjmp	.+146    	; 0x2616 <disk_initialize+0x14c>
					rcvr_mmc(buf, 4);
    2584:	64 e0       	ldi	r22, 0x04	; 4
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	ce 01       	movw	r24, r28
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	86 ff       	sbrs	r24, 6
    2594:	42 c0       	rjmp	.+132    	; 0x261a <disk_initialize+0x150>
    2596:	0f 2e       	mov	r0, r31
    2598:	fc e0       	ldi	r31, 0x0C	; 12
    259a:	ff 2e       	mov	r15, r31
    259c:	f0 2d       	mov	r31, r0
    259e:	44 c0       	rjmp	.+136    	; 0x2628 <disk_initialize+0x15e>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	ba 01       	movw	r22, r20
    25a6:	89 ea       	ldi	r24, 0xA9	; 169
    25a8:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	40 f4       	brcc	.+16     	; 0x25c0 <disk_initialize+0xf6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    25b0:	0f 2e       	mov	r0, r31
    25b2:	f9 ea       	ldi	r31, 0xA9	; 169
    25b4:	ef 2e       	mov	r14, r31
    25b6:	f0 2d       	mov	r31, r0
    25b8:	68 94       	set
    25ba:	ff 24       	eor	r15, r15
    25bc:	f1 f8       	bld	r15, 1
    25be:	04 c0       	rjmp	.+8      	; 0x25c8 <disk_initialize+0xfe>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    25c0:	ee 24       	eor	r14, r14
    25c2:	e3 94       	inc	r14
    25c4:	ff 24       	eor	r15, r15
    25c6:	f3 94       	inc	r15
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    25c8:	08 ee       	ldi	r16, 0xE8	; 232
    25ca:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	ba 01       	movw	r22, r20
    25d2:	8e 2d       	mov	r24, r14
    25d4:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
    25d8:	88 23       	and	r24, r24
    25da:	49 f0       	breq	.+18     	; 0x25ee <disk_initialize+0x124>
				dly_us(1000);
    25dc:	88 ee       	ldi	r24, 0xE8	; 232
    25de:	93 e0       	ldi	r25, 0x03	; 3
    25e0:	0e 94 9c 10 	call	0x2138	; 0x2138 <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    25e4:	01 50       	subi	r16, 0x01	; 1
    25e6:	11 09       	sbc	r17, r1
    25e8:	89 f7       	brne	.-30     	; 0x25cc <disk_initialize+0x102>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    25ea:	f1 2c       	mov	r15, r1
    25ec:	1d c0       	rjmp	.+58     	; 0x2628 <disk_initialize+0x15e>
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    25ee:	01 2b       	or	r16, r17
    25f0:	c1 f0       	breq	.+48     	; 0x2622 <disk_initialize+0x158>
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	52 e0       	ldi	r21, 0x02	; 2
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	70 e0       	ldi	r23, 0x00	; 0
    25fa:	80 e1       	ldi	r24, 0x10	; 16
    25fc:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
    2600:	81 11       	cpse	r24, r1
    2602:	11 c0       	rjmp	.+34     	; 0x2626 <disk_initialize+0x15c>
    2604:	11 c0       	rjmp	.+34     	; 0x2628 <disk_initialize+0x15e>
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
    2606:	f1 2c       	mov	r15, r1
    2608:	0f c0       	rjmp	.+30     	; 0x2628 <disk_initialize+0x15e>
    260a:	f1 2c       	mov	r15, r1
    260c:	0d c0       	rjmp	.+26     	; 0x2628 <disk_initialize+0x15e>
    260e:	f1 2c       	mov	r15, r1
    2610:	0b c0       	rjmp	.+22     	; 0x2628 <disk_initialize+0x15e>
    2612:	f1 2c       	mov	r15, r1
    2614:	09 c0       	rjmp	.+18     	; 0x2628 <disk_initialize+0x15e>
    2616:	f1 2c       	mov	r15, r1
    2618:	07 c0       	rjmp	.+14     	; 0x2628 <disk_initialize+0x15e>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    261a:	68 94       	set
    261c:	ff 24       	eor	r15, r15
    261e:	f2 f8       	bld	r15, 2
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <disk_initialize+0x15e>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    2622:	f1 2c       	mov	r15, r1
    2624:	01 c0       	rjmp	.+2      	; 0x2628 <disk_initialize+0x15e>
    2626:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
    2628:	f0 92 2c 01 	sts	0x012C, r15
	s = ty ? 0 : STA_NOINIT;
    262c:	11 e0       	ldi	r17, 0x01	; 1
    262e:	f1 10       	cpse	r15, r1
    2630:	10 e0       	ldi	r17, 0x00	; 0
	Stat = s;
    2632:	10 93 00 01 	sts	0x0100, r17

	deselect();
    2636:	0e 94 39 11 	call	0x2272	; 0x2272 <deselect>
    263a:	01 c0       	rjmp	.+2      	; 0x263e <disk_initialize+0x174>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    263c:	13 e0       	ldi	r17, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
    263e:	81 2f       	mov	r24, r17
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	ff 90       	pop	r15
    2652:	ef 90       	pop	r14
    2654:	08 95       	ret

00002656 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2656:	bf 92       	push	r11
    2658:	cf 92       	push	r12
    265a:	df 92       	push	r13
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	eb 01       	movw	r28, r22
    266a:	69 01       	movw	r12, r18
    266c:	7a 01       	movw	r14, r20
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    266e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <disk_status>
    2672:	80 fd       	sbrc	r24, 0
    2674:	3b c0       	rjmp	.+118    	; 0x26ec <disk_read+0x96>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    2676:	80 91 2c 01 	lds	r24, 0x012C
    267a:	83 fd       	sbrc	r24, 3
    267c:	09 c0       	rjmp	.+18     	; 0x2690 <disk_read+0x3a>
    267e:	0b 2e       	mov	r0, r27
    2680:	b9 e0       	ldi	r27, 0x09	; 9
    2682:	cc 0c       	add	r12, r12
    2684:	dd 1c       	adc	r13, r13
    2686:	ee 1c       	adc	r14, r14
    2688:	ff 1c       	adc	r15, r15
    268a:	ba 95       	dec	r27
    268c:	d1 f7       	brne	.-12     	; 0x2682 <disk_read+0x2c>
    268e:	b0 2d       	mov	r27, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    2690:	02 30       	cpi	r16, 0x02	; 2
    2692:	11 05       	cpc	r17, r1
    2694:	28 f0       	brcs	.+10     	; 0x26a0 <disk_read+0x4a>
    2696:	0f 2e       	mov	r0, r31
    2698:	f2 e1       	ldi	r31, 0x12	; 18
    269a:	bf 2e       	mov	r11, r31
    269c:	f0 2d       	mov	r31, r0
    269e:	04 c0       	rjmp	.+8      	; 0x26a8 <disk_read+0x52>
    26a0:	0f 2e       	mov	r0, r31
    26a2:	f1 e1       	ldi	r31, 0x11	; 17
    26a4:	bf 2e       	mov	r11, r31
    26a6:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    26a8:	b7 01       	movw	r22, r14
    26aa:	a6 01       	movw	r20, r12
    26ac:	8b 2d       	mov	r24, r11
    26ae:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
    26b2:	81 11       	cpse	r24, r1
    26b4:	14 c0       	rjmp	.+40     	; 0x26de <disk_read+0x88>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	72 e0       	ldi	r23, 0x02	; 2
    26ba:	ce 01       	movw	r24, r28
    26bc:	0e 94 66 11 	call	0x22cc	; 0x22cc <rcvr_datablock>
    26c0:	89 2b       	or	r24, r25
    26c2:	21 f0       	breq	.+8      	; 0x26cc <disk_read+0x76>
			buff += 512;
    26c4:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    26c6:	01 50       	subi	r16, 0x01	; 1
    26c8:	11 09       	sbc	r17, r1
    26ca:	a9 f7       	brne	.-22     	; 0x26b6 <disk_read+0x60>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    26cc:	82 e1       	ldi	r24, 0x12	; 18
    26ce:	b8 12       	cpse	r11, r24
    26d0:	06 c0       	rjmp	.+12     	; 0x26de <disk_read+0x88>
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	50 e0       	ldi	r21, 0x00	; 0
    26d6:	ba 01       	movw	r22, r20
    26d8:	8c e0       	ldi	r24, 0x0C	; 12
    26da:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
	}
	deselect();
    26de:	0e 94 39 11 	call	0x2272	; 0x2272 <deselect>

	return count ? RES_ERROR : RES_OK;
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	01 2b       	or	r16, r17
    26e6:	19 f4       	brne	.+6      	; 0x26ee <disk_read+0x98>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <disk_read+0x98>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    26ec:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	df 90       	pop	r13
    26fc:	cf 90       	pop	r12
    26fe:	bf 90       	pop	r11
    2700:	08 95       	ret

00002702 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2702:	cf 92       	push	r12
    2704:	df 92       	push	r13
    2706:	ef 92       	push	r14
    2708:	ff 92       	push	r15
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	eb 01       	movw	r28, r22
    2714:	69 01       	movw	r12, r18
    2716:	7a 01       	movw	r14, r20
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    2718:	0e 94 5e 12 	call	0x24bc	; 0x24bc <disk_status>
    271c:	80 fd       	sbrc	r24, 0
    271e:	4b c0       	rjmp	.+150    	; 0x27b6 <disk_write+0xb4>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    2720:	80 91 2c 01 	lds	r24, 0x012C
    2724:	83 fd       	sbrc	r24, 3
    2726:	09 c0       	rjmp	.+18     	; 0x273a <disk_write+0x38>
    2728:	0b 2e       	mov	r0, r27
    272a:	b9 e0       	ldi	r27, 0x09	; 9
    272c:	cc 0c       	add	r12, r12
    272e:	dd 1c       	adc	r13, r13
    2730:	ee 1c       	adc	r14, r14
    2732:	ff 1c       	adc	r15, r15
    2734:	ba 95       	dec	r27
    2736:	d1 f7       	brne	.-12     	; 0x272c <disk_write+0x2a>
    2738:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    273a:	01 30       	cpi	r16, 0x01	; 1
    273c:	11 05       	cpc	r17, r1
    273e:	91 f4       	brne	.+36     	; 0x2764 <disk_write+0x62>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    2740:	b7 01       	movw	r22, r14
    2742:	a6 01       	movw	r20, r12
    2744:	88 e1       	ldi	r24, 0x18	; 24
    2746:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
    274a:	81 11       	cpse	r24, r1
    274c:	2d c0       	rjmp	.+90     	; 0x27a8 <disk_write+0xa6>
			&& xmit_datablock(buff, 0xFE))
    274e:	6e ef       	ldi	r22, 0xFE	; 254
    2750:	ce 01       	movw	r24, r28
    2752:	0e 94 a4 11 	call	0x2348	; 0x2348 <xmit_datablock>
    2756:	01 e0       	ldi	r16, 0x01	; 1
    2758:	10 e0       	ldi	r17, 0x00	; 0
    275a:	89 2b       	or	r24, r25
    275c:	29 f1       	breq	.+74     	; 0x27a8 <disk_write+0xa6>
    275e:	00 e0       	ldi	r16, 0x00	; 0
    2760:	10 e0       	ldi	r17, 0x00	; 0
    2762:	22 c0       	rjmp	.+68     	; 0x27a8 <disk_write+0xa6>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    2764:	86 70       	andi	r24, 0x06	; 6
    2766:	31 f0       	breq	.+12     	; 0x2774 <disk_write+0x72>
    2768:	a8 01       	movw	r20, r16
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	87 e9       	ldi	r24, 0x97	; 151
    2770:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    2774:	b7 01       	movw	r22, r14
    2776:	a6 01       	movw	r20, r12
    2778:	89 e1       	ldi	r24, 0x19	; 25
    277a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
    277e:	81 11       	cpse	r24, r1
    2780:	13 c0       	rjmp	.+38     	; 0x27a8 <disk_write+0xa6>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    2782:	6c ef       	ldi	r22, 0xFC	; 252
    2784:	ce 01       	movw	r24, r28
    2786:	0e 94 a4 11 	call	0x2348	; 0x2348 <xmit_datablock>
    278a:	89 2b       	or	r24, r25
    278c:	21 f0       	breq	.+8      	; 0x2796 <disk_write+0x94>
				buff += 512;
    278e:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    2790:	01 50       	subi	r16, 0x01	; 1
    2792:	11 09       	sbc	r17, r1
    2794:	b1 f7       	brne	.-20     	; 0x2782 <disk_write+0x80>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    2796:	6d ef       	ldi	r22, 0xFD	; 253
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 a4 11 	call	0x2348	; 0x2348 <xmit_datablock>
    27a0:	89 2b       	or	r24, r25
    27a2:	11 f4       	brne	.+4      	; 0x27a8 <disk_write+0xa6>
				count = 1;
    27a4:	01 e0       	ldi	r16, 0x01	; 1
    27a6:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    27a8:	0e 94 39 11 	call	0x2272	; 0x2272 <deselect>

	return count ? RES_ERROR : RES_OK;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	01 2b       	or	r16, r17
    27b0:	19 f4       	brne	.+6      	; 0x27b8 <disk_write+0xb6>
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	01 c0       	rjmp	.+2      	; 0x27b8 <disk_write+0xb6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    27b6:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	ff 90       	pop	r15
    27c2:	ef 90       	pop	r14
    27c4:	df 90       	pop	r13
    27c6:	cf 90       	pop	r12
    27c8:	08 95       	ret

000027ca <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    27ca:	cf 92       	push	r12
    27cc:	df 92       	push	r13
    27ce:	ef 92       	push	r14
    27d0:	ff 92       	push	r15
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	60 97       	sbiw	r28, 0x10	; 16
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	f8 94       	cli
    27e4:	de bf       	out	0x3e, r29	; 62
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	cd bf       	out	0x3d, r28	; 61
    27ea:	f6 2e       	mov	r15, r22
    27ec:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    27ee:	0e 94 5e 12 	call	0x24bc	; 0x24bc <disk_status>
    27f2:	80 fd       	sbrc	r24, 0
    27f4:	9a c0       	rjmp	.+308    	; 0x292a <disk_ioctl+0x160>

	res = RES_ERROR;
	switch (ctrl) {
    27f6:	cc 24       	eor	r12, r12
    27f8:	c3 94       	inc	r12
    27fa:	fc 14       	cp	r15, r12
    27fc:	89 f0       	breq	.+34     	; 0x2820 <disk_ioctl+0x56>
    27fe:	fc 14       	cp	r15, r12
    2800:	38 f0       	brcs	.+14     	; 0x2810 <disk_ioctl+0x46>
    2802:	0f 2e       	mov	r0, r31
    2804:	f3 e0       	ldi	r31, 0x03	; 3
    2806:	df 2e       	mov	r13, r31
    2808:	f0 2d       	mov	r31, r0
    280a:	fd 10       	cpse	r15, r13
    280c:	86 c0       	rjmp	.+268    	; 0x291a <disk_ioctl+0x150>
    280e:	7a c0       	rjmp	.+244    	; 0x2904 <disk_ioctl+0x13a>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    2810:	0e 94 49 11 	call	0x2292	; 0x2292 <select>
    2814:	11 e0       	ldi	r17, 0x01	; 1
    2816:	89 2b       	or	r24, r25
    2818:	09 f4       	brne	.+2      	; 0x281c <disk_ioctl+0x52>
    281a:	84 c0       	rjmp	.+264    	; 0x2924 <disk_ioctl+0x15a>
    281c:	10 e0       	ldi	r17, 0x00	; 0
    281e:	82 c0       	rjmp	.+260    	; 0x2924 <disk_ioctl+0x15a>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    2820:	40 e0       	ldi	r20, 0x00	; 0
    2822:	50 e0       	ldi	r21, 0x00	; 0
    2824:	ba 01       	movw	r22, r20
    2826:	89 e0       	ldi	r24, 0x09	; 9
    2828:	0e 94 e5 11 	call	0x23ca	; 0x23ca <send_cmd>
    282c:	81 11       	cpse	r24, r1
    282e:	77 c0       	rjmp	.+238    	; 0x291e <disk_ioctl+0x154>
    2830:	60 e1       	ldi	r22, 0x10	; 16
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	ce 01       	movw	r24, r28
    2836:	01 96       	adiw	r24, 0x01	; 1
    2838:	0e 94 66 11 	call	0x22cc	; 0x22cc <rcvr_datablock>
    283c:	89 2b       	or	r24, r25
    283e:	09 f4       	brne	.+2      	; 0x2842 <disk_ioctl+0x78>
    2840:	70 c0       	rjmp	.+224    	; 0x2922 <disk_ioctl+0x158>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	82 95       	swap	r24
    2846:	86 95       	lsr	r24
    2848:	86 95       	lsr	r24
    284a:	83 70       	andi	r24, 0x03	; 3
    284c:	81 30       	cpi	r24, 0x01	; 1
    284e:	21 f5       	brne	.+72     	; 0x2898 <disk_ioctl+0xce>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    2850:	88 85       	ldd	r24, Y+8	; 0x08
    2852:	8f 73       	andi	r24, 0x3F	; 63
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a0 e0       	ldi	r26, 0x00	; 0
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	dc 01       	movw	r26, r24
    285c:	99 27       	eor	r25, r25
    285e:	88 27       	eor	r24, r24
    2860:	01 96       	adiw	r24, 0x01	; 1
    2862:	a1 1d       	adc	r26, r1
    2864:	b1 1d       	adc	r27, r1
    2866:	39 85       	ldd	r19, Y+9	; 0x09
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	4a 85       	ldd	r20, Y+10	; 0x0a
    286c:	24 0f       	add	r18, r20
    286e:	31 1d       	adc	r19, r1
    2870:	82 0f       	add	r24, r18
    2872:	93 1f       	adc	r25, r19
    2874:	a1 1d       	adc	r26, r1
    2876:	b1 1d       	adc	r27, r1
					*(DWORD*)buff = cs << 10;
    2878:	07 2e       	mov	r0, r23
    287a:	7a e0       	ldi	r23, 0x0A	; 10
    287c:	88 0f       	add	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	aa 1f       	adc	r26, r26
    2882:	bb 1f       	adc	r27, r27
    2884:	7a 95       	dec	r23
    2886:	d1 f7       	brne	.-12     	; 0x287c <disk_ioctl+0xb2>
    2888:	70 2d       	mov	r23, r0
    288a:	f8 01       	movw	r30, r16
    288c:	80 83       	st	Z, r24
    288e:	91 83       	std	Z+1, r25	; 0x01
    2890:	a2 83       	std	Z+2, r26	; 0x02
    2892:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
				}
				res = RES_OK;
    2894:	10 e0       	ldi	r17, 0x00	; 0
    2896:	46 c0       	rjmp	.+140    	; 0x2924 <disk_ioctl+0x15a>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    2898:	49 85       	ldd	r20, Y+9	; 0x09
    289a:	42 95       	swap	r20
    289c:	46 95       	lsr	r20
    289e:	46 95       	lsr	r20
    28a0:	43 70       	andi	r20, 0x03	; 3
    28a2:	88 85       	ldd	r24, Y+8	; 0x08
    28a4:	50 e0       	ldi	r21, 0x00	; 0
    28a6:	f4 e0       	ldi	r31, 0x04	; 4
    28a8:	8f 9f       	mul	r24, r31
    28aa:	40 0d       	add	r20, r0
    28ac:	51 1d       	adc	r21, r1
    28ae:	11 24       	eor	r1, r1
    28b0:	4f 5f       	subi	r20, 0xFF	; 255
    28b2:	5f 4f       	sbci	r21, 0xFF	; 255
    28b4:	2f 81       	ldd	r18, Y+7	; 0x07
    28b6:	23 70       	andi	r18, 0x03	; 3
    28b8:	92 2f       	mov	r25, r18
    28ba:	99 0f       	add	r25, r25
    28bc:	99 0f       	add	r25, r25
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	48 0f       	add	r20, r24
    28c2:	59 1f       	adc	r21, r25
    28c4:	60 e0       	ldi	r22, 0x00	; 0
    28c6:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    28c8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ca:	9f 70       	andi	r25, 0x0F	; 15
    28cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ce:	88 1f       	adc	r24, r24
    28d0:	88 27       	eor	r24, r24
    28d2:	88 1f       	adc	r24, r24
    28d4:	98 0f       	add	r25, r24
    28d6:	9e 5f       	subi	r25, 0xFE	; 254
    28d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    28da:	83 70       	andi	r24, 0x03	; 3
    28dc:	88 0f       	add	r24, r24
    28de:	89 0f       	add	r24, r25
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	09 97       	sbiw	r24, 0x09	; 9
    28e4:	6a 01       	movw	r12, r20
    28e6:	7b 01       	movw	r14, r22
    28e8:	04 c0       	rjmp	.+8      	; 0x28f2 <disk_ioctl+0x128>
    28ea:	cc 0c       	add	r12, r12
    28ec:	dd 1c       	adc	r13, r13
    28ee:	ee 1c       	adc	r14, r14
    28f0:	ff 1c       	adc	r15, r15
    28f2:	8a 95       	dec	r24
    28f4:	d2 f7       	brpl	.-12     	; 0x28ea <disk_ioctl+0x120>
    28f6:	f8 01       	movw	r30, r16
    28f8:	c0 82       	st	Z, r12
    28fa:	d1 82       	std	Z+1, r13	; 0x01
    28fc:	e2 82       	std	Z+2, r14	; 0x02
    28fe:	f3 82       	std	Z+3, r15	; 0x03
				}
				res = RES_OK;
    2900:	10 e0       	ldi	r17, 0x00	; 0
    2902:	10 c0       	rjmp	.+32     	; 0x2924 <disk_ioctl+0x15a>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
    2904:	80 e8       	ldi	r24, 0x80	; 128
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	f8 01       	movw	r30, r16
    290e:	80 83       	st	Z, r24
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	a2 83       	std	Z+2, r26	; 0x02
    2914:	b3 83       	std	Z+3, r27	; 0x03
			res = RES_OK;
    2916:	10 e0       	ldi	r17, 0x00	; 0
			break;
    2918:	05 c0       	rjmp	.+10     	; 0x2924 <disk_ioctl+0x15a>

		default:
			res = RES_PARERR;
    291a:	14 e0       	ldi	r17, 0x04	; 4
    291c:	03 c0       	rjmp	.+6      	; 0x2924 <disk_ioctl+0x15a>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    291e:	11 e0       	ldi	r17, 0x01	; 1
    2920:	01 c0       	rjmp	.+2      	; 0x2924 <disk_ioctl+0x15a>
    2922:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
    2924:	0e 94 39 11 	call	0x2272	; 0x2272 <deselect>
    2928:	01 c0       	rjmp	.+2      	; 0x292c <disk_ioctl+0x162>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    292a:	13 e0       	ldi	r17, 0x03	; 3
	}

	deselect();

	return res;
}
    292c:	81 2f       	mov	r24, r17
    292e:	60 96       	adiw	r28, 0x10	; 16
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	1f 91       	pop	r17
    2940:	0f 91       	pop	r16
    2942:	ff 90       	pop	r15
    2944:	ef 90       	pop	r14
    2946:	df 90       	pop	r13
    2948:	cf 90       	pop	r12
    294a:	08 95       	ret

0000294c <main>:
FATFS FatFs;		/* FatFs work area needed for each volume */
FIL Fil;			/* File object needed for each open file */


int main (void)
{
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	00 d0       	rcall	.+0      	; 0x2952 <main+0x6>
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2956:	2f e7       	ldi	r18, 0x7F	; 127
    2958:	84 e8       	ldi	r24, 0x84	; 132
    295a:	9e e1       	ldi	r25, 0x1E	; 30
    295c:	21 50       	subi	r18, 0x01	; 1
    295e:	80 40       	sbci	r24, 0x00	; 0
    2960:	90 40       	sbci	r25, 0x00	; 0
    2962:	e1 f7       	brne	.-8      	; 0x295c <main+0x10>
    2964:	00 c0       	rjmp	.+0      	; 0x2966 <main+0x1a>
    2966:	00 00       	nop
	_delay_ms(10000);
	
	sei();
    2968:	78 94       	sei
	
	UINT bw;
	DDRC |= 0xFF;
    296a:	87 b1       	in	r24, 0x07	; 7
    296c:	8f ef       	ldi	r24, 0xFF	; 255
    296e:	87 b9       	out	0x07, r24	; 7

	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	67 e2       	ldi	r22, 0x27	; 39
    2974:	71 e0       	ldi	r23, 0x01	; 1
    2976:	8d e2       	ldi	r24, 0x2D	; 45
    2978:	91 e0       	ldi	r25, 0x01	; 1
    297a:	0e 94 b7 0c 	call	0x196e	; 0x196e <f_mount>

	if (f_open(&Fil, "newfile.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	/* Create a file */
    297e:	4a e0       	ldi	r20, 0x0A	; 10
    2980:	60 e1       	ldi	r22, 0x10	; 16
    2982:	71 e0       	ldi	r23, 0x01	; 1
    2984:	8b e5       	ldi	r24, 0x5B	; 91
    2986:	93 e0       	ldi	r25, 0x03	; 3
    2988:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <f_open>
    298c:	81 11       	cpse	r24, r1
    298e:	16 c0       	rjmp	.+44     	; 0x29bc <main+0x70>

		f_write(&Fil, "It works!\r\n", 11, &bw);	/* Write data to the file */
    2990:	9e 01       	movw	r18, r28
    2992:	2f 5f       	subi	r18, 0xFF	; 255
    2994:	3f 4f       	sbci	r19, 0xFF	; 255
    2996:	4b e0       	ldi	r20, 0x0B	; 11
    2998:	50 e0       	ldi	r21, 0x00	; 0
    299a:	6c e1       	ldi	r22, 0x1C	; 28
    299c:	71 e0       	ldi	r23, 0x01	; 1
    299e:	8b e5       	ldi	r24, 0x5B	; 91
    29a0:	93 e0       	ldi	r25, 0x03	; 3
    29a2:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <f_write>

		f_close(&Fil);								/* Close the file */
    29a6:	8b e5       	ldi	r24, 0x5B	; 91
    29a8:	93 e0       	ldi	r25, 0x03	; 3
    29aa:	0e 94 8b 10 	call	0x2116	; 0x2116 <f_close>

		if (bw == 11) {		/* Lights green LED if data written well */
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	9a 81       	ldd	r25, Y+2	; 0x02
    29b2:	0b 97       	sbiw	r24, 0x0b	; 11
    29b4:	19 f4       	brne	.+6      	; 0x29bc <main+0x70>
			PORTC |= 0xFF;	/* Set PC4 high */
    29b6:	88 b1       	in	r24, 0x08	; 8
    29b8:	8f ef       	ldi	r24, 0xFF	; 255
    29ba:	88 b9       	out	0x08, r24	; 8
    29bc:	ff cf       	rjmp	.-2      	; 0x29bc <main+0x70>

000029be <get_fattime>:
	| ((DWORD)7 << 21)				/* Month 7 */
	| ((DWORD)28 << 16)				/* Mday 28 */
	| ((DWORD)0 << 11)				/* Hour 0 */
	| ((DWORD)0 << 5)				/* Min 0 */
	| ((DWORD)0 >> 1);				/* Sec 0 */
}
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	70 e0       	ldi	r23, 0x00	; 0
    29c2:	8c ef       	ldi	r24, 0xFC	; 252
    29c4:	92 e4       	ldi	r25, 0x42	; 66
    29c6:	08 95       	ret

000029c8 <__udivmodsi4>:
    29c8:	a1 e2       	ldi	r26, 0x21	; 33
    29ca:	1a 2e       	mov	r1, r26
    29cc:	aa 1b       	sub	r26, r26
    29ce:	bb 1b       	sub	r27, r27
    29d0:	fd 01       	movw	r30, r26
    29d2:	0d c0       	rjmp	.+26     	; 0x29ee <__udivmodsi4_ep>

000029d4 <__udivmodsi4_loop>:
    29d4:	aa 1f       	adc	r26, r26
    29d6:	bb 1f       	adc	r27, r27
    29d8:	ee 1f       	adc	r30, r30
    29da:	ff 1f       	adc	r31, r31
    29dc:	a2 17       	cp	r26, r18
    29de:	b3 07       	cpc	r27, r19
    29e0:	e4 07       	cpc	r30, r20
    29e2:	f5 07       	cpc	r31, r21
    29e4:	20 f0       	brcs	.+8      	; 0x29ee <__udivmodsi4_ep>
    29e6:	a2 1b       	sub	r26, r18
    29e8:	b3 0b       	sbc	r27, r19
    29ea:	e4 0b       	sbc	r30, r20
    29ec:	f5 0b       	sbc	r31, r21

000029ee <__udivmodsi4_ep>:
    29ee:	66 1f       	adc	r22, r22
    29f0:	77 1f       	adc	r23, r23
    29f2:	88 1f       	adc	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	1a 94       	dec	r1
    29f8:	69 f7       	brne	.-38     	; 0x29d4 <__udivmodsi4_loop>
    29fa:	60 95       	com	r22
    29fc:	70 95       	com	r23
    29fe:	80 95       	com	r24
    2a00:	90 95       	com	r25
    2a02:	9b 01       	movw	r18, r22
    2a04:	ac 01       	movw	r20, r24
    2a06:	bd 01       	movw	r22, r26
    2a08:	cf 01       	movw	r24, r30
    2a0a:	08 95       	ret

00002a0c <__muluhisi3>:
    2a0c:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__umulhisi3>
    2a10:	a5 9f       	mul	r26, r21
    2a12:	90 0d       	add	r25, r0
    2a14:	b4 9f       	mul	r27, r20
    2a16:	90 0d       	add	r25, r0
    2a18:	a4 9f       	mul	r26, r20
    2a1a:	80 0d       	add	r24, r0
    2a1c:	91 1d       	adc	r25, r1
    2a1e:	11 24       	eor	r1, r1
    2a20:	08 95       	ret

00002a22 <__umulhisi3>:
    2a22:	a2 9f       	mul	r26, r18
    2a24:	b0 01       	movw	r22, r0
    2a26:	b3 9f       	mul	r27, r19
    2a28:	c0 01       	movw	r24, r0
    2a2a:	a3 9f       	mul	r26, r19
    2a2c:	01 d0       	rcall	.+2      	; 0x2a30 <__umulhisi3+0xe>
    2a2e:	b2 9f       	mul	r27, r18
    2a30:	70 0d       	add	r23, r0
    2a32:	81 1d       	adc	r24, r1
    2a34:	11 24       	eor	r1, r1
    2a36:	91 1d       	adc	r25, r1
    2a38:	08 95       	ret

00002a3a <_exit>:
    2a3a:	f8 94       	cli

00002a3c <__stop_program>:
    2a3c:	ff cf       	rjmp	.-2      	; 0x2a3c <__stop_program>
