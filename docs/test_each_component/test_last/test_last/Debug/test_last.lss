
test_last.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000174  00800100  00004f5a  00004fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004f5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  00800274  00800274  00005162  2**0
                  ALLOC
  3 .stab         00003abc  00000000  00000000  00005164  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010aa  00000000  00000000  00008c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00009cca  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000438  00000000  00000000  00009cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006da9  00000000  00000000  0000a131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001517  00000000  00000000  00010eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000023ca  00000000  00000000  000123f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011b8  00000000  00000000  000147bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ee9  00000000  00000000  00015974  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007df6  00000000  00000000  0001685d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000538  00000000  00000000  0001e653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 81 00 	jmp	0x102	; 0x102 <__ctors_end>
       4:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
       8:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
       c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      10:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      14:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      18:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      1c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      20:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      24:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      28:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      2c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      30:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      34:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      3c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      40:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      44:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      48:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      4c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      50:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      54:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      58:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      5c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      60:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      64:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      68:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      6c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      70:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__vector_28>
      74:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__vector_29>
      78:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      7c:	08 4a       	sbci	r16, 0xA8	; 168
      7e:	d7 3b       	cpi	r29, 0xB7	; 183
      80:	3b ce       	rjmp	.-906    	; 0xfffffcf8 <__eeprom_end+0xff7efcf8>
      82:	01 6e       	ori	r16, 0xE1	; 225
      84:	84 bc       	out	0x24, r8	; 36
      86:	bf fd       	.word	0xfdbf	; ????
      88:	c1 2f       	mov	r28, r17
      8a:	3d 6c       	ori	r19, 0xCD	; 205
      8c:	74 31       	cpi	r23, 0x14	; 20
      8e:	9a bd       	out	0x2a, r25	; 42
      90:	56 83       	std	Z+6, r21	; 0x06
      92:	3d da       	rcall	.-2950   	; 0xfffff50e <__eeprom_end+0xff7ef50e>
      94:	3d 00       	.word	0x003d	; ????
      96:	c7 7f       	andi	r28, 0xF7	; 247
      98:	11 be       	out	0x31, r1	; 49
      9a:	d9 e4       	ldi	r29, 0x49	; 73
      9c:	bb 4c       	sbci	r27, 0xCB	; 203
      9e:	3e 91       	ld	r19, -X
      a0:	6b aa       	std	Y+51, r6	; 0x33
      a2:	aa be       	out	0x3a, r10	; 58
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 05       	cpc	r19, r15
      aa:	a8 4c       	sbci	r26, 0xC8	; 200
      ac:	cd b2       	in	r12, 0x1d	; 29
      ae:	d4 4e       	sbci	r29, 0xE4	; 228
      b0:	b9 38       	cpi	r27, 0x89	; 137
      b2:	36 a9       	ldd	r19, Z+54	; 0x36
      b4:	02 0c       	add	r0, r2
      b6:	50 b9       	out	0x00, r21	; 0
      b8:	91 86       	std	Z+9, r9	; 0x09
      ba:	88 08       	sbc	r8, r8
      bc:	3c a6       	std	Y+44, r3	; 0x2c
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	2a be       	out	0x3a, r2	; 58
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	3f 49       	sbci	r19, 0x9F	; 159

000000c7 <pstr_inf>:
      c7:	49 4e 46                                            INF

000000ca <pstr_inity>:
      ca:	49 4e 49 54 59                                      INITY

000000cf <pstr_nan>:
      cf:	4e 41 4e                                            NAN

000000d2 <pwr_p10>:
      d2:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      e2:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000ea <pwr_m10>:
      ea:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      fa:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000102 <__ctors_end>:
     102:	11 24       	eor	r1, r1
     104:	1f be       	out	0x3f, r1	; 63
     106:	cf ef       	ldi	r28, 0xFF	; 255
     108:	d8 e0       	ldi	r29, 0x08	; 8
     10a:	de bf       	out	0x3e, r29	; 62
     10c:	cd bf       	out	0x3d, r28	; 61

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b1 e0       	ldi	r27, 0x01	; 1
     114:	ea e5       	ldi	r30, 0x5A	; 90
     116:	ff e4       	ldi	r31, 0x4F	; 79
     118:	02 c0       	rjmp	.+4      	; 0x11e <__do_copy_data+0x10>
     11a:	05 90       	lpm	r0, Z+
     11c:	0d 92       	st	X+, r0
     11e:	a4 37       	cpi	r26, 0x74	; 116
     120:	b1 07       	cpc	r27, r17
     122:	d9 f7       	brne	.-10     	; 0x11a <__do_copy_data+0xc>

00000124 <__do_clear_bss>:
     124:	26 e0       	ldi	r18, 0x06	; 6
     126:	a4 e7       	ldi	r26, 0x74	; 116
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	01 c0       	rjmp	.+2      	; 0x12e <.do_clear_bss_start>

0000012c <.do_clear_bss_loop>:
     12c:	1d 92       	st	X+, r1

0000012e <.do_clear_bss_start>:
     12e:	a1 37       	cpi	r26, 0x71	; 113
     130:	b2 07       	cpc	r27, r18
     132:	e1 f7       	brne	.-8      	; 0x12c <.do_clear_bss_loop>
     134:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <main>
     138:	0c 94 ab 27 	jmp	0x4f56	; 0x4f56 <_exit>

0000013c <__bad_interrupt>:
     13c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000140 <getCoordinate>:

// this flags is needed for distance calculation
int flagSouth = FALSE;
int flagWest = FALSE;

void getCoordinate(char* pInput, char* pLatOut, char* pLongOut){
     140:	df 92       	push	r13
     142:	ef 92       	push	r14
     144:	ff 92       	push	r15
     146:	0f 93       	push	r16
     148:	1f 93       	push	r17
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	ec 01       	movw	r28, r24
	int j=0;
	int loop=7;

	// flag for controlling loop
	int hasBoth = FALSE;
	int hasLat = FALSE;
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	b0 e0       	ldi	r27, 0x00	; 0

void getCoordinate(char* pInput, char* pLatOut, char* pLongOut){

	int i=0;
	int j=0;
	int loop=7;
     154:	27 e0       	ldi	r18, 0x07	; 7
     156:	30 e0       	ldi	r19, 0x00	; 0
int flagWest = FALSE;

void getCoordinate(char* pInput, char* pLatOut, char* pLongOut){

	int i=0;
	int j=0;
     158:	00 e0       	ldi	r16, 0x00	; 0
     15a:	10 e0       	ldi	r17, 0x00	; 0
int flagSouth = FALSE;
int flagWest = FALSE;

void getCoordinate(char* pInput, char* pLatOut, char* pLongOut){

	int i=0;
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	90 e0       	ldi	r25, 0x00	; 0

	do{
		if(!hasLat){
			if(pInput[loop] == 'S' || pInput[loop] == 'N'){
				if(pInput[loop] == 'S'){
					flagSouth = TRUE;
     160:	ee 24       	eor	r14, r14
     162:	e3 94       	inc	r14
     164:	f1 2c       	mov	r15, r1
	// flag for controlling loop
	int hasBoth = FALSE;
	int hasLat = FALSE;

	do{
		if(!hasLat){
     166:	10 97       	sbiw	r26, 0x00	; 0
     168:	f9 f4       	brne	.+62     	; 0x1a8 <getCoordinate+0x68>
			if(pInput[loop] == 'S' || pInput[loop] == 'N'){
     16a:	fe 01       	movw	r30, r28
     16c:	e2 0f       	add	r30, r18
     16e:	f3 1f       	adc	r31, r19
     170:	d0 80       	ld	r13, Z
     172:	e3 e5       	ldi	r30, 0x53	; 83
     174:	de 16       	cp	r13, r30
     176:	21 f0       	breq	.+8      	; 0x180 <getCoordinate+0x40>
     178:	ee e4       	ldi	r30, 0x4E	; 78
     17a:	de 12       	cpse	r13, r30
     17c:	0d c0       	rjmp	.+26     	; 0x198 <getCoordinate+0x58>
     17e:	08 c0       	rjmp	.+16     	; 0x190 <getCoordinate+0x50>
				if(pInput[loop] == 'S'){
					flagSouth = TRUE;
     180:	f0 92 77 02 	sts	0x0277, r15
     184:	e0 92 76 02 	sts	0x0276, r14
					hasLat = TRUE;
					loop += 2; // jump to next coordinate
     188:	2e 5f       	subi	r18, 0xFE	; 254
     18a:	3f 4f       	sbci	r19, 0xFF	; 255
	do{
		if(!hasLat){
			if(pInput[loop] == 'S' || pInput[loop] == 'N'){
				if(pInput[loop] == 'S'){
					flagSouth = TRUE;
					hasLat = TRUE;
     18c:	d7 01       	movw	r26, r14
     18e:	eb cf       	rjmp	.-42     	; 0x166 <getCoordinate+0x26>
					loop += 2; // jump to next coordinate
				}
				else{
					hasLat = TRUE;
					loop += 2; // jump to next coordinate
     190:	2e 5f       	subi	r18, 0xFE	; 254
     192:	3f 4f       	sbci	r19, 0xFF	; 255
					flagSouth = TRUE;
					hasLat = TRUE;
					loop += 2; // jump to next coordinate
				}
				else{
					hasLat = TRUE;
     194:	d7 01       	movw	r26, r14
     196:	e7 cf       	rjmp	.-50     	; 0x166 <getCoordinate+0x26>
					loop += 2; // jump to next coordinate
				}
			}
			else{
				pLatOut[i++] = pInput[loop++];
     198:	fb 01       	movw	r30, r22
     19a:	e8 0f       	add	r30, r24
     19c:	f9 1f       	adc	r31, r25
     19e:	d0 82       	st	Z, r13
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	2f 5f       	subi	r18, 0xFF	; 255
     1a4:	3f 4f       	sbci	r19, 0xFF	; 255
     1a6:	df cf       	rjmp	.-66     	; 0x166 <getCoordinate+0x26>
			}
		}
		else{
			if(pInput[loop] == 'W' || pInput[loop] == 'E'){
     1a8:	fe 01       	movw	r30, r28
     1aa:	e2 0f       	add	r30, r18
     1ac:	f3 1f       	adc	r31, r19
     1ae:	d0 80       	ld	r13, Z
     1b0:	e7 e5       	ldi	r30, 0x57	; 87
     1b2:	de 16       	cp	r13, r30
     1b4:	21 f0       	breq	.+8      	; 0x1be <getCoordinate+0x7e>
     1b6:	e5 e4       	ldi	r30, 0x45	; 69
     1b8:	de 12       	cpse	r13, r30
     1ba:	08 c0       	rjmp	.+16     	; 0x1cc <getCoordinate+0x8c>
     1bc:	23 c0       	rjmp	.+70     	; 0x204 <getCoordinate+0xc4>
				if(pInput[loop] == 'W'){
					flagWest = TRUE;
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	30 93 75 02 	sts	0x0275, r19
     1c6:	20 93 74 02 	sts	0x0274, r18
     1ca:	1c c0       	rjmp	.+56     	; 0x204 <getCoordinate+0xc4>
				else{
					hasBoth = TRUE;
				}
			}
			else{
				pLongOut[j++] = pInput[loop++];
     1cc:	fa 01       	movw	r30, r20
     1ce:	e0 0f       	add	r30, r16
     1d0:	f1 1f       	adc	r31, r17
     1d2:	d0 82       	st	Z, r13
     1d4:	0f 5f       	subi	r16, 0xFF	; 255
     1d6:	1f 4f       	sbci	r17, 0xFF	; 255
     1d8:	2f 5f       	subi	r18, 0xFF	; 255
     1da:	3f 4f       	sbci	r19, 0xFF	; 255
     1dc:	c4 cf       	rjmp	.-120    	; 0x166 <getCoordinate+0x26>
	}while(!hasBoth);

	// Filling the rest of the array with end of line to avoid
	// having old value when storing new value
	for(--i;i<13;i++){
		pLatOut[i] = '\0';
     1de:	11 92       	st	Z+, r1
		}
	}while(!hasBoth);

	// Filling the rest of the array with end of line to avoid
	// having old value when storing new value
	for(--i;i<13;i++){
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	8d 30       	cpi	r24, 0x0D	; 13
     1e4:	91 05       	cpc	r25, r1
     1e6:	d9 f7       	brne	.-10     	; 0x1de <getCoordinate+0x9e>
		pLatOut[i] = '\0';
	}
	
	for(--j;j<13;j++){
     1e8:	c8 01       	movw	r24, r16
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	8d 30       	cpi	r24, 0x0D	; 13
     1ee:	91 05       	cpc	r25, r1
     1f0:	8c f4       	brge	.+34     	; 0x214 <getCoordinate+0xd4>

// this flags is needed for distance calculation
int flagSouth = FALSE;
int flagWest = FALSE;

void getCoordinate(char* pInput, char* pLatOut, char* pLongOut){
     1f2:	fa 01       	movw	r30, r20
     1f4:	e8 0f       	add	r30, r24
     1f6:	f9 1f       	adc	r31, r25
	for(--i;i<13;i++){
		pLatOut[i] = '\0';
	}
	
	for(--j;j<13;j++){
		pLongOut[j] = '\0';
     1f8:	11 92       	st	Z+, r1
	// having old value when storing new value
	for(--i;i<13;i++){
		pLatOut[i] = '\0';
	}
	
	for(--j;j<13;j++){
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	8d 30       	cpi	r24, 0x0D	; 13
     1fe:	91 05       	cpc	r25, r1
     200:	d9 f7       	brne	.-10     	; 0x1f8 <getCoordinate+0xb8>
     202:	08 c0       	rjmp	.+16     	; 0x214 <getCoordinate+0xd4>
		}
	}while(!hasBoth);

	// Filling the rest of the array with end of line to avoid
	// having old value when storing new value
	for(--i;i<13;i++){
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	8d 30       	cpi	r24, 0x0D	; 13
     208:	91 05       	cpc	r25, r1
     20a:	74 f7       	brge	.-36     	; 0x1e8 <getCoordinate+0xa8>

// this flags is needed for distance calculation
int flagSouth = FALSE;
int flagWest = FALSE;

void getCoordinate(char* pInput, char* pLatOut, char* pLongOut){
     20c:	fb 01       	movw	r30, r22
     20e:	e8 0f       	add	r30, r24
     210:	f9 1f       	adc	r31, r25
     212:	e5 cf       	rjmp	.-54     	; 0x1de <getCoordinate+0x9e>
	}
	
	for(--j;j<13;j++){
		pLongOut[j] = '\0';
	}
}
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	df 90       	pop	r13
     222:	08 95       	ret

00000224 <coorTranslate>:

double coorTranslate(char* pInput, char CD){ // Cardinal Direction Longitude 'O' Latitude 'A'
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	f6 2e       	mov	r15, r22

	double x = atof(pInput);
     230:	0e 94 fd 22 	call	0x45fa	; 0x45fa <atof>
     234:	06 2f       	mov	r16, r22
     236:	17 2f       	mov	r17, r23
     238:	d8 2f       	mov	r29, r24
     23a:	c9 2f       	mov	r28, r25

	switch(CD){
     23c:	81 e4       	ldi	r24, 0x41	; 65
     23e:	f8 16       	cp	r15, r24
     240:	11 f1       	breq	.+68     	; 0x286 <coorTranslate+0x62>
     242:	8f e4       	ldi	r24, 0x4F	; 79
     244:	f8 12       	cpse	r15, r24
     246:	3d c0       	rjmp	.+122    	; 0x2c2 <coorTranslate+0x9e>
		case 'O':
			if(flagWest){	// if flagWest is true, the negative value is returned
     248:	80 91 74 02 	lds	r24, 0x0274
     24c:	90 91 75 02 	lds	r25, 0x0275
     250:	89 2b       	or	r24, r25
     252:	b9 f1       	breq	.+110    	; 0x2c2 <coorTranslate+0x9e>
				return (x-(x*2));
     254:	20 2f       	mov	r18, r16
     256:	31 2f       	mov	r19, r17
     258:	4d 2f       	mov	r20, r29
     25a:	5c 2f       	mov	r21, r28
     25c:	60 2f       	mov	r22, r16
     25e:	71 2f       	mov	r23, r17
     260:	8d 2f       	mov	r24, r29
     262:	9c 2f       	mov	r25, r28
     264:	0e 94 09 20 	call	0x4012	; 0x4012 <__addsf3>
     268:	26 2f       	mov	r18, r22
     26a:	37 2f       	mov	r19, r23
     26c:	48 2f       	mov	r20, r24
     26e:	59 2f       	mov	r21, r25
     270:	60 2f       	mov	r22, r16
     272:	71 2f       	mov	r23, r17
     274:	8d 2f       	mov	r24, r29
     276:	9c 2f       	mov	r25, r28
     278:	0e 94 08 20 	call	0x4010	; 0x4010 <__subsf3>
     27c:	06 2f       	mov	r16, r22
     27e:	17 2f       	mov	r17, r23
     280:	d8 2f       	mov	r29, r24
     282:	c9 2f       	mov	r28, r25
     284:	1e c0       	rjmp	.+60     	; 0x2c2 <coorTranslate+0x9e>
			}
			else return x;

		case 'A':
			if(flagSouth){	// if flagWest is true, the negative value is returned
     286:	80 91 76 02 	lds	r24, 0x0276
     28a:	90 91 77 02 	lds	r25, 0x0277
     28e:	89 2b       	or	r24, r25
     290:	c1 f0       	breq	.+48     	; 0x2c2 <coorTranslate+0x9e>
				return (x-(x*2));
     292:	20 2f       	mov	r18, r16
     294:	31 2f       	mov	r19, r17
     296:	4d 2f       	mov	r20, r29
     298:	5c 2f       	mov	r21, r28
     29a:	60 2f       	mov	r22, r16
     29c:	71 2f       	mov	r23, r17
     29e:	8d 2f       	mov	r24, r29
     2a0:	9c 2f       	mov	r25, r28
     2a2:	0e 94 09 20 	call	0x4012	; 0x4012 <__addsf3>
     2a6:	26 2f       	mov	r18, r22
     2a8:	37 2f       	mov	r19, r23
     2aa:	48 2f       	mov	r20, r24
     2ac:	59 2f       	mov	r21, r25
     2ae:	60 2f       	mov	r22, r16
     2b0:	71 2f       	mov	r23, r17
     2b2:	8d 2f       	mov	r24, r29
     2b4:	9c 2f       	mov	r25, r28
     2b6:	0e 94 08 20 	call	0x4010	; 0x4010 <__subsf3>
     2ba:	06 2f       	mov	r16, r22
     2bc:	17 2f       	mov	r17, r23
     2be:	d8 2f       	mov	r29, r24
     2c0:	c9 2f       	mov	r28, r25
			else return x;

		default:
			return x;
	}
}
     2c2:	60 2f       	mov	r22, r16
     2c4:	71 2f       	mov	r23, r17
     2c6:	8d 2f       	mov	r24, r29
     2c8:	9c 2f       	mov	r25, r28
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	08 95       	ret

000002d6 <getRadians>:
	// Put the distace calculated double back to char array
	sprintf(pDistanceOut, "%.4f", tempDist);
}

double getRadians(double degree){
	return (degree * (M_PI/180));
     2d6:	25 e3       	ldi	r18, 0x35	; 53
     2d8:	3a ef       	ldi	r19, 0xFA	; 250
     2da:	4e e8       	ldi	r20, 0x8E	; 142
     2dc:	5c e3       	ldi	r21, 0x3C	; 60
     2de:	0e 94 ee 21 	call	0x43dc	; 0x43dc <__mulsf3>
}
     2e2:	08 95       	ret

000002e4 <getDistance>:
		default:
			return x;
	}
}

void getDistance(char* pNMEAIn, char* pSDBuffIn, char* pLatGPSOut, char* pLongGPSOut, char* pLatSDOut, char* pLongSDOut, char* pDistanceOut){
     2e4:	2f 92       	push	r2
     2e6:	3f 92       	push	r3
     2e8:	4f 92       	push	r4
     2ea:	5f 92       	push	r5
     2ec:	6f 92       	push	r6
     2ee:	7f 92       	push	r7
     2f0:	8f 92       	push	r8
     2f2:	9f 92       	push	r9
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	28 97       	sbiw	r28, 0x08	; 8
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	4b 01       	movw	r8, r22
     31a:	5a 01       	movw	r10, r20
     31c:	39 01       	movw	r6, r18
     31e:	27 01       	movw	r4, r14
     320:	2c 2c       	mov	r2, r12
     322:	3d 2c       	mov	r3, r13

	double tempLongGPS, tempLatGPS, tempLongSD, tempLatSD, tempDist;

	getCoordinate(pNMEAIn, pLatGPSOut, pLongGPSOut);
     324:	a9 01       	movw	r20, r18
     326:	b5 01       	movw	r22, r10
     328:	0e 94 a0 00 	call	0x140	; 0x140 <getCoordinate>

	getCoordinate(pSDBuffIn, pLatSDOut, pLongSDOut);
     32c:	a7 01       	movw	r20, r14
     32e:	b8 01       	movw	r22, r16
     330:	c4 01       	movw	r24, r8
     332:	0e 94 a0 00 	call	0x140	; 0x140 <getCoordinate>

	// Storing the coordinate as float in the temp variable for calculation
	// - Storing coordinate read from actuall NMEA message
	tempLatGPS = coorTranslate(pLatGPSOut, 'A');
     336:	61 e4       	ldi	r22, 0x41	; 65
     338:	c5 01       	movw	r24, r10
     33a:	0e 94 12 01 	call	0x224	; 0x224 <coorTranslate>
     33e:	4b 01       	movw	r8, r22
     340:	5c 01       	movw	r10, r24
	tempLongGPS = coorTranslate(pLongGPSOut, 'O');
     342:	6f e4       	ldi	r22, 0x4F	; 79
     344:	c3 01       	movw	r24, r6
     346:	0e 94 12 01 	call	0x224	; 0x224 <coorTranslate>
     34a:	69 83       	std	Y+1, r22	; 0x01
     34c:	7a 83       	std	Y+2, r23	; 0x02
     34e:	8b 83       	std	Y+3, r24	; 0x03
     350:	9c 83       	std	Y+4, r25	; 0x04

	// - Stroring the coordinate read from SD card
	tempLatSD = coorTranslate(pLatSDOut, 'A');
     352:	61 e4       	ldi	r22, 0x41	; 65
     354:	c8 01       	movw	r24, r16
     356:	0e 94 12 01 	call	0x224	; 0x224 <coorTranslate>
     35a:	6b 01       	movw	r12, r22
     35c:	7c 01       	movw	r14, r24
	tempLongSD = coorTranslate(pLongSDOut, 'O');
     35e:	6f e4       	ldi	r22, 0x4F	; 79
     360:	c2 01       	movw	r24, r4
     362:	0e 94 12 01 	call	0x224	; 0x224 <coorTranslate>
     366:	6d 83       	std	Y+5, r22	; 0x05
     368:	7e 83       	std	Y+6, r23	; 0x06
     36a:	8f 83       	std	Y+7, r24	; 0x07
     36c:	98 87       	std	Y+8, r25	; 0x08
	// Calculate the distance between two coordinate using the haversine formula
	/* Haversine Formula */

	double dLat, dLong;

	dLat = getRadians(tempLatSD - tempLatGPS);
     36e:	a5 01       	movw	r20, r10
     370:	94 01       	movw	r18, r8
     372:	c7 01       	movw	r24, r14
     374:	b6 01       	movw	r22, r12
     376:	0e 94 08 20 	call	0x4010	; 0x4010 <__subsf3>
     37a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getRadians>
     37e:	2b 01       	movw	r4, r22
     380:	3c 01       	movw	r6, r24
	dLong = getRadians(tempLongSD - tempLongGPS);
     382:	29 81       	ldd	r18, Y+1	; 0x01
     384:	3a 81       	ldd	r19, Y+2	; 0x02
     386:	4b 81       	ldd	r20, Y+3	; 0x03
     388:	5c 81       	ldd	r21, Y+4	; 0x04
     38a:	6d 81       	ldd	r22, Y+5	; 0x05
     38c:	7e 81       	ldd	r23, Y+6	; 0x06
     38e:	8f 81       	ldd	r24, Y+7	; 0x07
     390:	98 85       	ldd	r25, Y+8	; 0x08
     392:	0e 94 08 20 	call	0x4010	; 0x4010 <__subsf3>
     396:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getRadians>
     39a:	69 83       	std	Y+1, r22	; 0x01
     39c:	7a 83       	std	Y+2, r23	; 0x02
     39e:	8b 83       	std	Y+3, r24	; 0x03
     3a0:	9c 83       	std	Y+4, r25	; 0x04

	double latGPS = getRadians(tempLatGPS);
     3a2:	c5 01       	movw	r24, r10
     3a4:	b4 01       	movw	r22, r8
     3a6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getRadians>
     3aa:	4b 01       	movw	r8, r22
     3ac:	5c 01       	movw	r10, r24
	double latSD = getRadians(tempLatSD);
     3ae:	c7 01       	movw	r24, r14
     3b0:	b6 01       	movw	r22, r12
     3b2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getRadians>
     3b6:	6b 01       	movw	r12, r22
     3b8:	7c 01       	movw	r14, r24

	double a = (sin(dLat/2) * sin(dLat/2)) + (sin(dLong/2) * sin(dLong/2) * cos(latGPS) * cos(latSD));
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	5f e3       	ldi	r21, 0x3F	; 63
     3c2:	c3 01       	movw	r24, r6
     3c4:	b2 01       	movw	r22, r4
     3c6:	0e 94 ee 21 	call	0x43dc	; 0x43dc <__mulsf3>
     3ca:	0e 94 51 22 	call	0x44a2	; 0x44a2 <sin>
     3ce:	2b 01       	movw	r4, r22
     3d0:	3c 01       	movw	r6, r24
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	5f e3       	ldi	r21, 0x3F	; 63
     3da:	69 81       	ldd	r22, Y+1	; 0x01
     3dc:	7a 81       	ldd	r23, Y+2	; 0x02
     3de:	8b 81       	ldd	r24, Y+3	; 0x03
     3e0:	9c 81       	ldd	r25, Y+4	; 0x04
     3e2:	0e 94 ee 21 	call	0x43dc	; 0x43dc <__mulsf3>
     3e6:	0e 94 51 22 	call	0x44a2	; 0x44a2 <sin>
     3ea:	69 83       	std	Y+1, r22	; 0x01
     3ec:	7a 83       	std	Y+2, r23	; 0x02
     3ee:	8b 83       	std	Y+3, r24	; 0x03
     3f0:	9c 83       	std	Y+4, r25	; 0x04
     3f2:	c5 01       	movw	r24, r10
     3f4:	b4 01       	movw	r22, r8
     3f6:	0e 94 cf 20 	call	0x419e	; 0x419e <cos>
     3fa:	4b 01       	movw	r8, r22
     3fc:	5c 01       	movw	r10, r24
     3fe:	c7 01       	movw	r24, r14
     400:	b6 01       	movw	r22, r12
     402:	0e 94 cf 20 	call	0x419e	; 0x419e <cos>
     406:	6b 01       	movw	r12, r22
     408:	7c 01       	movw	r14, r24
     40a:	a3 01       	movw	r20, r6
     40c:	92 01       	movw	r18, r4
     40e:	c3 01       	movw	r24, r6
     410:	b2 01       	movw	r22, r4
     412:	0e 94 ee 21 	call	0x43dc	; 0x43dc <__mulsf3>
     416:	2b 01       	movw	r4, r22
     418:	3c 01       	movw	r6, r24
     41a:	29 81       	ldd	r18, Y+1	; 0x01
     41c:	3a 81       	ldd	r19, Y+2	; 0x02
     41e:	4b 81       	ldd	r20, Y+3	; 0x03
     420:	5c 81       	ldd	r21, Y+4	; 0x04
     422:	ca 01       	movw	r24, r20
     424:	b9 01       	movw	r22, r18
     426:	0e 94 ee 21 	call	0x43dc	; 0x43dc <__mulsf3>
     42a:	a5 01       	movw	r20, r10
     42c:	94 01       	movw	r18, r8
     42e:	0e 94 ee 21 	call	0x43dc	; 0x43dc <__mulsf3>
     432:	a7 01       	movw	r20, r14
     434:	96 01       	movw	r18, r12
     436:	0e 94 ee 21 	call	0x43dc	; 0x43dc <__mulsf3>
     43a:	9b 01       	movw	r18, r22
     43c:	ac 01       	movw	r20, r24
     43e:	c3 01       	movw	r24, r6
     440:	b2 01       	movw	r22, r4
     442:	0e 94 09 20 	call	0x4012	; 0x4012 <__addsf3>
     446:	a6 2e       	mov	r10, r22
     448:	b7 2e       	mov	r11, r23
     44a:	08 2f       	mov	r16, r24
     44c:	19 2f       	mov	r17, r25
	double c = 2 * atan2(sqrt(a), sqrt(1-a));
     44e:	76 2f       	mov	r23, r22
     450:	27 2f       	mov	r18, r23
     452:	3b 2d       	mov	r19, r11
     454:	40 2f       	mov	r20, r16
     456:	51 2f       	mov	r21, r17
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	80 e8       	ldi	r24, 0x80	; 128
     45e:	9f e3       	ldi	r25, 0x3F	; 63
     460:	0e 94 08 20 	call	0x4010	; 0x4010 <__subsf3>
     464:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <sqrt>
     468:	6b 01       	movw	r12, r22
     46a:	7c 01       	movw	r14, r24
     46c:	6a 2d       	mov	r22, r10
     46e:	7b 2d       	mov	r23, r11
     470:	80 2f       	mov	r24, r16
     472:	91 2f       	mov	r25, r17
     474:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <sqrt>
     478:	a7 01       	movw	r20, r14
     47a:	96 01       	movw	r18, r12
     47c:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <atan2>
     480:	9b 01       	movw	r18, r22
     482:	ac 01       	movw	r20, r24
     484:	0e 94 09 20 	call	0x4012	; 0x4012 <__addsf3>

	tempDist = RADIUS * c;
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	38 e1       	ldi	r19, 0x18	; 24
     48c:	47 ec       	ldi	r20, 0xC7	; 199
     48e:	55 e4       	ldi	r21, 0x45	; 69
     490:	0e 94 ee 21 	call	0x43dc	; 0x43dc <__mulsf3>

	/* ***************** */

	// Put the distace calculated double back to char array
	sprintf(pDistanceOut, "%.4f", tempDist);
     494:	9f 93       	push	r25
     496:	8f 93       	push	r24
     498:	7f 93       	push	r23
     49a:	6f 93       	push	r22
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	9f 93       	push	r25
     4a2:	8f 93       	push	r24
     4a4:	3f 92       	push	r3
     4a6:	2f 92       	push	r2
     4a8:	0e 94 01 23 	call	0x4602	; 0x4602 <sprintf>
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
}
     4b6:	28 96       	adiw	r28, 0x08	; 8
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	bf 90       	pop	r11
     4d4:	af 90       	pop	r10
     4d6:	9f 90       	pop	r9
     4d8:	8f 90       	pop	r8
     4da:	7f 90       	pop	r7
     4dc:	6f 90       	pop	r6
     4de:	5f 90       	pop	r5
     4e0:	4f 90       	pop	r4
     4e2:	3f 90       	pop	r3
     4e4:	2f 90       	pop	r2
     4e6:	08 95       	ret

000004e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
     4f0:	42 30       	cpi	r20, 0x02	; 2
     4f2:	51 05       	cpc	r21, r1
     4f4:	c0 f0       	brcs	.+48     	; 0x526 <mem_cpy+0x3e>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
     4f6:	db 01       	movw	r26, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     4f8:	ec 01       	movw	r28, r24
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
     4fa:	9a 01       	movw	r18, r20
		*(int*)d = *(int*)s;
     4fc:	0d 91       	ld	r16, X+
     4fe:	1d 91       	ld	r17, X+
     500:	09 93       	st	Y+, r16
     502:	19 93       	st	Y+, r17
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
     504:	22 50       	subi	r18, 0x02	; 2
     506:	31 09       	sbc	r19, r1
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
     508:	22 30       	cpi	r18, 0x02	; 2
     50a:	31 05       	cpc	r19, r1
     50c:	b8 f7       	brcc	.-18     	; 0x4fc <mem_cpy+0x14>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
     50e:	da 01       	movw	r26, r20
     510:	12 97       	sbiw	r26, 0x02	; 2
     512:	ae 7f       	andi	r26, 0xFE	; 254
     514:	12 96       	adiw	r26, 0x02	; 2
     516:	fc 01       	movw	r30, r24
     518:	ea 0f       	add	r30, r26
     51a:	fb 1f       	adc	r31, r27
     51c:	a6 0f       	add	r26, r22
     51e:	b7 1f       	adc	r27, r23
     520:	41 70       	andi	r20, 0x01	; 1
     522:	55 27       	eor	r21, r21
     524:	02 c0       	rjmp	.+4      	; 0x52a <mem_cpy+0x42>
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
     526:	db 01       	movw	r26, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     528:	fc 01       	movw	r30, r24
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     52a:	41 15       	cp	r20, r1
     52c:	51 05       	cpc	r21, r1
     52e:	39 f0       	breq	.+14     	; 0x53e <mem_cpy+0x56>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
     530:	4e 0f       	add	r20, r30
     532:	5f 1f       	adc	r21, r31
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
     534:	8d 91       	ld	r24, X+
     536:	81 93       	st	Z+, r24
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     538:	e4 17       	cp	r30, r20
     53a:	f5 07       	cpc	r31, r21
     53c:	d9 f7       	brne	.-10     	; 0x534 <mem_cpy+0x4c>
		*d++ = *s++;
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     548:	41 15       	cp	r20, r1
     54a:	51 05       	cpc	r21, r1
     54c:	39 f0       	breq	.+14     	; 0x55c <mem_set+0x14>
		*d++ = *s++;
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
     54e:	48 0f       	add	r20, r24
     550:	59 1f       	adc	r21, r25
	BYTE *d = (BYTE*)dst;
     552:	fc 01       	movw	r30, r24

	while (cnt--)
		*d++ = (BYTE)val;
     554:	61 93       	st	Z+, r22
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     556:	e4 17       	cp	r30, r20
     558:	f5 07       	cpc	r31, r21
     55a:	e1 f7       	brne	.-8      	; 0x554 <mem_set+0xc>
     55c:	08 95       	ret

0000055e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
     562:	fb 01       	movw	r30, r22
     564:	02 8d       	ldd	r16, Z+26	; 0x1a
     566:	13 8d       	ldd	r17, Z+27	; 0x1b
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
     56c:	fc 01       	movw	r30, r24
     56e:	80 81       	ld	r24, Z
     570:	83 30       	cpi	r24, 0x03	; 3
     572:	61 f4       	brne	.+24     	; 0x58c <ld_clust+0x2e>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
     574:	fb 01       	movw	r30, r22
     576:	84 89       	ldd	r24, Z+20	; 0x14
     578:	95 89       	ldd	r25, Z+21	; 0x15
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	dc 01       	movw	r26, r24
     580:	99 27       	eor	r25, r25
     582:	88 27       	eor	r24, r24
     584:	08 2b       	or	r16, r24
     586:	19 2b       	or	r17, r25
     588:	2a 2b       	or	r18, r26
     58a:	3b 2b       	or	r19, r27

	return cl;
}
     58c:	60 2f       	mov	r22, r16
     58e:	71 2f       	mov	r23, r17
     590:	82 2f       	mov	r24, r18
     592:	93 2f       	mov	r25, r19
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	08 95       	ret

0000059a <st_clust>:
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
     59a:	fc 01       	movw	r30, r24
     59c:	53 8f       	std	Z+27, r21	; 0x1b
     59e:	42 8f       	std	Z+26, r20	; 0x1a
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
     5a0:	75 8b       	std	Z+21, r23	; 0x15
     5a2:	64 8b       	std	Z+20, r22	; 0x14
     5a4:	08 95       	ret

000005a6 <get_ldnumber>:
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;


	if (*path) {	/* If the pointer is not a null */
     5a6:	fc 01       	movw	r30, r24
     5a8:	a0 81       	ld	r26, Z
     5aa:	b1 81       	ldd	r27, Z+1	; 0x01
     5ac:	10 97       	sbiw	r26, 0x00	; 0
     5ae:	31 f1       	breq	.+76     	; 0x5fc <get_ldnumber+0x56>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     5b0:	4c 91       	ld	r20, X
     5b2:	41 32       	cpi	r20, 0x21	; 33
     5b4:	58 f0       	brcs	.+22     	; 0x5cc <get_ldnumber+0x26>
     5b6:	4a 33       	cpi	r20, 0x3A	; 58
     5b8:	91 f1       	breq	.+100    	; 0x61e <get_ldnumber+0x78>
/*-----------------------------------------------------------------------*/
/* Get logical drive number from path name                               */
/*-----------------------------------------------------------------------*/

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
     5ba:	fd 01       	movw	r30, r26
     5bc:	31 96       	adiw	r30, 0x01	; 1
	UINT i;
	int vol = -1;


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     5be:	9f 01       	movw	r18, r30
     5c0:	51 91       	ld	r21, Z+
     5c2:	51 32       	cpi	r21, 0x21	; 33
     5c4:	28 f0       	brcs	.+10     	; 0x5d0 <get_ldnumber+0x2a>
     5c6:	5a 33       	cpi	r21, 0x3A	; 58
     5c8:	d1 f7       	brne	.-12     	; 0x5be <get_ldnumber+0x18>
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <get_ldnumber+0x2e>
     5cc:	54 2f       	mov	r21, r20
     5ce:	9d 01       	movw	r18, r26
		if (*tt == ':') {	/* If a ':' is exist in the path name */
     5d0:	5a 33       	cpi	r21, 0x3A	; 58
     5d2:	b9 f4       	brne	.+46     	; 0x602 <get_ldnumber+0x5c>
			tp = *path;
			i = *tp++ - '0'; 
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	40 53       	subi	r20, 0x30	; 48
     5d8:	51 09       	sbc	r21, r1
     5da:	fa 01       	movw	r30, r20
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     5dc:	4a 30       	cpi	r20, 0x0A	; 10
     5de:	51 05       	cpc	r21, r1
     5e0:	98 f4       	brcc	.+38     	; 0x608 <get_ldnumber+0x62>

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
     5e2:	bd 01       	movw	r22, r26
     5e4:	6f 5f       	subi	r22, 0xFF	; 255
     5e6:	7f 4f       	sbci	r23, 0xFF	; 255
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     5e8:	26 17       	cp	r18, r22
     5ea:	37 07       	cpc	r19, r23
     5ec:	81 f4       	brne	.+32     	; 0x60e <get_ldnumber+0x68>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
     5ee:	ef 2b       	or	r30, r31
     5f0:	89 f4       	brne	.+34     	; 0x614 <get_ldnumber+0x6e>
					vol = (int)i;
					*path = ++tt;
     5f2:	12 96       	adiw	r26, 0x02	; 2
     5f4:	fc 01       	movw	r30, r24
     5f6:	b1 83       	std	Z+1, r27	; 0x01
     5f8:	a0 83       	st	Z, r26
     5fa:	0e c0       	rjmp	.+28     	; 0x618 <get_ldnumber+0x72>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
     5fc:	4f ef       	ldi	r20, 0xFF	; 255
     5fe:	5f ef       	ldi	r21, 0xFF	; 255
     600:	0b c0       	rjmp	.+22     	; 0x618 <get_ldnumber+0x72>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	08 c0       	rjmp	.+16     	; 0x618 <get_ldnumber+0x72>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
     608:	4f ef       	ldi	r20, 0xFF	; 255
     60a:	5f ef       	ldi	r21, 0xFF	; 255
     60c:	05 c0       	rjmp	.+10     	; 0x618 <get_ldnumber+0x72>
     60e:	4f ef       	ldi	r20, 0xFF	; 255
     610:	5f ef       	ldi	r21, 0xFF	; 255
     612:	02 c0       	rjmp	.+4      	; 0x618 <get_ldnumber+0x72>
     614:	4f ef       	ldi	r20, 0xFF	; 255
     616:	5f ef       	ldi	r21, 0xFF	; 255
     618:	84 2f       	mov	r24, r20
     61a:	95 2f       	mov	r25, r21
     61c:	08 95       	ret


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     61e:	9d 01       	movw	r18, r26
     620:	d9 cf       	rjmp	.-78     	; 0x5d4 <get_ldnumber+0x2e>

00000622 <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
     622:	00 97       	sbiw	r24, 0x00	; 0
     624:	c9 f0       	breq	.+50     	; 0x658 <validate+0x36>
     626:	dc 01       	movw	r26, r24
     628:	ed 91       	ld	r30, X+
     62a:	fc 91       	ld	r31, X
     62c:	11 97       	sbiw	r26, 0x01	; 1
     62e:	30 97       	sbiw	r30, 0x00	; 0
     630:	a9 f0       	breq	.+42     	; 0x65c <validate+0x3a>
     632:	20 81       	ld	r18, Z
     634:	22 23       	and	r18, r18
     636:	a1 f0       	breq	.+40     	; 0x660 <validate+0x3e>
     638:	26 81       	ldd	r18, Z+6	; 0x06
     63a:	37 81       	ldd	r19, Z+7	; 0x07
     63c:	12 96       	adiw	r26, 0x02	; 2
     63e:	8d 91       	ld	r24, X+
     640:	9c 91       	ld	r25, X
     642:	13 97       	sbiw	r26, 0x03	; 3
     644:	28 17       	cp	r18, r24
     646:	39 07       	cpc	r19, r25
     648:	69 f4       	brne	.+26     	; 0x664 <validate+0x42>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
     64a:	81 81       	ldd	r24, Z+1	; 0x01
     64c:	0e 94 bf 1a 	call	0x357e	; 0x357e <disk_status>
     650:	80 ff       	sbrs	r24, 0
     652:	0a c0       	rjmp	.+20     	; 0x668 <validate+0x46>
		return FR_NOT_READY;
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	08 95       	ret
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
     658:	89 e0       	ldi	r24, 0x09	; 9
     65a:	08 95       	ret
     65c:	89 e0       	ldi	r24, 0x09	; 9
     65e:	08 95       	ret
     660:	89 e0       	ldi	r24, 0x09	; 9
     662:	08 95       	ret
     664:	89 e0       	ldi	r24, 0x09	; 9
     666:	08 95       	ret
	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
     668:	80 e0       	ldi	r24, 0x00	; 0
}
     66a:	08 95       	ret

0000066c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
     66c:	8f 92       	push	r8
     66e:	9f 92       	push	r9
     670:	af 92       	push	r10
     672:	bf 92       	push	r11
     674:	cf 92       	push	r12
     676:	df 92       	push	r13
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ec 01       	movw	r28, r24
	DWORD wsect;
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
     686:	8c 81       	ldd	r24, Y+4	; 0x04
     688:	88 23       	and	r24, r24
     68a:	09 f4       	brne	.+2      	; 0x68e <sync_window+0x22>
     68c:	45 c0       	rjmp	.+138    	; 0x718 <sync_window+0xac>
		wsect = fs->winsect;	/* Current sector number */
     68e:	ca a4       	ldd	r12, Y+42	; 0x2a
     690:	db a4       	ldd	r13, Y+43	; 0x2b
     692:	ec a4       	ldd	r14, Y+44	; 0x2c
     694:	fd a4       	ldd	r15, Y+45	; 0x2d
		if (disk_write(fs->drv, fs->win, wsect, 1))
     696:	5e 01       	movw	r10, r28
     698:	8e e2       	ldi	r24, 0x2E	; 46
     69a:	a8 0e       	add	r10, r24
     69c:	b1 1c       	adc	r11, r1
     69e:	01 e0       	ldi	r16, 0x01	; 1
     6a0:	10 e0       	ldi	r17, 0x00	; 0
     6a2:	a7 01       	movw	r20, r14
     6a4:	96 01       	movw	r18, r12
     6a6:	b5 01       	movw	r22, r10
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <disk_write>
     6ae:	81 11       	cpse	r24, r1
     6b0:	35 c0       	rjmp	.+106    	; 0x71c <sync_window+0xb0>
			return FR_DISK_ERR;
		fs->wflag = 0;
     6b2:	1c 82       	std	Y+4, r1	; 0x04
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
     6b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6b8:	a8 a1       	ldd	r26, Y+32	; 0x20
     6ba:	b9 a1       	ldd	r27, Y+33	; 0x21
     6bc:	b7 01       	movw	r22, r14
     6be:	a6 01       	movw	r20, r12
     6c0:	48 1b       	sub	r20, r24
     6c2:	59 0b       	sbc	r21, r25
     6c4:	6a 0b       	sbc	r22, r26
     6c6:	7b 0b       	sbc	r23, r27
     6c8:	8e 89       	ldd	r24, Y+22	; 0x16
     6ca:	9f 89       	ldd	r25, Y+23	; 0x17
     6cc:	a8 8d       	ldd	r26, Y+24	; 0x18
     6ce:	b9 8d       	ldd	r27, Y+25	; 0x19
     6d0:	48 17       	cp	r20, r24
     6d2:	59 07       	cpc	r21, r25
     6d4:	6a 07       	cpc	r22, r26
     6d6:	7b 07       	cpc	r23, r27
     6d8:	18 f5       	brcc	.+70     	; 0x720 <sync_window+0xb4>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     6da:	8b 80       	ldd	r8, Y+3	; 0x03
     6dc:	91 2c       	mov	r9, r1
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	88 16       	cp	r8, r24
     6e2:	91 04       	cpc	r9, r1
     6e4:	f8 f0       	brcs	.+62     	; 0x724 <sync_window+0xb8>
				wsect += fs->fsize;
     6e6:	8e 89       	ldd	r24, Y+22	; 0x16
     6e8:	9f 89       	ldd	r25, Y+23	; 0x17
     6ea:	a8 8d       	ldd	r26, Y+24	; 0x18
     6ec:	b9 8d       	ldd	r27, Y+25	; 0x19
     6ee:	c8 0e       	add	r12, r24
     6f0:	d9 1e       	adc	r13, r25
     6f2:	ea 1e       	adc	r14, r26
     6f4:	fb 1e       	adc	r15, r27
				disk_write(fs->drv, fs->win, wsect, 1);
     6f6:	01 e0       	ldi	r16, 0x01	; 1
     6f8:	10 e0       	ldi	r17, 0x00	; 0
     6fa:	a7 01       	movw	r20, r14
     6fc:	96 01       	movw	r18, r12
     6fe:	b5 01       	movw	r22, r10
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <disk_write>
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1))
			return FR_DISK_ERR;
		fs->wflag = 0;
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	88 1a       	sub	r8, r24
     70a:	91 08       	sbc	r9, r1
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	88 16       	cp	r8, r24
     710:	91 04       	cpc	r9, r1
     712:	49 f7       	brne	.-46     	; 0x6e6 <sync_window+0x7a>
				wsect += fs->fsize;
				disk_write(fs->drv, fs->win, wsect, 1);
			}
		}
	}
	return FR_OK;
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	07 c0       	rjmp	.+14     	; 0x726 <sync_window+0xba>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	05 c0       	rjmp	.+10     	; 0x726 <sync_window+0xba>


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1))
			return FR_DISK_ERR;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	03 c0       	rjmp	.+6      	; 0x726 <sync_window+0xba>
				wsect += fs->fsize;
				disk_write(fs->drv, fs->win, wsect, 1);
			}
		}
	}
	return FR_OK;
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	01 c0       	rjmp	.+2      	; 0x726 <sync_window+0xba>
     724:	80 e0       	ldi	r24, 0x00	; 0
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	bf 90       	pop	r11
     738:	af 90       	pop	r10
     73a:	9f 90       	pop	r9
     73c:	8f 90       	pop	r8
     73e:	08 95       	ret

00000740 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	ec 01       	movw	r28, r24
     752:	6a 01       	movw	r12, r20
     754:	7b 01       	movw	r14, r22
	if (sector != fs->winsect) {	/* Changed current window */
     756:	8a a5       	ldd	r24, Y+42	; 0x2a
     758:	9b a5       	ldd	r25, Y+43	; 0x2b
     75a:	ac a5       	ldd	r26, Y+44	; 0x2c
     75c:	bd a5       	ldd	r27, Y+45	; 0x2d
     75e:	84 17       	cp	r24, r20
     760:	95 07       	cpc	r25, r21
     762:	a6 07       	cpc	r26, r22
     764:	b7 07       	cpc	r27, r23
     766:	b1 f0       	breq	.+44     	; 0x794 <move_window+0x54>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
     768:	ce 01       	movw	r24, r28
     76a:	0e 94 36 03 	call	0x66c	; 0x66c <sync_window>
     76e:	81 11       	cpse	r24, r1
     770:	13 c0       	rjmp	.+38     	; 0x798 <move_window+0x58>
			return FR_DISK_ERR;
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
     772:	be 01       	movw	r22, r28
     774:	62 5d       	subi	r22, 0xD2	; 210
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	01 e0       	ldi	r16, 0x01	; 1
     77a:	10 e0       	ldi	r17, 0x00	; 0
     77c:	a7 01       	movw	r20, r14
     77e:	96 01       	movw	r18, r12
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	0e 94 8c 1b 	call	0x3718	; 0x3718 <disk_read>
     786:	81 11       	cpse	r24, r1
     788:	09 c0       	rjmp	.+18     	; 0x79c <move_window+0x5c>
			return FR_DISK_ERR;
		fs->winsect = sector;
     78a:	ca a6       	std	Y+42, r12	; 0x2a
     78c:	db a6       	std	Y+43, r13	; 0x2b
     78e:	ec a6       	std	Y+44, r14	; 0x2c
     790:	fd a6       	std	Y+45, r15	; 0x2d
     792:	05 c0       	rjmp	.+10     	; 0x79e <move_window+0x5e>
	}

	return FR_OK;
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	03 c0       	rjmp	.+6      	; 0x79e <move_window+0x5e>
)
{
	if (sector != fs->winsect) {	/* Changed current window */
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
			return FR_DISK_ERR;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	01 c0       	rjmp	.+2      	; 0x79e <move_window+0x5e>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
			return FR_DISK_ERR;
     79c:	81 e0       	ldi	r24, 0x01	; 1
		fs->winsect = sector;
	}

	return FR_OK;
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	cf 90       	pop	r12
     7ae:	08 95       	ret

000007b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
     7ba:	1c 82       	std	Y+4, r1	; 0x04
     7bc:	0f ef       	ldi	r16, 0xFF	; 255
     7be:	1f ef       	ldi	r17, 0xFF	; 255
     7c0:	98 01       	movw	r18, r16
     7c2:	0a a7       	std	Y+42, r16	; 0x2a
     7c4:	1b a7       	std	Y+43, r17	; 0x2b
     7c6:	2c a7       	std	Y+44, r18	; 0x2c
     7c8:	3d a7       	std	Y+45, r19	; 0x2d
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
     7ca:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
     7ce:	81 11       	cpse	r24, r1
     7d0:	24 c0       	rjmp	.+72     	; 0x81a <check_fs+0x6a>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
     7d2:	fe 01       	movw	r30, r28
     7d4:	e4 5d       	subi	r30, 0xD4	; 212
     7d6:	fd 4f       	sbci	r31, 0xFD	; 253
     7d8:	80 81       	ld	r24, Z
     7da:	91 81       	ldd	r25, Z+1	; 0x01
     7dc:	85 35       	cpi	r24, 0x55	; 85
     7de:	9a 4a       	sbci	r25, 0xAA	; 170
     7e0:	f1 f4       	brne	.+60     	; 0x81e <check_fs+0x6e>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
     7e2:	fe 01       	movw	r30, r28
     7e4:	ec 59       	subi	r30, 0x9C	; 156
     7e6:	ff 4f       	sbci	r31, 0xFF	; 255
     7e8:	80 81       	ld	r24, Z
     7ea:	91 81       	ldd	r25, Z+1	; 0x01
     7ec:	a2 81       	ldd	r26, Z+2	; 0x02
     7ee:	b3 81       	ldd	r27, Z+3	; 0x03
     7f0:	bb 27       	eor	r27, r27
     7f2:	86 34       	cpi	r24, 0x46	; 70
     7f4:	91 44       	sbci	r25, 0x41	; 65
     7f6:	a4 45       	sbci	r26, 0x54	; 84
     7f8:	b1 05       	cpc	r27, r1
     7fa:	99 f0       	breq	.+38     	; 0x822 <check_fs+0x72>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     7fc:	c0 58       	subi	r28, 0x80	; 128
     7fe:	df 4f       	sbci	r29, 0xFF	; 255
     800:	48 81       	ld	r20, Y
     802:	59 81       	ldd	r21, Y+1	; 0x01
     804:	6a 81       	ldd	r22, Y+2	; 0x02
     806:	7b 81       	ldd	r23, Y+3	; 0x03
     808:	77 27       	eor	r23, r23
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	46 34       	cpi	r20, 0x46	; 70
     80e:	51 44       	sbci	r21, 0x41	; 65
     810:	64 45       	sbci	r22, 0x54	; 84
     812:	71 05       	cpc	r23, r1
     814:	39 f4       	brne	.+14     	; 0x824 <check_fs+0x74>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	05 c0       	rjmp	.+10     	; 0x824 <check_fs+0x74>
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	03 c0       	rjmp	.+6      	; 0x824 <check_fs+0x74>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	01 c0       	rjmp	.+2      	; 0x824 <check_fs+0x74>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
		return 0;
     822:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	08 95       	ret

0000082e <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
     82e:	2f 92       	push	r2
     830:	3f 92       	push	r3
     832:	4f 92       	push	r4
     834:	5f 92       	push	r5
     836:	6f 92       	push	r6
     838:	7f 92       	push	r7
     83a:	8f 92       	push	r8
     83c:	9f 92       	push	r9
     83e:	af 92       	push	r10
     840:	bf 92       	push	r11
     842:	cf 92       	push	r12
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	6d 97       	sbiw	r28, 0x1d	; 29
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
     862:	6c 01       	movw	r12, r24
     864:	cb 01       	movw	r24, r22
     866:	b4 2e       	mov	r11, r20
	WORD nrsv;
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
     868:	d6 01       	movw	r26, r12
     86a:	1d 92       	st	X+, r1
     86c:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
     86e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <get_ldnumber>
     872:	7c 01       	movw	r14, r24
	if (vol < 0) return FR_INVALID_DRIVE;
     874:	99 23       	and	r25, r25
     876:	0c f4       	brge	.+2      	; 0x87a <find_volume+0x4c>
     878:	31 c2       	rjmp	.+1122   	; 0xcdc <__stack+0x3dd>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
     87a:	fc 01       	movw	r30, r24
     87c:	ee 0f       	add	r30, r30
     87e:	ff 1f       	adc	r31, r31
     880:	e8 58       	subi	r30, 0x88	; 136
     882:	fd 4f       	sbci	r31, 0xFD	; 253
     884:	00 81       	ld	r16, Z
     886:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     888:	01 15       	cp	r16, r1
     88a:	11 05       	cpc	r17, r1
     88c:	09 f4       	brne	.+2      	; 0x890 <find_volume+0x62>
     88e:	28 c2       	rjmp	.+1104   	; 0xce0 <__stack+0x3e1>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
     890:	f6 01       	movw	r30, r12
     892:	11 83       	std	Z+1, r17	; 0x01
     894:	00 83       	st	Z, r16

	if (fs->fs_type) {					/* If the volume has been mounted */
     896:	d8 01       	movw	r26, r16
     898:	8c 91       	ld	r24, X
     89a:	88 23       	and	r24, r24
     89c:	69 f0       	breq	.+26     	; 0x8b8 <find_volume+0x8a>
		stat = disk_status(fs->drv);
     89e:	11 96       	adiw	r26, 0x01	; 1
     8a0:	8c 91       	ld	r24, X
     8a2:	0e 94 bf 1a 	call	0x357e	; 0x357e <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
     8a6:	80 fd       	sbrc	r24, 0
     8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
     8aa:	bb 20       	and	r11, r11
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <find_volume+0x82>
     8ae:	1a c2       	rjmp	.+1076   	; 0xce4 <__stack+0x3e5>
     8b0:	82 fd       	sbrc	r24, 2
     8b2:	1a c2       	rjmp	.+1076   	; 0xce8 <__stack+0x3e9>
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	68 c2       	rjmp	.+1232   	; 0xd88 <__stack+0x489>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     8b8:	f8 01       	movw	r30, r16
     8ba:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
     8bc:	e1 82       	std	Z+1, r14	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     8be:	8e 2d       	mov	r24, r14
     8c0:	0e 94 c6 1a 	call	0x358c	; 0x358c <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     8c4:	80 fd       	sbrc	r24, 0
     8c6:	12 c2       	rjmp	.+1060   	; 0xcec <__stack+0x3ed>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     8c8:	bb 20       	and	r11, r11
     8ca:	11 f0       	breq	.+4      	; 0x8d0 <find_volume+0xa2>
     8cc:	82 fd       	sbrc	r24, 2
     8ce:	10 c2       	rjmp	.+1056   	; 0xcf0 <__stack+0x3f1>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	ba 01       	movw	r22, r20
     8d6:	c8 01       	movw	r24, r16
     8d8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	09 f0       	breq	.+2      	; 0x8e2 <find_volume+0xb4>
     8e0:	46 c0       	rjmp	.+140    	; 0x96e <__stack+0x6f>
     8e2:	ee 24       	eor	r14, r14
     8e4:	e3 94       	inc	r14
     8e6:	f1 2c       	mov	r15, r1
     8e8:	ec 0e       	add	r14, r28
     8ea:	fd 1e       	adc	r15, r29
     8ec:	f7 01       	movw	r30, r14
     8ee:	2e eb       	ldi	r18, 0xBE	; 190
     8f0:	31 e0       	ldi	r19, 0x01	; 1
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	ba 01       	movw	r22, r20
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
     8f8:	d9 01       	movw	r26, r18
     8fa:	9e 96       	adiw	r26, 0x2e	; 46
     8fc:	a0 0f       	add	r26, r16
     8fe:	b1 1f       	adc	r27, r17
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     900:	14 96       	adiw	r26, 0x04	; 4
     902:	8c 91       	ld	r24, X
     904:	14 97       	sbiw	r26, 0x04	; 4
     906:	88 23       	and	r24, r24
     908:	39 f0       	breq	.+14     	; 0x918 <__stack+0x19>
     90a:	18 96       	adiw	r26, 0x08	; 8
     90c:	8d 91       	ld	r24, X+
     90e:	9d 91       	ld	r25, X+
     910:	0d 90       	ld	r0, X+
     912:	bc 91       	ld	r27, X
     914:	a0 2d       	mov	r26, r0
     916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0x1d>
     918:	db 01       	movw	r26, r22
     91a:	ca 01       	movw	r24, r20
     91c:	81 93       	st	Z+, r24
     91e:	91 93       	st	Z+, r25
     920:	a1 93       	st	Z+, r26
     922:	b1 93       	st	Z+, r27
     924:	20 5f       	subi	r18, 0xF0	; 240
     926:	3f 4f       	sbci	r19, 0xFF	; 255
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
     928:	2e 3f       	cpi	r18, 0xFE	; 254
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	38 07       	cpc	r19, r24
     92e:	21 f7       	brne	.-56     	; 0x8f8 <find_volume+0xca>
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     930:	6e 01       	movw	r12, r28
     932:	91 e1       	ldi	r25, 0x11	; 17
     934:	c9 0e       	add	r12, r25
     936:	d1 1c       	adc	r13, r1
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     938:	68 94       	set
     93a:	bb 24       	eor	r11, r11
     93c:	b1 f8       	bld	r11, 1
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
     93e:	d7 01       	movw	r26, r14
     940:	4d 90       	ld	r4, X+
     942:	5d 90       	ld	r5, X+
     944:	6d 90       	ld	r6, X+
     946:	7d 90       	ld	r7, X+
     948:	7d 01       	movw	r14, r26
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     94a:	41 14       	cp	r4, r1
     94c:	51 04       	cpc	r5, r1
     94e:	61 04       	cpc	r6, r1
     950:	71 04       	cpc	r7, r1
     952:	41 f0       	breq	.+16     	; 0x964 <__stack+0x65>
     954:	b3 01       	movw	r22, r6
     956:	a2 01       	movw	r20, r4
     958:	c8 01       	movw	r24, r16
     95a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
     95e:	81 11       	cpse	r24, r1
     960:	02 c0       	rjmp	.+4      	; 0x966 <__stack+0x67>
     962:	08 c0       	rjmp	.+16     	; 0x974 <__stack+0x75>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     964:	8b 2d       	mov	r24, r11
		} while (!LD2PT(vol) && fmt && ++i < 4);
     966:	ec 14       	cp	r14, r12
     968:	fd 04       	cpc	r15, r13
     96a:	49 f7       	brne	.-46     	; 0x93e <__stack+0x3f>
     96c:	03 c0       	rjmp	.+6      	; 0x974 <__stack+0x75>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
     96e:	41 2c       	mov	r4, r1
     970:	51 2c       	mov	r5, r1
     972:	32 01       	movw	r6, r4
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     974:	83 30       	cpi	r24, 0x03	; 3
     976:	09 f4       	brne	.+2      	; 0x97a <__stack+0x7b>
     978:	bd c1       	rjmp	.+890    	; 0xcf4 <__stack+0x3f5>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     97a:	81 11       	cpse	r24, r1
     97c:	bd c1       	rjmp	.+890    	; 0xcf8 <__stack+0x3f9>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     97e:	f8 01       	movw	r30, r16
     980:	81 ad       	ldd	r24, Z+57	; 0x39
     982:	92 ad       	ldd	r25, Z+58	; 0x3a
     984:	81 15       	cp	r24, r1
     986:	92 40       	sbci	r25, 0x02	; 2
     988:	09 f0       	breq	.+2      	; 0x98c <__stack+0x8d>
     98a:	b8 c1       	rjmp	.+880    	; 0xcfc <__stack+0x3fd>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
     98c:	f8 01       	movw	r30, r16
     98e:	ec 5b       	subi	r30, 0xBC	; 188
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	c0 80       	ld	r12, Z
     994:	d1 80       	ldd	r13, Z+1	; 0x01
     996:	e1 2c       	mov	r14, r1
     998:	f1 2c       	mov	r15, r1
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
     99a:	c1 14       	cp	r12, r1
     99c:	d1 04       	cpc	r13, r1
     99e:	e1 04       	cpc	r14, r1
     9a0:	f1 04       	cpc	r15, r1
     9a2:	39 f4       	brne	.+14     	; 0x9b2 <__stack+0xb3>
     9a4:	f8 01       	movw	r30, r16
     9a6:	ee 5a       	subi	r30, 0xAE	; 174
     9a8:	ff 4f       	sbci	r31, 0xFF	; 255
     9aa:	c0 80       	ld	r12, Z
     9ac:	d1 80       	ldd	r13, Z+1	; 0x01
     9ae:	e2 80       	ldd	r14, Z+2	; 0x02
     9b0:	f3 80       	ldd	r15, Z+3	; 0x03
	fs->fsize = fasize;
     9b2:	d8 01       	movw	r26, r16
     9b4:	56 96       	adiw	r26, 0x16	; 22
     9b6:	cd 92       	st	X+, r12
     9b8:	dd 92       	st	X+, r13
     9ba:	ed 92       	st	X+, r14
     9bc:	fc 92       	st	X, r15
     9be:	59 97       	sbiw	r26, 0x19	; 25

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
     9c0:	de 96       	adiw	r26, 0x3e	; 62
     9c2:	ac 91       	ld	r26, X
     9c4:	f8 01       	movw	r30, r16
     9c6:	a3 83       	std	Z+3, r26	; 0x03
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
     9c8:	8a 2f       	mov	r24, r26
     9ca:	81 50       	subi	r24, 0x01	; 1
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	08 f0       	brcs	.+2      	; 0x9d2 <__stack+0xd3>
     9d0:	97 c1       	rjmp	.+814    	; 0xd00 <__stack+0x401>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
     9d2:	f3 ad       	ldd	r31, Z+59	; 0x3b
     9d4:	f9 8b       	std	Y+17, r31	; 0x11
     9d6:	2f 2f       	mov	r18, r31
     9d8:	f8 01       	movw	r30, r16
     9da:	22 83       	std	Z+2, r18	; 0x02
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
     9dc:	22 23       	and	r18, r18
     9de:	09 f4       	brne	.+2      	; 0x9e2 <__stack+0xe3>
     9e0:	91 c1       	rjmp	.+802    	; 0xd04 <__stack+0x405>
     9e2:	82 2f       	mov	r24, r18
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	9c 01       	movw	r18, r24
     9e8:	21 50       	subi	r18, 0x01	; 1
     9ea:	31 09       	sbc	r19, r1
     9ec:	82 23       	and	r24, r18
     9ee:	93 23       	and	r25, r19
     9f0:	89 2b       	or	r24, r25
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <__stack+0xf7>
     9f4:	89 c1       	rjmp	.+786    	; 0xd08 <__stack+0x409>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
     9f6:	ff 96       	adiw	r30, 0x3f	; 63
     9f8:	20 80       	ld	r2, Z
     9fa:	31 80       	ldd	r3, Z+1	; 0x01
     9fc:	f8 01       	movw	r30, r16
     9fe:	31 86       	std	Z+9, r3	; 0x09
     a00:	20 86       	std	Z+8, r2	; 0x08
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
     a02:	c1 01       	movw	r24, r2
     a04:	8f 70       	andi	r24, 0x0F	; 15
     a06:	99 27       	eor	r25, r25
     a08:	89 2b       	or	r24, r25
     a0a:	09 f0       	breq	.+2      	; 0xa0e <__stack+0x10f>
     a0c:	7f c1       	rjmp	.+766    	; 0xd0c <__stack+0x40d>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
     a0e:	ef 5b       	subi	r30, 0xBF	; 191
     a10:	ff 4f       	sbci	r31, 0xFF	; 255
     a12:	80 80       	ld	r8, Z
     a14:	91 80       	ldd	r9, Z+1	; 0x01
     a16:	a1 2c       	mov	r10, r1
     a18:	b1 2c       	mov	r11, r1
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
     a1a:	81 14       	cp	r8, r1
     a1c:	91 04       	cpc	r9, r1
     a1e:	a1 04       	cpc	r10, r1
     a20:	b1 04       	cpc	r11, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__stack+0x133>
     a24:	f8 01       	movw	r30, r16
     a26:	e2 5b       	subi	r30, 0xB2	; 178
     a28:	ff 4f       	sbci	r31, 0xFF	; 255
     a2a:	80 80       	ld	r8, Z
     a2c:	91 80       	ldd	r9, Z+1	; 0x01
     a2e:	a2 80       	ldd	r10, Z+2	; 0x02
     a30:	b3 80       	ldd	r11, Z+3	; 0x03

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
     a32:	f8 01       	movw	r30, r16
     a34:	04 ac       	ldd	r0, Z+60	; 0x3c
     a36:	f5 ad       	ldd	r31, Z+61	; 0x3d
     a38:	e0 2d       	mov	r30, r0
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
     a3a:	30 97       	sbiw	r30, 0x00	; 0
     a3c:	09 f4       	brne	.+2      	; 0xa40 <__stack+0x141>
     a3e:	68 c1       	rjmp	.+720    	; 0xd10 <__stack+0x411>
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	a7 01       	movw	r20, r14
     a44:	96 01       	movw	r18, r12
     a46:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__muluhisi3>
     a4a:	6a 8f       	std	Y+26, r22	; 0x1a
     a4c:	7b 8f       	std	Y+27, r23	; 0x1b
     a4e:	8c 8f       	std	Y+28, r24	; 0x1c
     a50:	9d 8f       	std	Y+29, r25	; 0x1d

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
     a52:	9f 01       	movw	r18, r30
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	2e 8b       	std	Y+22, r18	; 0x16
     a5a:	3f 8b       	std	Y+23, r19	; 0x17
     a5c:	48 8f       	std	Y+24, r20	; 0x18
     a5e:	59 8f       	std	Y+25, r21	; 0x19
     a60:	c1 01       	movw	r24, r2
     a62:	92 95       	swap	r25
     a64:	82 95       	swap	r24
     a66:	8f 70       	andi	r24, 0x0F	; 15
     a68:	89 27       	eor	r24, r25
     a6a:	9f 70       	andi	r25, 0x0F	; 15
     a6c:	89 27       	eor	r24, r25
     a6e:	28 0f       	add	r18, r24
     a70:	39 1f       	adc	r19, r25
     a72:	41 1d       	adc	r20, r1
     a74:	51 1d       	adc	r21, r1
     a76:	da 01       	movw	r26, r20
     a78:	c9 01       	movw	r24, r18
     a7a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     a7c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     a7e:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a80:	5d 8d       	ldd	r21, Y+29	; 0x1d
     a82:	28 0f       	add	r18, r24
     a84:	39 1f       	adc	r19, r25
     a86:	4a 1f       	adc	r20, r26
     a88:	5b 1f       	adc	r21, r27
     a8a:	2a 8b       	std	Y+18, r18	; 0x12
     a8c:	3b 8b       	std	Y+19, r19	; 0x13
     a8e:	4c 8b       	std	Y+20, r20	; 0x14
     a90:	5d 8b       	std	Y+21, r21	; 0x15
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     a92:	82 16       	cp	r8, r18
     a94:	93 06       	cpc	r9, r19
     a96:	a4 06       	cpc	r10, r20
     a98:	b5 06       	cpc	r11, r21
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <__stack+0x19f>
     a9c:	3b c1       	rjmp	.+630    	; 0xd14 <__stack+0x415>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
     a9e:	c5 01       	movw	r24, r10
     aa0:	b4 01       	movw	r22, r8
     aa2:	62 1b       	sub	r22, r18
     aa4:	73 0b       	sbc	r23, r19
     aa6:	84 0b       	sbc	r24, r20
     aa8:	95 0b       	sbc	r25, r21
     aaa:	e9 89       	ldd	r30, Y+17	; 0x11
     aac:	2e 2f       	mov	r18, r30
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	0e 94 c4 22 	call	0x4588	; 0x4588 <__udivmodsi4>
     ab8:	da 01       	movw	r26, r20
     aba:	c9 01       	movw	r24, r18
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     abc:	21 15       	cp	r18, r1
     abe:	31 05       	cpc	r19, r1
     ac0:	41 05       	cpc	r20, r1
     ac2:	51 05       	cpc	r21, r1
     ac4:	09 f4       	brne	.+2      	; 0xac8 <__stack+0x1c9>
     ac6:	28 c1       	rjmp	.+592    	; 0xd18 <__stack+0x419>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     ac8:	26 3f       	cpi	r18, 0xF6	; 246
     aca:	ff e0       	ldi	r31, 0x0F	; 15
     acc:	3f 07       	cpc	r19, r31
     ace:	41 05       	cpc	r20, r1
     ad0:	51 05       	cpc	r21, r1
     ad2:	18 f4       	brcc	.+6      	; 0xada <__stack+0x1db>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	69 8b       	std	Y+17, r22	; 0x11
     ad8:	02 c0       	rjmp	.+4      	; 0xade <__stack+0x1df>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     ada:	e2 e0       	ldi	r30, 0x02	; 2
     adc:	e9 8b       	std	Y+17, r30	; 0x11
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     ade:	86 3f       	cpi	r24, 0xF6	; 246
     ae0:	9f 4f       	sbci	r25, 0xFF	; 255
     ae2:	a1 05       	cpc	r26, r1
     ae4:	b1 05       	cpc	r27, r1
     ae6:	08 f0       	brcs	.+2      	; 0xaea <__stack+0x1eb>
     ae8:	1f c1       	rjmp	.+574    	; 0xd28 <__stack+0x429>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     aea:	81 2c       	mov	r8, r1
     aec:	91 2c       	mov	r9, r1
     aee:	54 01       	movw	r10, r8
     af0:	68 94       	set
     af2:	81 f8       	bld	r8, 1
     af4:	82 0e       	add	r8, r18
     af6:	93 1e       	adc	r9, r19
     af8:	a4 1e       	adc	r10, r20
     afa:	b5 1e       	adc	r11, r21
     afc:	d8 01       	movw	r26, r16
     afe:	52 96       	adiw	r26, 0x12	; 18
     b00:	8d 92       	st	X+, r8
     b02:	9d 92       	st	X+, r9
     b04:	ad 92       	st	X+, r10
     b06:	bc 92       	st	X, r11
     b08:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
     b0a:	f8 01       	movw	r30, r16
     b0c:	42 8e       	std	Z+26, r4	; 0x1a
     b0e:	53 8e       	std	Z+27, r5	; 0x1b
     b10:	64 8e       	std	Z+28, r6	; 0x1c
     b12:	75 8e       	std	Z+29, r7	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     b14:	8e 89       	ldd	r24, Y+22	; 0x16
     b16:	9f 89       	ldd	r25, Y+23	; 0x17
     b18:	a8 8d       	ldd	r26, Y+24	; 0x18
     b1a:	b9 8d       	ldd	r27, Y+25	; 0x19
     b1c:	84 0d       	add	r24, r4
     b1e:	95 1d       	adc	r25, r5
     b20:	a6 1d       	adc	r26, r6
     b22:	b7 1d       	adc	r27, r7
     b24:	86 8f       	std	Z+30, r24	; 0x1e
     b26:	97 8f       	std	Z+31, r25	; 0x1f
     b28:	a0 a3       	std	Z+32, r26	; 0x20
     b2a:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
     b2c:	4a 89       	ldd	r20, Y+18	; 0x12
     b2e:	5b 89       	ldd	r21, Y+19	; 0x13
     b30:	6c 89       	ldd	r22, Y+20	; 0x14
     b32:	7d 89       	ldd	r23, Y+21	; 0x15
     b34:	44 0d       	add	r20, r4
     b36:	55 1d       	adc	r21, r5
     b38:	66 1d       	adc	r22, r6
     b3a:	77 1d       	adc	r23, r7
     b3c:	46 a3       	std	Z+38, r20	; 0x26
     b3e:	57 a3       	std	Z+39, r21	; 0x27
     b40:	60 a7       	std	Z+40, r22	; 0x28
     b42:	71 a7       	std	Z+41, r23	; 0x29
	if (fmt == FS_FAT32) {
     b44:	f9 89       	ldd	r31, Y+17	; 0x11
     b46:	f3 30       	cpi	r31, 0x03	; 3
     b48:	c1 f4       	brne	.+48     	; 0xb7a <__stack+0x27b>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     b4a:	23 28       	or	r2, r3
     b4c:	09 f0       	breq	.+2      	; 0xb50 <__stack+0x251>
     b4e:	e6 c0       	rjmp	.+460    	; 0xd1c <__stack+0x41d>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
     b50:	f8 01       	movw	r30, r16
     b52:	e6 5a       	subi	r30, 0xA6	; 166
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	a2 81       	ldd	r26, Z+2	; 0x02
     b5c:	b3 81       	ldd	r27, Z+3	; 0x03
     b5e:	f8 01       	movw	r30, r16
     b60:	82 a3       	std	Z+34, r24	; 0x22
     b62:	93 a3       	std	Z+35, r25	; 0x23
     b64:	a4 a3       	std	Z+36, r26	; 0x24
     b66:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
     b68:	88 0c       	add	r8, r8
     b6a:	99 1c       	adc	r9, r9
     b6c:	aa 1c       	adc	r10, r10
     b6e:	bb 1c       	adc	r11, r11
     b70:	88 0c       	add	r8, r8
     b72:	99 1c       	adc	r9, r9
     b74:	aa 1c       	adc	r10, r10
     b76:	bb 1c       	adc	r11, r11
     b78:	2d c0       	rjmp	.+90     	; 0xbd4 <__stack+0x2d5>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     b7a:	23 28       	or	r2, r3
     b7c:	09 f4       	brne	.+2      	; 0xb80 <__stack+0x281>
     b7e:	d0 c0       	rjmp	.+416    	; 0xd20 <__stack+0x421>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
     b80:	2a 8d       	ldd	r18, Y+26	; 0x1a
     b82:	3b 8d       	ldd	r19, Y+27	; 0x1b
     b84:	4c 8d       	ldd	r20, Y+28	; 0x1c
     b86:	5d 8d       	ldd	r21, Y+29	; 0x1d
     b88:	82 0f       	add	r24, r18
     b8a:	93 1f       	adc	r25, r19
     b8c:	a4 1f       	adc	r26, r20
     b8e:	b5 1f       	adc	r27, r21
     b90:	f8 01       	movw	r30, r16
     b92:	82 a3       	std	Z+34, r24	; 0x22
     b94:	93 a3       	std	Z+35, r25	; 0x23
     b96:	a4 a3       	std	Z+36, r26	; 0x24
     b98:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     b9a:	f9 89       	ldd	r31, Y+17	; 0x11
     b9c:	f2 30       	cpi	r31, 0x02	; 2
     b9e:	29 f4       	brne	.+10     	; 0xbaa <__stack+0x2ab>
     ba0:	88 0c       	add	r8, r8
     ba2:	99 1c       	adc	r9, r9
     ba4:	aa 1c       	adc	r10, r10
     ba6:	bb 1c       	adc	r11, r11
     ba8:	15 c0       	rjmp	.+42     	; 0xbd4 <__stack+0x2d5>
     baa:	a3 e0       	ldi	r26, 0x03	; 3
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	a5 01       	movw	r20, r10
     bb0:	94 01       	movw	r18, r8
     bb2:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__muluhisi3>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	b6 95       	lsr	r27
     bbc:	a7 95       	ror	r26
     bbe:	97 95       	ror	r25
     bc0:	87 95       	ror	r24
     bc2:	21 e0       	ldi	r18, 0x01	; 1
     bc4:	82 22       	and	r8, r18
     bc6:	99 24       	eor	r9, r9
     bc8:	aa 24       	eor	r10, r10
     bca:	bb 24       	eor	r11, r11
     bcc:	88 0e       	add	r8, r24
     bce:	99 1e       	adc	r9, r25
     bd0:	aa 1e       	adc	r10, r26
     bd2:	bb 1e       	adc	r11, r27
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
     bd4:	3f ef       	ldi	r19, 0xFF	; 255
     bd6:	83 0e       	add	r8, r19
     bd8:	31 e0       	ldi	r19, 0x01	; 1
     bda:	93 1e       	adc	r9, r19
     bdc:	a1 1c       	adc	r10, r1
     bde:	b1 1c       	adc	r11, r1
     be0:	07 2e       	mov	r0, r23
     be2:	79 e0       	ldi	r23, 0x09	; 9
     be4:	b6 94       	lsr	r11
     be6:	a7 94       	ror	r10
     be8:	97 94       	ror	r9
     bea:	87 94       	ror	r8
     bec:	7a 95       	dec	r23
     bee:	d1 f7       	brne	.-12     	; 0xbe4 <__stack+0x2e5>
     bf0:	70 2d       	mov	r23, r0
     bf2:	c8 14       	cp	r12, r8
     bf4:	d9 04       	cpc	r13, r9
     bf6:	ea 04       	cpc	r14, r10
     bf8:	fb 04       	cpc	r15, r11
     bfa:	08 f4       	brcc	.+2      	; 0xbfe <__stack+0x2ff>
     bfc:	93 c0       	rjmp	.+294    	; 0xd24 <__stack+0x425>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
     bfe:	8f ef       	ldi	r24, 0xFF	; 255
     c00:	9f ef       	ldi	r25, 0xFF	; 255
     c02:	dc 01       	movw	r26, r24
     c04:	f8 01       	movw	r30, r16
     c06:	86 87       	std	Z+14, r24	; 0x0e
     c08:	97 87       	std	Z+15, r25	; 0x0f
     c0a:	a0 8b       	std	Z+16, r26	; 0x10
     c0c:	b1 8b       	std	Z+17, r27	; 0x11
     c0e:	82 87       	std	Z+10, r24	; 0x0a
     c10:	93 87       	std	Z+11, r25	; 0x0b
     c12:	a4 87       	std	Z+12, r26	; 0x0c
     c14:	b5 87       	std	Z+13, r27	; 0x0d

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
     c16:	80 e8       	ldi	r24, 0x80	; 128
     c18:	85 83       	std	Z+5, r24	; 0x05
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
     c1a:	f9 89       	ldd	r31, Y+17	; 0x11
     c1c:	f3 30       	cpi	r31, 0x03	; 3
     c1e:	09 f0       	breq	.+2      	; 0xc22 <__stack+0x323>
     c20:	4b c0       	rjmp	.+150    	; 0xcb8 <__stack+0x3b9>
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
     c22:	f8 01       	movw	r30, r16
     c24:	e2 5a       	subi	r30, 0xA2	; 162
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	09 f0       	breq	.+2      	; 0xc32 <__stack+0x333>
     c30:	43 c0       	rjmp	.+134    	; 0xcb8 <__stack+0x3b9>
		&& move_window(fs, bsect + 1) == FR_OK)
     c32:	b3 01       	movw	r22, r6
     c34:	a2 01       	movw	r20, r4
     c36:	4f 5f       	subi	r20, 0xFF	; 255
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
     c3a:	6f 4f       	sbci	r22, 0xFF	; 255
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	c8 01       	movw	r24, r16
     c40:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
     c44:	81 11       	cpse	r24, r1
     c46:	38 c0       	rjmp	.+112    	; 0xcb8 <__stack+0x3b9>
	{
		fs->fsi_flag = 0;
     c48:	d8 01       	movw	r26, r16
     c4a:	15 96       	adiw	r26, 0x05	; 5
     c4c:	1c 92       	st	X, r1
		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
     c4e:	f8 01       	movw	r30, r16
     c50:	e4 5d       	subi	r30, 0xD4	; 212
     c52:	fd 4f       	sbci	r31, 0xFD	; 253
     c54:	80 81       	ld	r24, Z
     c56:	91 81       	ldd	r25, Z+1	; 0x01
     c58:	85 35       	cpi	r24, 0x55	; 85
     c5a:	9a 4a       	sbci	r25, 0xAA	; 170
     c5c:	69 f5       	brne	.+90     	; 0xcb8 <__stack+0x3b9>
			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
     c5e:	f8 01       	movw	r30, r16
     c60:	86 a5       	ldd	r24, Z+46	; 0x2e
     c62:	97 a5       	ldd	r25, Z+47	; 0x2f
     c64:	a0 a9       	ldd	r26, Z+48	; 0x30
     c66:	b1 a9       	ldd	r27, Z+49	; 0x31
     c68:	82 35       	cpi	r24, 0x52	; 82
     c6a:	92 45       	sbci	r25, 0x52	; 82
     c6c:	a1 46       	sbci	r26, 0x61	; 97
     c6e:	b1 44       	sbci	r27, 0x41	; 65
     c70:	19 f5       	brne	.+70     	; 0xcb8 <__stack+0x3b9>
			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
     c72:	f8 01       	movw	r30, r16
     c74:	ee 5e       	subi	r30, 0xEE	; 238
     c76:	fd 4f       	sbci	r31, 0xFD	; 253
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
     c7c:	a2 81       	ldd	r26, Z+2	; 0x02
     c7e:	b3 81       	ldd	r27, Z+3	; 0x03
     c80:	82 37       	cpi	r24, 0x72	; 114
     c82:	92 47       	sbci	r25, 0x72	; 114
     c84:	a1 44       	sbci	r26, 0x41	; 65
     c86:	b1 46       	sbci	r27, 0x61	; 97
     c88:	b9 f4       	brne	.+46     	; 0xcb8 <__stack+0x3b9>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
     c8a:	f8 01       	movw	r30, r16
     c8c:	ea 5e       	subi	r30, 0xEA	; 234
     c8e:	fd 4f       	sbci	r31, 0xFD	; 253
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	a2 81       	ldd	r26, Z+2	; 0x02
     c96:	b3 81       	ldd	r27, Z+3	; 0x03
     c98:	f8 01       	movw	r30, r16
     c9a:	86 87       	std	Z+14, r24	; 0x0e
     c9c:	97 87       	std	Z+15, r25	; 0x0f
     c9e:	a0 8b       	std	Z+16, r26	; 0x10
     ca0:	b1 8b       	std	Z+17, r27	; 0x11
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
     ca2:	e6 5e       	subi	r30, 0xE6	; 230
     ca4:	fd 4f       	sbci	r31, 0xFD	; 253
     ca6:	80 81       	ld	r24, Z
     ca8:	91 81       	ldd	r25, Z+1	; 0x01
     caa:	a2 81       	ldd	r26, Z+2	; 0x02
     cac:	b3 81       	ldd	r27, Z+3	; 0x03
     cae:	f8 01       	movw	r30, r16
     cb0:	82 87       	std	Z+10, r24	; 0x0a
     cb2:	93 87       	std	Z+11, r25	; 0x0b
     cb4:	a4 87       	std	Z+12, r26	; 0x0c
     cb6:	b5 87       	std	Z+13, r27	; 0x0d
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
     cb8:	e9 89       	ldd	r30, Y+17	; 0x11
     cba:	d8 01       	movw	r26, r16
     cbc:	ec 93       	st	X, r30
	fs->id = ++Fsid;	/* File system mount ID */
     cbe:	80 91 7a 02 	lds	r24, 0x027A
     cc2:	90 91 7b 02 	lds	r25, 0x027B
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	90 93 7b 02 	sts	0x027B, r25
     ccc:	80 93 7a 02 	sts	0x027A, r24
     cd0:	17 96       	adiw	r26, 0x07	; 7
     cd2:	9c 93       	st	X, r25
     cd4:	8e 93       	st	-X, r24
     cd6:	16 97       	sbiw	r26, 0x06	; 6
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	56 c0       	rjmp	.+172    	; 0xd88 <__stack+0x489>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
     cdc:	8b e0       	ldi	r24, 0x0B	; 11
     cde:	54 c0       	rjmp	.+168    	; 0xd88 <__stack+0x489>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     ce0:	8c e0       	ldi	r24, 0x0C	; 12
     ce2:	52 c0       	rjmp	.+164    	; 0xd88 <__stack+0x489>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	50 c0       	rjmp	.+160    	; 0xd88 <__stack+0x489>

	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
     ce8:	8a e0       	ldi	r24, 0x0A	; 10
     cea:	4e c0       	rjmp	.+156    	; 0xd88 <__stack+0x489>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	4c c0       	rjmp	.+152    	; 0xd88 <__stack+0x489>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
     cf0:	8a e0       	ldi	r24, 0x0A	; 10
     cf2:	4a c0       	rjmp	.+148    	; 0xd88 <__stack+0x489>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	48 c0       	rjmp	.+144    	; 0xd88 <__stack+0x489>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     cf8:	8d e0       	ldi	r24, 0x0D	; 13
     cfa:	46 c0       	rjmp	.+140    	; 0xd88 <__stack+0x489>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
     cfc:	8d e0       	ldi	r24, 0x0D	; 13
     cfe:	44 c0       	rjmp	.+136    	; 0xd88 <__stack+0x489>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
     d00:	8d e0       	ldi	r24, 0x0D	; 13
     d02:	42 c0       	rjmp	.+132    	; 0xd88 <__stack+0x489>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
		return FR_NO_FILESYSTEM;
     d04:	8d e0       	ldi	r24, 0x0D	; 13
     d06:	40 c0       	rjmp	.+128    	; 0xd88 <__stack+0x489>
     d08:	8d e0       	ldi	r24, 0x0D	; 13
     d0a:	3e c0       	rjmp	.+124    	; 0xd88 <__stack+0x489>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
		return FR_NO_FILESYSTEM;
     d0c:	8d e0       	ldi	r24, 0x0D	; 13
     d0e:	3c c0       	rjmp	.+120    	; 0xd88 <__stack+0x489>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
     d10:	8d e0       	ldi	r24, 0x0D	; 13
     d12:	3a c0       	rjmp	.+116    	; 0xd88 <__stack+0x489>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     d14:	8d e0       	ldi	r24, 0x0D	; 13
     d16:	38 c0       	rjmp	.+112    	; 0xd88 <__stack+0x489>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     d18:	8d e0       	ldi	r24, 0x0D	; 13
     d1a:	36 c0       	rjmp	.+108    	; 0xd88 <__stack+0x489>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->volbase = bsect;								/* Volume start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	fs->database = bsect + sysect;						/* Data start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     d1c:	8d e0       	ldi	r24, 0x0D	; 13
     d1e:	34 c0       	rjmp	.+104    	; 0xd88 <__stack+0x489>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     d20:	8d e0       	ldi	r24, 0x0D	; 13
     d22:	32 c0       	rjmp	.+100    	; 0xd88 <__stack+0x489>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
		return FR_NO_FILESYSTEM;
     d24:	8d e0       	ldi	r24, 0x0D	; 13
     d26:	30 c0       	rjmp	.+96     	; 0xd88 <__stack+0x489>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     d28:	81 2c       	mov	r8, r1
     d2a:	91 2c       	mov	r9, r1
     d2c:	54 01       	movw	r10, r8
     d2e:	68 94       	set
     d30:	81 f8       	bld	r8, 1
     d32:	82 0e       	add	r8, r18
     d34:	93 1e       	adc	r9, r19
     d36:	a4 1e       	adc	r10, r20
     d38:	b5 1e       	adc	r11, r21
     d3a:	d8 01       	movw	r26, r16
     d3c:	52 96       	adiw	r26, 0x12	; 18
     d3e:	8d 92       	st	X+, r8
     d40:	9d 92       	st	X+, r9
     d42:	ad 92       	st	X+, r10
     d44:	bc 92       	st	X, r11
     d46:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
     d48:	f8 01       	movw	r30, r16
     d4a:	42 8e       	std	Z+26, r4	; 0x1a
     d4c:	53 8e       	std	Z+27, r5	; 0x1b
     d4e:	64 8e       	std	Z+28, r6	; 0x1c
     d50:	75 8e       	std	Z+29, r7	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     d52:	8e 89       	ldd	r24, Y+22	; 0x16
     d54:	9f 89       	ldd	r25, Y+23	; 0x17
     d56:	a8 8d       	ldd	r26, Y+24	; 0x18
     d58:	b9 8d       	ldd	r27, Y+25	; 0x19
     d5a:	84 0d       	add	r24, r4
     d5c:	95 1d       	adc	r25, r5
     d5e:	a6 1d       	adc	r26, r6
     d60:	b7 1d       	adc	r27, r7
     d62:	86 8f       	std	Z+30, r24	; 0x1e
     d64:	97 8f       	std	Z+31, r25	; 0x1f
     d66:	a0 a3       	std	Z+32, r26	; 0x20
     d68:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
     d6a:	8a 89       	ldd	r24, Y+18	; 0x12
     d6c:	9b 89       	ldd	r25, Y+19	; 0x13
     d6e:	ac 89       	ldd	r26, Y+20	; 0x14
     d70:	bd 89       	ldd	r27, Y+21	; 0x15
     d72:	84 0d       	add	r24, r4
     d74:	95 1d       	adc	r25, r5
     d76:	a6 1d       	adc	r26, r6
     d78:	b7 1d       	adc	r27, r7
     d7a:	86 a3       	std	Z+38, r24	; 0x26
     d7c:	97 a3       	std	Z+39, r25	; 0x27
     d7e:	a0 a7       	std	Z+40, r26	; 0x28
     d80:	b1 a7       	std	Z+41, r27	; 0x29
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     d82:	f3 e0       	ldi	r31, 0x03	; 3
     d84:	f9 8b       	std	Y+17, r31	; 0x11
     d86:	e1 ce       	rjmp	.-574    	; 0xb4a <__stack+0x24b>
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
     d88:	6d 96       	adiw	r28, 0x1d	; 29
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	df 90       	pop	r13
     da2:	cf 90       	pop	r12
     da4:	bf 90       	pop	r11
     da6:	af 90       	pop	r10
     da8:	9f 90       	pop	r9
     daa:	8f 90       	pop	r8
     dac:	7f 90       	pop	r7
     dae:	6f 90       	pop	r6
     db0:	5f 90       	pop	r5
     db2:	4f 90       	pop	r4
     db4:	3f 90       	pop	r3
     db6:	2f 90       	pop	r2
     db8:	08 95       	ret

00000dba <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	ec 01       	movw	r28, r24
	FRESULT res;


	res = sync_window(fs);
     dc8:	0e 94 36 03 	call	0x66c	; 0x66c <sync_window>
     dcc:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
     dce:	81 11       	cpse	r24, r1
     dd0:	62 c0       	rjmp	.+196    	; 0xe96 <sync_fs+0xdc>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
     dd2:	88 81       	ld	r24, Y
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	09 f0       	breq	.+2      	; 0xdda <sync_fs+0x20>
     dd8:	54 c0       	rjmp	.+168    	; 0xe82 <sync_fs+0xc8>
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	09 f0       	breq	.+2      	; 0xde2 <sync_fs+0x28>
     de0:	50 c0       	rjmp	.+160    	; 0xe82 <sync_fs+0xc8>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
     de2:	7e 01       	movw	r14, r28
     de4:	8e e2       	ldi	r24, 0x2E	; 46
     de6:	e8 0e       	add	r14, r24
     de8:	f1 1c       	adc	r15, r1
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	52 e0       	ldi	r21, 0x02	; 2
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	c7 01       	movw	r24, r14
     df4:	0e 94 a4 02 	call	0x548	; 0x548 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
     df8:	fe 01       	movw	r30, r28
     dfa:	e4 5d       	subi	r30, 0xD4	; 212
     dfc:	fd 4f       	sbci	r31, 0xFD	; 253
     dfe:	85 e5       	ldi	r24, 0x55	; 85
     e00:	9a ea       	ldi	r25, 0xAA	; 170
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
     e06:	82 e5       	ldi	r24, 0x52	; 82
     e08:	92 e5       	ldi	r25, 0x52	; 82
     e0a:	a1 e6       	ldi	r26, 0x61	; 97
     e0c:	b1 e4       	ldi	r27, 0x41	; 65
     e0e:	8e a7       	std	Y+46, r24	; 0x2e
     e10:	9f a7       	std	Y+47, r25	; 0x2f
     e12:	a8 ab       	std	Y+48, r26	; 0x30
     e14:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
     e16:	fe 01       	movw	r30, r28
     e18:	ee 5e       	subi	r30, 0xEE	; 238
     e1a:	fd 4f       	sbci	r31, 0xFD	; 253
     e1c:	82 e7       	ldi	r24, 0x72	; 114
     e1e:	92 e7       	ldi	r25, 0x72	; 114
     e20:	a1 e4       	ldi	r26, 0x41	; 65
     e22:	b1 e6       	ldi	r27, 0x61	; 97
     e24:	80 83       	st	Z, r24
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	a2 83       	std	Z+2, r26	; 0x02
     e2a:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
     e2c:	fe 01       	movw	r30, r28
     e2e:	ea 5e       	subi	r30, 0xEA	; 234
     e30:	fd 4f       	sbci	r31, 0xFD	; 253
     e32:	8e 85       	ldd	r24, Y+14	; 0x0e
     e34:	9f 85       	ldd	r25, Y+15	; 0x0f
     e36:	a8 89       	ldd	r26, Y+16	; 0x10
     e38:	b9 89       	ldd	r27, Y+17	; 0x11
     e3a:	80 83       	st	Z, r24
     e3c:	91 83       	std	Z+1, r25	; 0x01
     e3e:	a2 83       	std	Z+2, r26	; 0x02
     e40:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
     e42:	fe 01       	movw	r30, r28
     e44:	e6 5e       	subi	r30, 0xE6	; 230
     e46:	fd 4f       	sbci	r31, 0xFD	; 253
     e48:	8a 85       	ldd	r24, Y+10	; 0x0a
     e4a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e4c:	ac 85       	ldd	r26, Y+12	; 0x0c
     e4e:	bd 85       	ldd	r27, Y+13	; 0x0d
     e50:	80 83       	st	Z, r24
     e52:	91 83       	std	Z+1, r25	; 0x01
     e54:	a2 83       	std	Z+2, r26	; 0x02
     e56:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
     e58:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e5a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e5c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     e5e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     e60:	9c 01       	movw	r18, r24
     e62:	ad 01       	movw	r20, r26
     e64:	2f 5f       	subi	r18, 0xFF	; 255
     e66:	3f 4f       	sbci	r19, 0xFF	; 255
     e68:	4f 4f       	sbci	r20, 0xFF	; 255
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
     e6c:	2a a7       	std	Y+42, r18	; 0x2a
     e6e:	3b a7       	std	Y+43, r19	; 0x2b
     e70:	4c a7       	std	Y+44, r20	; 0x2c
     e72:	5d a7       	std	Y+45, r21	; 0x2d
			disk_write(fs->drv, fs->win, fs->winsect, 1);
     e74:	01 e0       	ldi	r16, 0x01	; 1
     e76:	10 e0       	ldi	r17, 0x00	; 0
     e78:	b7 01       	movw	r22, r14
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <disk_write>
			fs->fsi_flag = 0;
     e80:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	0e 94 46 1c 	call	0x388c	; 0x388c <disk_ioctl>
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	81 11       	cpse	r24, r1
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <sync_fs+0xdc>
     e94:	90 e0       	ldi	r25, 0x00	; 0
			res = FR_DISK_ERR;
	}

	return res;
}
     e96:	89 2f       	mov	r24, r25
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	08 95       	ret

00000ea6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	fc 01       	movw	r30, r24
	clst -= 2;
     eb4:	9a 01       	movw	r18, r20
     eb6:	ab 01       	movw	r20, r22
     eb8:	22 50       	subi	r18, 0x02	; 2
     eba:	31 09       	sbc	r19, r1
     ebc:	41 09       	sbc	r20, r1
     ebe:	51 09       	sbc	r21, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     ec0:	c2 88       	ldd	r12, Z+18	; 0x12
     ec2:	d3 88       	ldd	r13, Z+19	; 0x13
     ec4:	e4 88       	ldd	r14, Z+20	; 0x14
     ec6:	f5 88       	ldd	r15, Z+21	; 0x15
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	c8 1a       	sub	r12, r24
     ecc:	d1 08       	sbc	r13, r1
     ece:	e1 08       	sbc	r14, r1
     ed0:	f1 08       	sbc	r15, r1
     ed2:	2c 15       	cp	r18, r12
     ed4:	3d 05       	cpc	r19, r13
     ed6:	4e 05       	cpc	r20, r14
     ed8:	5f 05       	cpc	r21, r15
     eda:	68 f4       	brcc	.+26     	; 0xef6 <clust2sect+0x50>
	return clst * fs->csize + fs->database;
     edc:	a2 81       	ldd	r26, Z+2	; 0x02
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__muluhisi3>
     ee4:	06 a1       	ldd	r16, Z+38	; 0x26
     ee6:	17 a1       	ldd	r17, Z+39	; 0x27
     ee8:	20 a5       	ldd	r18, Z+40	; 0x28
     eea:	31 a5       	ldd	r19, Z+41	; 0x29
     eec:	06 0f       	add	r16, r22
     eee:	17 1f       	adc	r17, r23
     ef0:	28 1f       	adc	r18, r24
     ef2:	39 1f       	adc	r19, r25
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <clust2sect+0x56>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     ef6:	00 e0       	ldi	r16, 0x00	; 0
     ef8:	10 e0       	ldi	r17, 0x00	; 0
     efa:	98 01       	movw	r18, r16
	return clst * fs->csize + fs->database;
}
     efc:	60 2f       	mov	r22, r16
     efe:	71 2f       	mov	r23, r17
     f00:	82 2f       	mov	r24, r18
     f02:	93 2f       	mov	r25, r19
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	08 95       	ret

00000f12 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     f12:	bf 92       	push	r11
     f14:	cf 92       	push	r12
     f16:	df 92       	push	r13
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	ec 01       	movw	r28, r24
     f26:	6a 01       	movw	r12, r20
     f28:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
     f2a:	42 30       	cpi	r20, 0x02	; 2
     f2c:	51 05       	cpc	r21, r1
     f2e:	61 05       	cpc	r22, r1
     f30:	71 05       	cpc	r23, r1
     f32:	08 f4       	brcc	.+2      	; 0xf36 <get_fat+0x24>
     f34:	a5 c0       	rjmp	.+330    	; 0x1080 <get_fat+0x16e>
     f36:	4a 89       	ldd	r20, Y+18	; 0x12
     f38:	5b 89       	ldd	r21, Y+19	; 0x13
     f3a:	6c 89       	ldd	r22, Y+20	; 0x14
     f3c:	7d 89       	ldd	r23, Y+21	; 0x15
     f3e:	c4 16       	cp	r12, r20
     f40:	d5 06       	cpc	r13, r21
     f42:	e6 06       	cpc	r14, r22
     f44:	f7 06       	cpc	r15, r23
     f46:	08 f0       	brcs	.+2      	; 0xf4a <get_fat+0x38>
     f48:	a0 c0       	rjmp	.+320    	; 0x108a <get_fat+0x178>
		return 1;

	switch (fs->fs_type) {
     f4a:	88 81       	ld	r24, Y
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	09 f4       	brne	.+2      	; 0xf52 <get_fat+0x40>
     f50:	4a c0       	rjmp	.+148    	; 0xfe6 <get_fat+0xd4>
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	09 f4       	brne	.+2      	; 0xf58 <get_fat+0x46>
     f56:	68 c0       	rjmp	.+208    	; 0x1028 <get_fat+0x116>
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	09 f0       	breq	.+2      	; 0xf5e <get_fat+0x4c>
     f5c:	9b c0       	rjmp	.+310    	; 0x1094 <get_fat+0x182>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
     f5e:	86 01       	movw	r16, r12
     f60:	16 95       	lsr	r17
     f62:	07 95       	ror	r16
     f64:	0c 0d       	add	r16, r12
     f66:	1d 1d       	adc	r17, r13
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
     f68:	c8 01       	movw	r24, r16
     f6a:	89 2f       	mov	r24, r25
     f6c:	99 27       	eor	r25, r25
     f6e:	86 95       	lsr	r24
     f70:	4e 8d       	ldd	r20, Y+30	; 0x1e
     f72:	5f 8d       	ldd	r21, Y+31	; 0x1f
     f74:	68 a1       	ldd	r22, Y+32	; 0x20
     f76:	79 a1       	ldd	r23, Y+33	; 0x21
     f78:	48 0f       	add	r20, r24
     f7a:	59 1f       	adc	r21, r25
     f7c:	61 1d       	adc	r22, r1
     f7e:	71 1d       	adc	r23, r1
     f80:	ce 01       	movw	r24, r28
     f82:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
     f86:	81 11       	cpse	r24, r1
     f88:	8a c0       	rjmp	.+276    	; 0x109e <get_fat+0x18c>
		wc = fs->win[bc % SS(fs)]; bc++;
     f8a:	f8 01       	movw	r30, r16
     f8c:	f1 70       	andi	r31, 0x01	; 1
     f8e:	ec 0f       	add	r30, r28
     f90:	fd 1f       	adc	r31, r29
     f92:	b6 a4       	ldd	r11, Z+46	; 0x2e
     f94:	0f 5f       	subi	r16, 0xFF	; 255
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
     f98:	c8 01       	movw	r24, r16
     f9a:	89 2f       	mov	r24, r25
     f9c:	99 27       	eor	r25, r25
     f9e:	86 95       	lsr	r24
     fa0:	4e 8d       	ldd	r20, Y+30	; 0x1e
     fa2:	5f 8d       	ldd	r21, Y+31	; 0x1f
     fa4:	68 a1       	ldd	r22, Y+32	; 0x20
     fa6:	79 a1       	ldd	r23, Y+33	; 0x21
     fa8:	48 0f       	add	r20, r24
     faa:	59 1f       	adc	r21, r25
     fac:	61 1d       	adc	r22, r1
     fae:	71 1d       	adc	r23, r1
     fb0:	ce 01       	movw	r24, r28
     fb2:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
     fb6:	81 11       	cpse	r24, r1
     fb8:	76 c0       	rjmp	.+236    	; 0x10a6 <get_fat+0x194>
		wc |= fs->win[bc % SS(fs)] << 8;
     fba:	11 70       	andi	r17, 0x01	; 1
     fbc:	c0 0f       	add	r28, r16
     fbe:	d1 1f       	adc	r29, r17
     fc0:	9e a5       	ldd	r25, Y+46	; 0x2e
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	8c 01       	movw	r16, r24
     fc6:	0b 29       	or	r16, r11
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
     fc8:	c0 fe       	sbrs	r12, 0
     fca:	09 c0       	rjmp	.+18     	; 0xfde <get_fat+0xcc>
     fcc:	12 95       	swap	r17
     fce:	02 95       	swap	r16
     fd0:	0f 70       	andi	r16, 0x0F	; 15
     fd2:	01 27       	eor	r16, r17
     fd4:	1f 70       	andi	r17, 0x0F	; 15
     fd6:	01 27       	eor	r16, r17
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	6f c0       	rjmp	.+222    	; 0x10bc <get_fat+0x1aa>
     fde:	1f 70       	andi	r17, 0x0F	; 15
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	6b c0       	rjmp	.+214    	; 0x10bc <get_fat+0x1aa>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
     fe6:	77 27       	eor	r23, r23
     fe8:	6f 2d       	mov	r22, r15
     fea:	5e 2d       	mov	r21, r14
     fec:	4d 2d       	mov	r20, r13
     fee:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ff0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ff2:	a8 a1       	ldd	r26, Y+32	; 0x20
     ff4:	b9 a1       	ldd	r27, Y+33	; 0x21
     ff6:	48 0f       	add	r20, r24
     ff8:	59 1f       	adc	r21, r25
     ffa:	6a 1f       	adc	r22, r26
     ffc:	7b 1f       	adc	r23, r27
     ffe:	ce 01       	movw	r24, r28
    1000:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
    1004:	81 11       	cpse	r24, r1
    1006:	53 c0       	rjmp	.+166    	; 0x10ae <get_fat+0x19c>
		p = &fs->win[clst * 2 % SS(fs)];
    1008:	cc 0c       	add	r12, r12
    100a:	dd 1c       	adc	r13, r13
    100c:	ee 1c       	adc	r14, r14
    100e:	ff 1c       	adc	r15, r15
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	d8 22       	and	r13, r24
    1014:	ee 24       	eor	r14, r14
    1016:	ff 24       	eor	r15, r15
		return LD_WORD(p);
    1018:	fe 01       	movw	r30, r28
    101a:	ec 0d       	add	r30, r12
    101c:	fd 1d       	adc	r31, r13
    101e:	06 a5       	ldd	r16, Z+46	; 0x2e
    1020:	17 a5       	ldd	r17, Z+47	; 0x2f
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	4a c0       	rjmp	.+148    	; 0x10bc <get_fat+0x1aa>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    1028:	b7 01       	movw	r22, r14
    102a:	a6 01       	movw	r20, r12
    102c:	68 94       	set
    102e:	16 f8       	bld	r1, 6
    1030:	76 95       	lsr	r23
    1032:	67 95       	ror	r22
    1034:	57 95       	ror	r21
    1036:	47 95       	ror	r20
    1038:	16 94       	lsr	r1
    103a:	d1 f7       	brne	.-12     	; 0x1030 <get_fat+0x11e>
    103c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    103e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1040:	a8 a1       	ldd	r26, Y+32	; 0x20
    1042:	b9 a1       	ldd	r27, Y+33	; 0x21
    1044:	48 0f       	add	r20, r24
    1046:	59 1f       	adc	r21, r25
    1048:	6a 1f       	adc	r22, r26
    104a:	7b 1f       	adc	r23, r27
    104c:	ce 01       	movw	r24, r28
    104e:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
    1052:	81 11       	cpse	r24, r1
    1054:	30 c0       	rjmp	.+96     	; 0x10b6 <get_fat+0x1a4>
		p = &fs->win[clst * 4 % SS(fs)];
    1056:	cc 0c       	add	r12, r12
    1058:	dd 1c       	adc	r13, r13
    105a:	ee 1c       	adc	r14, r14
    105c:	ff 1c       	adc	r15, r15
    105e:	cc 0c       	add	r12, r12
    1060:	dd 1c       	adc	r13, r13
    1062:	ee 1c       	adc	r14, r14
    1064:	ff 1c       	adc	r15, r15
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	d8 22       	and	r13, r24
    106a:	ee 24       	eor	r14, r14
    106c:	ff 24       	eor	r15, r15
		return LD_DWORD(p) & 0x0FFFFFFF;
    106e:	fe 01       	movw	r30, r28
    1070:	ec 0d       	add	r30, r12
    1072:	fd 1d       	adc	r31, r13
    1074:	06 a5       	ldd	r16, Z+46	; 0x2e
    1076:	17 a5       	ldd	r17, Z+47	; 0x2f
    1078:	20 a9       	ldd	r18, Z+48	; 0x30
    107a:	31 a9       	ldd	r19, Z+49	; 0x31
    107c:	3f 70       	andi	r19, 0x0F	; 15
    107e:	1e c0       	rjmp	.+60     	; 0x10bc <get_fat+0x1aa>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
    1080:	01 e0       	ldi	r16, 0x01	; 1
    1082:	10 e0       	ldi	r17, 0x00	; 0
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	19 c0       	rjmp	.+50     	; 0x10bc <get_fat+0x1aa>
    108a:	01 e0       	ldi	r16, 0x01	; 1
    108c:	10 e0       	ldi	r17, 0x00	; 0
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	14 c0       	rjmp	.+40     	; 0x10bc <get_fat+0x1aa>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;

	default:
		return 1;
    1094:	01 e0       	ldi	r16, 0x01	; 1
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	0f c0       	rjmp	.+30     	; 0x10bc <get_fat+0x1aa>
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    109e:	0f ef       	ldi	r16, 0xFF	; 255
    10a0:	1f ef       	ldi	r17, 0xFF	; 255
    10a2:	98 01       	movw	r18, r16
    10a4:	0b c0       	rjmp	.+22     	; 0x10bc <get_fat+0x1aa>
    10a6:	0f ef       	ldi	r16, 0xFF	; 255
    10a8:	1f ef       	ldi	r17, 0xFF	; 255
    10aa:	98 01       	movw	r18, r16
    10ac:	07 c0       	rjmp	.+14     	; 0x10bc <get_fat+0x1aa>
    10ae:	0f ef       	ldi	r16, 0xFF	; 255
    10b0:	1f ef       	ldi	r17, 0xFF	; 255
    10b2:	98 01       	movw	r18, r16
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <get_fat+0x1aa>
    10b6:	0f ef       	ldi	r16, 0xFF	; 255
    10b8:	1f ef       	ldi	r17, 0xFF	; 255
    10ba:	98 01       	movw	r18, r16
}
    10bc:	60 2f       	mov	r22, r16
    10be:	71 2f       	mov	r23, r17
    10c0:	82 2f       	mov	r24, r18
    10c2:	93 2f       	mov	r25, r19
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	08 95       	ret

000010d8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
    10d8:	af 92       	push	r10
    10da:	bf 92       	push	r11
    10dc:	cf 92       	push	r12
    10de:	df 92       	push	r13
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	ec 01       	movw	r28, r24
    10ee:	8b 01       	movw	r16, r22
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
    10f0:	7d 83       	std	Y+5, r23	; 0x05
    10f2:	6c 83       	std	Y+4, r22	; 0x04
	clst = dp->sclust;		/* Table start cluster (0:root) */
    10f4:	ce 80       	ldd	r12, Y+6	; 0x06
    10f6:	df 80       	ldd	r13, Y+7	; 0x07
    10f8:	e8 84       	ldd	r14, Y+8	; 0x08
    10fa:	f9 84       	ldd	r15, Y+9	; 0x09
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	c8 16       	cp	r12, r24
    1100:	d1 04       	cpc	r13, r1
    1102:	e1 04       	cpc	r14, r1
    1104:	f1 04       	cpc	r15, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <dir_sdi+0x32>
    1108:	8c c0       	rjmp	.+280    	; 0x1222 <dir_sdi+0x14a>
    110a:	e8 81       	ld	r30, Y
    110c:	f9 81       	ldd	r31, Y+1	; 0x01
    110e:	82 89       	ldd	r24, Z+18	; 0x12
    1110:	93 89       	ldd	r25, Z+19	; 0x13
    1112:	a4 89       	ldd	r26, Z+20	; 0x14
    1114:	b5 89       	ldd	r27, Z+21	; 0x15
    1116:	c8 16       	cp	r12, r24
    1118:	d9 06       	cpc	r13, r25
    111a:	ea 06       	cpc	r14, r26
    111c:	fb 06       	cpc	r15, r27
    111e:	08 f0       	brcs	.+2      	; 0x1122 <dir_sdi+0x4a>
    1120:	82 c0       	rjmp	.+260    	; 0x1226 <dir_sdi+0x14e>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1122:	c1 14       	cp	r12, r1
    1124:	d1 04       	cpc	r13, r1
    1126:	e1 04       	cpc	r14, r1
    1128:	f1 04       	cpc	r15, r1
    112a:	c1 f4       	brne	.+48     	; 0x115c <dir_sdi+0x84>
    112c:	80 81       	ld	r24, Z
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	41 f4       	brne	.+16     	; 0x1142 <dir_sdi+0x6a>
		clst = dp->fs->dirbase;
    1132:	82 a1       	ldd	r24, Z+34	; 0x22
    1134:	93 a1       	ldd	r25, Z+35	; 0x23
    1136:	a4 a1       	ldd	r26, Z+36	; 0x24
    1138:	b5 a1       	ldd	r27, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	a1 05       	cpc	r26, r1
    113e:	b1 05       	cpc	r27, r1
    1140:	59 f4       	brne	.+22     	; 0x1158 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
    1142:	80 85       	ldd	r24, Z+8	; 0x08
    1144:	91 85       	ldd	r25, Z+9	; 0x09
    1146:	08 17       	cp	r16, r24
    1148:	19 07       	cpc	r17, r25
    114a:	08 f0       	brcs	.+2      	; 0x114e <dir_sdi+0x76>
    114c:	6e c0       	rjmp	.+220    	; 0x122a <dir_sdi+0x152>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
    114e:	62 a1       	ldd	r22, Z+34	; 0x22
    1150:	73 a1       	ldd	r23, Z+35	; 0x23
    1152:	84 a1       	ldd	r24, Z+36	; 0x24
    1154:	95 a1       	ldd	r25, Z+37	; 0x25
    1156:	37 c0       	rjmp	.+110    	; 0x11c6 <dir_sdi+0xee>
	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;
    1158:	6c 01       	movw	r12, r24
    115a:	7d 01       	movw	r14, r26
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
    115c:	a2 80       	ldd	r10, Z+2	; 0x02
    115e:	80 e1       	ldi	r24, 0x10	; 16
    1160:	a8 9e       	mul	r10, r24
    1162:	50 01       	movw	r10, r0
    1164:	11 24       	eor	r1, r1
		while (idx >= ic) {	/* Follow cluster chain */
    1166:	0a 15       	cp	r16, r10
    1168:	1b 05       	cpc	r17, r11
    116a:	38 f1       	brcs	.+78     	; 0x11ba <dir_sdi+0xe2>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    116c:	b7 01       	movw	r22, r14
    116e:	a6 01       	movw	r20, r12
    1170:	88 81       	ld	r24, Y
    1172:	99 81       	ldd	r25, Y+1	; 0x01
    1174:	0e 94 89 07 	call	0xf12	; 0xf12 <get_fat>
    1178:	6b 01       	movw	r12, r22
    117a:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	c8 16       	cp	r12, r24
    1180:	d8 06       	cpc	r13, r24
    1182:	e8 06       	cpc	r14, r24
    1184:	f8 06       	cpc	r15, r24
    1186:	09 f4       	brne	.+2      	; 0x118a <dir_sdi+0xb2>
    1188:	52 c0       	rjmp	.+164    	; 0x122e <dir_sdi+0x156>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	c8 16       	cp	r12, r24
    118e:	d1 04       	cpc	r13, r1
    1190:	e1 04       	cpc	r14, r1
    1192:	f1 04       	cpc	r15, r1
    1194:	08 f4       	brcc	.+2      	; 0x1198 <dir_sdi+0xc0>
    1196:	4d c0       	rjmp	.+154    	; 0x1232 <dir_sdi+0x15a>
    1198:	e8 81       	ld	r30, Y
    119a:	f9 81       	ldd	r31, Y+1	; 0x01
    119c:	82 89       	ldd	r24, Z+18	; 0x12
    119e:	93 89       	ldd	r25, Z+19	; 0x13
    11a0:	a4 89       	ldd	r26, Z+20	; 0x14
    11a2:	b5 89       	ldd	r27, Z+21	; 0x15
    11a4:	c8 16       	cp	r12, r24
    11a6:	d9 06       	cpc	r13, r25
    11a8:	ea 06       	cpc	r14, r26
    11aa:	fb 06       	cpc	r15, r27
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <dir_sdi+0xd8>
    11ae:	43 c0       	rjmp	.+134    	; 0x1236 <dir_sdi+0x15e>
				return FR_INT_ERR;
			idx -= ic;
    11b0:	0a 19       	sub	r16, r10
    11b2:	1b 09       	sbc	r17, r11
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    11b4:	0a 15       	cp	r16, r10
    11b6:	1b 05       	cpc	r17, r11
    11b8:	c8 f6       	brcc	.-78     	; 0x116c <dir_sdi+0x94>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
    11ba:	b7 01       	movw	r22, r14
    11bc:	a6 01       	movw	r20, r12
    11be:	88 81       	ld	r24, Y
    11c0:	99 81       	ldd	r25, Y+1	; 0x01
    11c2:	0e 94 53 07 	call	0xea6	; 0xea6 <clust2sect>
	}
	dp->clust = clst;	/* Current cluster# */
    11c6:	ca 86       	std	Y+10, r12	; 0x0a
    11c8:	db 86       	std	Y+11, r13	; 0x0b
    11ca:	ec 86       	std	Y+12, r14	; 0x0c
    11cc:	fd 86       	std	Y+13, r15	; 0x0d
	if (!sect) return FR_INT_ERR;
    11ce:	61 15       	cp	r22, r1
    11d0:	71 05       	cpc	r23, r1
    11d2:	81 05       	cpc	r24, r1
    11d4:	91 05       	cpc	r25, r1
    11d6:	89 f1       	breq	.+98     	; 0x123a <dir_sdi+0x162>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
    11d8:	98 01       	movw	r18, r16
    11da:	32 95       	swap	r19
    11dc:	22 95       	swap	r18
    11de:	2f 70       	andi	r18, 0x0F	; 15
    11e0:	23 27       	eor	r18, r19
    11e2:	3f 70       	andi	r19, 0x0F	; 15
    11e4:	23 27       	eor	r18, r19
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	82 0f       	add	r24, r18
    11ec:	93 1f       	adc	r25, r19
    11ee:	a1 1d       	adc	r26, r1
    11f0:	b1 1d       	adc	r27, r1
    11f2:	8e 87       	std	Y+14, r24	; 0x0e
    11f4:	9f 87       	std	Y+15, r25	; 0x0f
    11f6:	a8 8b       	std	Y+16, r26	; 0x10
    11f8:	b9 8b       	std	Y+17, r27	; 0x11
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    11fa:	0f 70       	andi	r16, 0x0F	; 15
    11fc:	11 27       	eor	r17, r17
    11fe:	c8 01       	movw	r24, r16
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	82 95       	swap	r24
    1206:	92 95       	swap	r25
    1208:	90 7f       	andi	r25, 0xF0	; 240
    120a:	98 27       	eor	r25, r24
    120c:	80 7f       	andi	r24, 0xF0	; 240
    120e:	98 27       	eor	r25, r24
    1210:	8e 96       	adiw	r24, 0x2e	; 46
    1212:	28 81       	ld	r18, Y
    1214:	39 81       	ldd	r19, Y+1	; 0x01
    1216:	82 0f       	add	r24, r18
    1218:	93 1f       	adc	r25, r19
    121a:	9b 8b       	std	Y+19, r25	; 0x13
    121c:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	0d c0       	rjmp	.+26     	; 0x123c <dir_sdi+0x164>


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	0b c0       	rjmp	.+22     	; 0x123c <dir_sdi+0x164>
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	09 c0       	rjmp	.+18     	; 0x123c <dir_sdi+0x164>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	07 c0       	rjmp	.+14     	; 0x123c <dir_sdi+0x164>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	05 c0       	rjmp	.+10     	; 0x123c <dir_sdi+0x164>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	03 c0       	rjmp	.+6      	; 0x123c <dir_sdi+0x164>
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	01 c0       	rjmp	.+2      	; 0x123c <dir_sdi+0x164>
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
    123a:	82 e0       	ldi	r24, 0x02	; 2
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;
}
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	ef 90       	pop	r14
    1248:	df 90       	pop	r13
    124a:	cf 90       	pop	r12
    124c:	bf 90       	pop	r11
    124e:	af 90       	pop	r10
    1250:	08 95       	ret

00001252 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1252:	4f 92       	push	r4
    1254:	5f 92       	push	r5
    1256:	6f 92       	push	r6
    1258:	7f 92       	push	r7
    125a:	8f 92       	push	r8
    125c:	9f 92       	push	r9
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	ec 01       	movw	r28, r24
    1274:	2a 01       	movw	r4, r20
    1276:	3b 01       	movw	r6, r22
    1278:	68 01       	movw	r12, r16
    127a:	79 01       	movw	r14, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    127c:	52 e0       	ldi	r21, 0x02	; 2
    127e:	45 16       	cp	r4, r21
    1280:	51 04       	cpc	r5, r1
    1282:	61 04       	cpc	r6, r1
    1284:	71 04       	cpc	r7, r1
    1286:	08 f4       	brcc	.+2      	; 0x128a <put_fat+0x38>
    1288:	d7 c0       	rjmp	.+430    	; 0x1438 <put_fat+0x1e6>
    128a:	8a 89       	ldd	r24, Y+18	; 0x12
    128c:	9b 89       	ldd	r25, Y+19	; 0x13
    128e:	ac 89       	ldd	r26, Y+20	; 0x14
    1290:	bd 89       	ldd	r27, Y+21	; 0x15
    1292:	48 16       	cp	r4, r24
    1294:	59 06       	cpc	r5, r25
    1296:	6a 06       	cpc	r6, r26
    1298:	7b 06       	cpc	r7, r27
    129a:	08 f0       	brcs	.+2      	; 0x129e <put_fat+0x4c>
    129c:	cf c0       	rjmp	.+414    	; 0x143c <put_fat+0x1ea>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    129e:	88 81       	ld	r24, Y
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <put_fat+0x54>
    12a4:	69 c0       	rjmp	.+210    	; 0x1378 <put_fat+0x126>
    12a6:	83 30       	cpi	r24, 0x03	; 3
    12a8:	09 f4       	brne	.+2      	; 0x12ac <put_fat+0x5a>
    12aa:	88 c0       	rjmp	.+272    	; 0x13bc <put_fat+0x16a>
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <put_fat+0x60>
    12b0:	bf c0       	rjmp	.+382    	; 0x1430 <put_fat+0x1de>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    12b2:	82 01       	movw	r16, r4
    12b4:	16 95       	lsr	r17
    12b6:	07 95       	ror	r16
    12b8:	04 0d       	add	r16, r4
    12ba:	15 1d       	adc	r17, r5
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    12bc:	c8 01       	movw	r24, r16
    12be:	89 2f       	mov	r24, r25
    12c0:	99 27       	eor	r25, r25
    12c2:	86 95       	lsr	r24
    12c4:	4e 8d       	ldd	r20, Y+30	; 0x1e
    12c6:	5f 8d       	ldd	r21, Y+31	; 0x1f
    12c8:	68 a1       	ldd	r22, Y+32	; 0x20
    12ca:	79 a1       	ldd	r23, Y+33	; 0x21
    12cc:	48 0f       	add	r20, r24
    12ce:	59 1f       	adc	r21, r25
    12d0:	61 1d       	adc	r22, r1
    12d2:	71 1d       	adc	r23, r1
    12d4:	ce 01       	movw	r24, r28
    12d6:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
			if (res != FR_OK) break;
    12da:	81 11       	cpse	r24, r1
    12dc:	aa c0       	rjmp	.+340    	; 0x1432 <put_fat+0x1e0>
			p = &fs->win[bc % SS(fs)];
    12de:	c8 01       	movw	r24, r16
    12e0:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    12e2:	81 2c       	mov	r8, r1
    12e4:	91 2c       	mov	r9, r1
    12e6:	54 01       	movw	r10, r8
    12e8:	83 94       	inc	r8
    12ea:	84 20       	and	r8, r4
    12ec:	95 20       	and	r9, r5
    12ee:	a6 20       	and	r10, r6
    12f0:	b7 20       	and	r11, r7
    12f2:	40 fe       	sbrs	r4, 0
    12f4:	0b c0       	rjmp	.+22     	; 0x130c <put_fat+0xba>
    12f6:	fe 01       	movw	r30, r28
    12f8:	e8 0f       	add	r30, r24
    12fa:	f9 1f       	adc	r31, r25
    12fc:	46 a5       	ldd	r20, Z+46	; 0x2e
    12fe:	4f 70       	andi	r20, 0x0F	; 15
    1300:	50 e1       	ldi	r21, 0x10	; 16
    1302:	c5 9e       	mul	r12, r21
    1304:	90 01       	movw	r18, r0
    1306:	11 24       	eor	r1, r1
    1308:	24 2b       	or	r18, r20
    130a:	01 c0       	rjmp	.+2      	; 0x130e <put_fat+0xbc>
    130c:	2c 2d       	mov	r18, r12
    130e:	fe 01       	movw	r30, r28
    1310:	e8 0f       	add	r30, r24
    1312:	f9 1f       	adc	r31, r25
    1314:	26 a7       	std	Z+46, r18	; 0x2e
			bc++;
    1316:	0f 5f       	subi	r16, 0xFF	; 255
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    131e:	c8 01       	movw	r24, r16
    1320:	89 2f       	mov	r24, r25
    1322:	99 27       	eor	r25, r25
    1324:	86 95       	lsr	r24
    1326:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1328:	5f 8d       	ldd	r21, Y+31	; 0x1f
    132a:	68 a1       	ldd	r22, Y+32	; 0x20
    132c:	79 a1       	ldd	r23, Y+33	; 0x21
    132e:	48 0f       	add	r20, r24
    1330:	59 1f       	adc	r21, r25
    1332:	61 1d       	adc	r22, r1
    1334:	71 1d       	adc	r23, r1
    1336:	ce 01       	movw	r24, r28
    1338:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
			if (res != FR_OK) break;
    133c:	81 11       	cpse	r24, r1
    133e:	79 c0       	rjmp	.+242    	; 0x1432 <put_fat+0x1e0>
			p = &fs->win[bc % SS(fs)];
    1340:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1342:	89 28       	or	r8, r9
    1344:	8a 28       	or	r8, r10
    1346:	8b 28       	or	r8, r11
    1348:	49 f0       	breq	.+18     	; 0x135c <put_fat+0x10a>
    134a:	68 94       	set
    134c:	13 f8       	bld	r1, 3
    134e:	f6 94       	lsr	r15
    1350:	e7 94       	ror	r14
    1352:	d7 94       	ror	r13
    1354:	c7 94       	ror	r12
    1356:	16 94       	lsr	r1
    1358:	d1 f7       	brne	.-12     	; 0x134e <put_fat+0xfc>
    135a:	09 c0       	rjmp	.+18     	; 0x136e <put_fat+0x11c>
    135c:	fe 01       	movw	r30, r28
    135e:	e0 0f       	add	r30, r16
    1360:	f1 1f       	adc	r31, r17
    1362:	96 a5       	ldd	r25, Z+46	; 0x2e
    1364:	90 7f       	andi	r25, 0xF0	; 240
    1366:	2d 2d       	mov	r18, r13
    1368:	2f 70       	andi	r18, 0x0F	; 15
    136a:	c2 2e       	mov	r12, r18
    136c:	c9 2a       	or	r12, r25
    136e:	fe 01       	movw	r30, r28
    1370:	e0 0f       	add	r30, r16
    1372:	f1 1f       	adc	r31, r17
    1374:	c6 a6       	std	Z+46, r12	; 0x2e
			break;
    1376:	5d c0       	rjmp	.+186    	; 0x1432 <put_fat+0x1e0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1378:	77 27       	eor	r23, r23
    137a:	67 2d       	mov	r22, r7
    137c:	56 2d       	mov	r21, r6
    137e:	45 2d       	mov	r20, r5
    1380:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1382:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1384:	a8 a1       	ldd	r26, Y+32	; 0x20
    1386:	b9 a1       	ldd	r27, Y+33	; 0x21
    1388:	48 0f       	add	r20, r24
    138a:	59 1f       	adc	r21, r25
    138c:	6a 1f       	adc	r22, r26
    138e:	7b 1f       	adc	r23, r27
    1390:	ce 01       	movw	r24, r28
    1392:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
			if (res != FR_OK) break;
    1396:	81 11       	cpse	r24, r1
    1398:	4c c0       	rjmp	.+152    	; 0x1432 <put_fat+0x1e0>
			p = &fs->win[clst * 2 % SS(fs)];
    139a:	44 0c       	add	r4, r4
    139c:	55 1c       	adc	r5, r5
    139e:	66 1c       	adc	r6, r6
    13a0:	77 1c       	adc	r7, r7
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	59 22       	and	r5, r25
    13a6:	66 24       	eor	r6, r6
    13a8:	77 24       	eor	r7, r7
    13aa:	5e e2       	ldi	r21, 0x2E	; 46
    13ac:	45 0e       	add	r4, r21
    13ae:	51 1c       	adc	r5, r1
			ST_WORD(p, (WORD)val);
    13b0:	fe 01       	movw	r30, r28
    13b2:	e4 0d       	add	r30, r4
    13b4:	f5 1d       	adc	r31, r5
    13b6:	d1 82       	std	Z+1, r13	; 0x01
    13b8:	c0 82       	st	Z, r12
			break;
    13ba:	3b c0       	rjmp	.+118    	; 0x1432 <put_fat+0x1e0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    13bc:	b3 01       	movw	r22, r6
    13be:	a2 01       	movw	r20, r4
    13c0:	68 94       	set
    13c2:	16 f8       	bld	r1, 6
    13c4:	76 95       	lsr	r23
    13c6:	67 95       	ror	r22
    13c8:	57 95       	ror	r21
    13ca:	47 95       	ror	r20
    13cc:	16 94       	lsr	r1
    13ce:	d1 f7       	brne	.-12     	; 0x13c4 <put_fat+0x172>
    13d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13d4:	a8 a1       	ldd	r26, Y+32	; 0x20
    13d6:	b9 a1       	ldd	r27, Y+33	; 0x21
    13d8:	48 0f       	add	r20, r24
    13da:	59 1f       	adc	r21, r25
    13dc:	6a 1f       	adc	r22, r26
    13de:	7b 1f       	adc	r23, r27
    13e0:	ce 01       	movw	r24, r28
    13e2:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
			if (res != FR_OK) break;
    13e6:	81 11       	cpse	r24, r1
    13e8:	24 c0       	rjmp	.+72     	; 0x1432 <put_fat+0x1e0>
			p = &fs->win[clst * 4 % SS(fs)];
    13ea:	44 0c       	add	r4, r4
    13ec:	55 1c       	adc	r5, r5
    13ee:	66 1c       	adc	r6, r6
    13f0:	77 1c       	adc	r7, r7
    13f2:	44 0c       	add	r4, r4
    13f4:	55 1c       	adc	r5, r5
    13f6:	66 1c       	adc	r6, r6
    13f8:	77 1c       	adc	r7, r7
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	59 22       	and	r5, r25
    13fe:	66 24       	eor	r6, r6
    1400:	77 24       	eor	r7, r7
    1402:	5e e2       	ldi	r21, 0x2E	; 46
    1404:	45 0e       	add	r4, r21
    1406:	51 1c       	adc	r5, r1
    1408:	fe 01       	movw	r30, r28
    140a:	e4 0d       	add	r30, r4
    140c:	f5 1d       	adc	r31, r5
			val |= LD_DWORD(p) & 0xF0000000;
    140e:	40 81       	ld	r20, Z
    1410:	51 81       	ldd	r21, Z+1	; 0x01
    1412:	62 81       	ldd	r22, Z+2	; 0x02
    1414:	73 81       	ldd	r23, Z+3	; 0x03
    1416:	44 27       	eor	r20, r20
    1418:	55 27       	eor	r21, r21
    141a:	66 27       	eor	r22, r22
    141c:	70 7f       	andi	r23, 0xF0	; 240
    141e:	c4 2a       	or	r12, r20
    1420:	d5 2a       	or	r13, r21
    1422:	e6 2a       	or	r14, r22
    1424:	f7 2a       	or	r15, r23
			ST_DWORD(p, val);
    1426:	c0 82       	st	Z, r12
    1428:	d1 82       	std	Z+1, r13	; 0x01
    142a:	e2 82       	std	Z+2, r14	; 0x02
    142c:	f3 82       	std	Z+3, r15	; 0x03
			break;
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <put_fat+0x1e0>

		default :
			res = FR_INT_ERR;
    1430:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	9c 83       	std	Y+4, r25	; 0x04
    1436:	03 c0       	rjmp	.+6      	; 0x143e <put_fat+0x1ec>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	01 c0       	rjmp	.+2      	; 0x143e <put_fat+0x1ec>
    143c:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
	}

	return res;
}
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	df 90       	pop	r13
    144c:	cf 90       	pop	r12
    144e:	bf 90       	pop	r11
    1450:	af 90       	pop	r10
    1452:	9f 90       	pop	r9
    1454:	8f 90       	pop	r8
    1456:	7f 90       	pop	r7
    1458:	6f 90       	pop	r6
    145a:	5f 90       	pop	r5
    145c:	4f 90       	pop	r4
    145e:	08 95       	ret

00001460 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1460:	2f 92       	push	r2
    1462:	3f 92       	push	r3
    1464:	4f 92       	push	r4
    1466:	5f 92       	push	r5
    1468:	6f 92       	push	r6
    146a:	7f 92       	push	r7
    146c:	8f 92       	push	r8
    146e:	9f 92       	push	r9
    1470:	af 92       	push	r10
    1472:	bf 92       	push	r11
    1474:	cf 92       	push	r12
    1476:	df 92       	push	r13
    1478:	ef 92       	push	r14
    147a:	ff 92       	push	r15
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	00 d0       	rcall	.+0      	; 0x1486 <create_chain+0x26>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <create_chain+0x28>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	1c 01       	movw	r2, r24
    148e:	49 83       	std	Y+1, r20	; 0x01
    1490:	5a 83       	std	Y+2, r21	; 0x02
    1492:	6b 83       	std	Y+3, r22	; 0x03
    1494:	7c 83       	std	Y+4, r23	; 0x04
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1496:	45 2b       	or	r20, r21
    1498:	46 2b       	or	r20, r22
    149a:	47 2b       	or	r20, r23
    149c:	c1 f4       	brne	.+48     	; 0x14ce <create_chain+0x6e>
		scl = fs->last_clust;			/* Get suggested start point */
    149e:	dc 01       	movw	r26, r24
    14a0:	1a 96       	adiw	r26, 0x0a	; 10
    14a2:	8d 90       	ld	r8, X+
    14a4:	9d 90       	ld	r9, X+
    14a6:	ad 90       	ld	r10, X+
    14a8:	bc 90       	ld	r11, X
    14aa:	1d 97       	sbiw	r26, 0x0d	; 13
		if (!scl || scl >= fs->n_fatent) scl = 1;
    14ac:	81 14       	cp	r8, r1
    14ae:	91 04       	cpc	r9, r1
    14b0:	a1 04       	cpc	r10, r1
    14b2:	b1 04       	cpc	r11, r1
    14b4:	89 f1       	breq	.+98     	; 0x1518 <create_chain+0xb8>
    14b6:	52 96       	adiw	r26, 0x12	; 18
    14b8:	8d 91       	ld	r24, X+
    14ba:	9d 91       	ld	r25, X+
    14bc:	0d 90       	ld	r0, X+
    14be:	bc 91       	ld	r27, X
    14c0:	a0 2d       	mov	r26, r0
    14c2:	88 16       	cp	r8, r24
    14c4:	99 06       	cpc	r9, r25
    14c6:	aa 06       	cpc	r10, r26
    14c8:	bb 06       	cpc	r11, r27
    14ca:	58 f5       	brcc	.+86     	; 0x1522 <create_chain+0xc2>
    14cc:	2e c0       	rjmp	.+92     	; 0x152a <create_chain+0xca>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    14ce:	49 81       	ldd	r20, Y+1	; 0x01
    14d0:	5a 81       	ldd	r21, Y+2	; 0x02
    14d2:	6b 81       	ldd	r22, Y+3	; 0x03
    14d4:	7c 81       	ldd	r23, Y+4	; 0x04
    14d6:	0e 94 89 07 	call	0xf12	; 0xf12 <get_fat>
    14da:	8b 01       	movw	r16, r22
    14dc:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;			/* Invalid value */
    14de:	62 30       	cpi	r22, 0x02	; 2
    14e0:	71 05       	cpc	r23, r1
    14e2:	81 05       	cpc	r24, r1
    14e4:	91 05       	cpc	r25, r1
    14e6:	08 f4       	brcc	.+2      	; 0x14ea <create_chain+0x8a>
    14e8:	af c0       	rjmp	.+350    	; 0x1648 <create_chain+0x1e8>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    14ea:	6f 3f       	cpi	r22, 0xFF	; 255
    14ec:	bf ef       	ldi	r27, 0xFF	; 255
    14ee:	7b 07       	cpc	r23, r27
    14f0:	8b 07       	cpc	r24, r27
    14f2:	9b 07       	cpc	r25, r27
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <create_chain+0x98>
    14f6:	bc c0       	rjmp	.+376    	; 0x1670 <create_chain+0x210>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    14f8:	f1 01       	movw	r30, r2
    14fa:	82 89       	ldd	r24, Z+18	; 0x12
    14fc:	93 89       	ldd	r25, Z+19	; 0x13
    14fe:	a4 89       	ldd	r26, Z+20	; 0x14
    1500:	b5 89       	ldd	r27, Z+21	; 0x15
    1502:	08 17       	cp	r16, r24
    1504:	19 07       	cpc	r17, r25
    1506:	2a 07       	cpc	r18, r26
    1508:	3b 07       	cpc	r19, r27
    150a:	08 f4       	brcc	.+2      	; 0x150e <create_chain+0xae>
    150c:	b1 c0       	rjmp	.+354    	; 0x1670 <create_chain+0x210>
		scl = clst;
    150e:	89 80       	ldd	r8, Y+1	; 0x01
    1510:	9a 80       	ldd	r9, Y+2	; 0x02
    1512:	ab 80       	ldd	r10, Y+3	; 0x03
    1514:	bc 80       	ldd	r11, Y+4	; 0x04
    1516:	09 c0       	rjmp	.+18     	; 0x152a <create_chain+0xca>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1518:	81 2c       	mov	r8, r1
    151a:	91 2c       	mov	r9, r1
    151c:	54 01       	movw	r10, r8
    151e:	83 94       	inc	r8
    1520:	04 c0       	rjmp	.+8      	; 0x152a <create_chain+0xca>
    1522:	81 2c       	mov	r8, r1
    1524:	91 2c       	mov	r9, r1
    1526:	54 01       	movw	r10, r8
    1528:	83 94       	inc	r8
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    152a:	75 01       	movw	r14, r10
    152c:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
    152e:	41 2c       	mov	r4, r1
    1530:	51 2c       	mov	r5, r1
    1532:	32 01       	movw	r6, r4
    1534:	68 94       	set
    1536:	41 f8       	bld	r4, 1
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1538:	ff ef       	ldi	r31, 0xFF	; 255
    153a:	cf 1a       	sub	r12, r31
    153c:	df 0a       	sbc	r13, r31
    153e:	ef 0a       	sbc	r14, r31
    1540:	ff 0a       	sbc	r15, r31
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    1542:	f1 01       	movw	r30, r2
    1544:	82 89       	ldd	r24, Z+18	; 0x12
    1546:	93 89       	ldd	r25, Z+19	; 0x13
    1548:	a4 89       	ldd	r26, Z+20	; 0x14
    154a:	b5 89       	ldd	r27, Z+21	; 0x15
    154c:	c8 16       	cp	r12, r24
    154e:	d9 06       	cpc	r13, r25
    1550:	ea 06       	cpc	r14, r26
    1552:	fb 06       	cpc	r15, r27
    1554:	48 f0       	brcs	.+18     	; 0x1568 <create_chain+0x108>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1556:	f2 e0       	ldi	r31, 0x02	; 2
    1558:	8f 16       	cp	r8, r31
    155a:	91 04       	cpc	r9, r1
    155c:	a1 04       	cpc	r10, r1
    155e:	b1 04       	cpc	r11, r1
    1560:	08 f4       	brcc	.+2      	; 0x1564 <create_chain+0x104>
    1562:	77 c0       	rjmp	.+238    	; 0x1652 <create_chain+0x1f2>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
    1564:	73 01       	movw	r14, r6
    1566:	62 01       	movw	r12, r4
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1568:	b7 01       	movw	r22, r14
    156a:	a6 01       	movw	r20, r12
    156c:	c1 01       	movw	r24, r2
    156e:	0e 94 89 07 	call	0xf12	; 0xf12 <get_fat>
    1572:	8b 01       	movw	r16, r22
    1574:	9c 01       	movw	r18, r24
		if (cs == 0) break;				/* Found a free cluster */
    1576:	61 15       	cp	r22, r1
    1578:	71 05       	cpc	r23, r1
    157a:	81 05       	cpc	r24, r1
    157c:	91 05       	cpc	r25, r1
    157e:	99 f0       	breq	.+38     	; 0x15a6 <create_chain+0x146>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1580:	0f 3f       	cpi	r16, 0xFF	; 255
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	18 07       	cpc	r17, r24
    1586:	28 07       	cpc	r18, r24
    1588:	38 07       	cpc	r19, r24
    158a:	09 f4       	brne	.+2      	; 0x158e <create_chain+0x12e>
    158c:	71 c0       	rjmp	.+226    	; 0x1670 <create_chain+0x210>
    158e:	01 30       	cpi	r16, 0x01	; 1
    1590:	11 05       	cpc	r17, r1
    1592:	21 05       	cpc	r18, r1
    1594:	31 05       	cpc	r19, r1
    1596:	09 f4       	brne	.+2      	; 0x159a <create_chain+0x13a>
    1598:	6b c0       	rjmp	.+214    	; 0x1670 <create_chain+0x210>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    159a:	c8 14       	cp	r12, r8
    159c:	d9 04       	cpc	r13, r9
    159e:	ea 04       	cpc	r14, r10
    15a0:	fb 04       	cpc	r15, r11
    15a2:	51 f6       	brne	.-108    	; 0x1538 <create_chain+0xd8>
    15a4:	5a c0       	rjmp	.+180    	; 0x165a <create_chain+0x1fa>
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    15a6:	8c 2c       	mov	r8, r12
    15a8:	9d 2c       	mov	r9, r13
    15aa:	ae 2c       	mov	r10, r14
    15ac:	bf 2c       	mov	r11, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    15ae:	0f ef       	ldi	r16, 0xFF	; 255
    15b0:	1f ef       	ldi	r17, 0xFF	; 255
    15b2:	2f ef       	ldi	r18, 0xFF	; 255
    15b4:	3f e0       	ldi	r19, 0x0F	; 15
    15b6:	4c 2d       	mov	r20, r12
    15b8:	5d 2d       	mov	r21, r13
    15ba:	6e 2d       	mov	r22, r14
    15bc:	7f 2d       	mov	r23, r15
    15be:	c1 01       	movw	r24, r2
    15c0:	0e 94 29 09 	call	0x1252	; 0x1252 <put_fat>
	if (res == FR_OK && clst != 0) {
    15c4:	81 11       	cpse	r24, r1
    15c6:	3a c0       	rjmp	.+116    	; 0x163c <create_chain+0x1dc>
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	ab 81       	ldd	r26, Y+3	; 0x03
    15ce:	bc 81       	ldd	r27, Y+4	; 0x04
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	a1 05       	cpc	r26, r1
    15d4:	b1 05       	cpc	r27, r1
    15d6:	59 f0       	breq	.+22     	; 0x15ee <create_chain+0x18e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    15d8:	0c 2d       	mov	r16, r12
    15da:	1d 2d       	mov	r17, r13
    15dc:	2e 2d       	mov	r18, r14
    15de:	3f 2d       	mov	r19, r15
    15e0:	ac 01       	movw	r20, r24
    15e2:	bd 01       	movw	r22, r26
    15e4:	c1 01       	movw	r24, r2
    15e6:	0e 94 29 09 	call	0x1252	; 0x1252 <put_fat>
	}
	if (res == FR_OK) {
    15ea:	81 11       	cpse	r24, r1
    15ec:	27 c0       	rjmp	.+78     	; 0x163c <create_chain+0x1dc>
		fs->last_clust = ncl;			/* Update FSINFO */
    15ee:	d1 01       	movw	r26, r2
    15f0:	1a 96       	adiw	r26, 0x0a	; 10
    15f2:	8c 92       	st	X, r8
    15f4:	1a 97       	sbiw	r26, 0x0a	; 10
    15f6:	1b 96       	adiw	r26, 0x0b	; 11
    15f8:	9c 92       	st	X, r9
    15fa:	1b 97       	sbiw	r26, 0x0b	; 11
    15fc:	1c 96       	adiw	r26, 0x0c	; 12
    15fe:	ac 92       	st	X, r10
    1600:	1c 97       	sbiw	r26, 0x0c	; 12
    1602:	1d 96       	adiw	r26, 0x0d	; 13
    1604:	bc 92       	st	X, r11
    1606:	1d 97       	sbiw	r26, 0x0d	; 13
		if (fs->free_clust != 0xFFFFFFFF) {
    1608:	1e 96       	adiw	r26, 0x0e	; 14
    160a:	8d 91       	ld	r24, X+
    160c:	9d 91       	ld	r25, X+
    160e:	0d 90       	ld	r0, X+
    1610:	bc 91       	ld	r27, X
    1612:	a0 2d       	mov	r26, r0
    1614:	8f 3f       	cpi	r24, 0xFF	; 255
    1616:	ef ef       	ldi	r30, 0xFF	; 255
    1618:	9e 07       	cpc	r25, r30
    161a:	ae 07       	cpc	r26, r30
    161c:	be 07       	cpc	r27, r30
    161e:	09 f1       	breq	.+66     	; 0x1662 <create_chain+0x202>
			fs->free_clust--;
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	a1 09       	sbc	r26, r1
    1624:	b1 09       	sbc	r27, r1
    1626:	f1 01       	movw	r30, r2
    1628:	86 87       	std	Z+14, r24	; 0x0e
    162a:	97 87       	std	Z+15, r25	; 0x0f
    162c:	a0 8b       	std	Z+16, r26	; 0x10
    162e:	b1 8b       	std	Z+17, r27	; 0x11
			fs->fsi_flag |= 1;
    1630:	85 81       	ldd	r24, Z+5	; 0x05
    1632:	81 60       	ori	r24, 0x01	; 1
    1634:	85 83       	std	Z+5, r24	; 0x05
    1636:	97 01       	movw	r18, r14
    1638:	86 01       	movw	r16, r12
    163a:	1a c0       	rjmp	.+52     	; 0x1670 <create_chain+0x210>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	a1 f4       	brne	.+40     	; 0x1668 <create_chain+0x208>
    1640:	0f ef       	ldi	r16, 0xFF	; 255
    1642:	1f ef       	ldi	r17, 0xFF	; 255
    1644:	98 01       	movw	r18, r16
    1646:	14 c0       	rjmp	.+40     	; 0x1670 <create_chain+0x210>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
    1648:	01 e0       	ldi	r16, 0x01	; 1
    164a:	10 e0       	ldi	r17, 0x00	; 0
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	0f c0       	rjmp	.+30     	; 0x1670 <create_chain+0x210>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1652:	00 e0       	ldi	r16, 0x00	; 0
    1654:	10 e0       	ldi	r17, 0x00	; 0
    1656:	98 01       	movw	r18, r16
    1658:	0b c0       	rjmp	.+22     	; 0x1670 <create_chain+0x210>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    165a:	00 e0       	ldi	r16, 0x00	; 0
    165c:	10 e0       	ldi	r17, 0x00	; 0
    165e:	98 01       	movw	r18, r16
    1660:	07 c0       	rjmp	.+14     	; 0x1670 <create_chain+0x210>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    1662:	97 01       	movw	r18, r14
    1664:	86 01       	movw	r16, r12
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <create_chain+0x210>
			fs->free_clust--;
			fs->fsi_flag |= 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1668:	01 e0       	ldi	r16, 0x01	; 1
    166a:	10 e0       	ldi	r17, 0x00	; 0
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    1670:	60 2f       	mov	r22, r16
    1672:	71 2f       	mov	r23, r17
    1674:	82 2f       	mov	r24, r18
    1676:	93 2f       	mov	r25, r19
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	df 90       	pop	r13
    168e:	cf 90       	pop	r12
    1690:	bf 90       	pop	r11
    1692:	af 90       	pop	r10
    1694:	9f 90       	pop	r9
    1696:	8f 90       	pop	r8
    1698:	7f 90       	pop	r7
    169a:	6f 90       	pop	r6
    169c:	5f 90       	pop	r5
    169e:	4f 90       	pop	r4
    16a0:	3f 90       	pop	r3
    16a2:	2f 90       	pop	r2
    16a4:	08 95       	ret

000016a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    16a6:	7f 92       	push	r7
    16a8:	8f 92       	push	r8
    16aa:	9f 92       	push	r9
    16ac:	af 92       	push	r10
    16ae:	bf 92       	push	r11
    16b0:	cf 92       	push	r12
    16b2:	df 92       	push	r13
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	ec 01       	movw	r28, r24
    16c2:	7b 01       	movw	r14, r22
	DWORD clst;
	UINT i;


	i = dp->index + 1;
    16c4:	0c 81       	ldd	r16, Y+4	; 0x04
    16c6:	1d 81       	ldd	r17, Y+5	; 0x05
    16c8:	0f 5f       	subi	r16, 0xFF	; 255
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <dir_next+0x2a>
    16ce:	eb c0       	rjmp	.+470    	; 0x18a6 <dir_next+0x200>
    16d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    16d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    16d4:	a8 89       	ldd	r26, Y+16	; 0x10
    16d6:	b9 89       	ldd	r27, Y+17	; 0x11
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	a1 05       	cpc	r26, r1
    16dc:	b1 05       	cpc	r27, r1
    16de:	09 f4       	brne	.+2      	; 0x16e2 <dir_next+0x3c>
    16e0:	e4 c0       	rjmp	.+456    	; 0x18aa <dir_next+0x204>
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
    16e2:	0f 2e       	mov	r0, r31
    16e4:	ff e0       	ldi	r31, 0x0F	; 15
    16e6:	cf 2e       	mov	r12, r31
    16e8:	d1 2c       	mov	r13, r1
    16ea:	f0 2d       	mov	r31, r0
    16ec:	c0 22       	and	r12, r16
    16ee:	d1 22       	and	r13, r17
    16f0:	c1 14       	cp	r12, r1
    16f2:	d1 04       	cpc	r13, r1
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <dir_next+0x52>
    16f6:	c0 c0       	rjmp	.+384    	; 0x1878 <dir_next+0x1d2>
		dp->sect++;					/* Next sector */
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	a1 1d       	adc	r26, r1
    16fc:	b1 1d       	adc	r27, r1
    16fe:	8e 87       	std	Y+14, r24	; 0x0e
    1700:	9f 87       	std	Y+15, r25	; 0x0f
    1702:	a8 8b       	std	Y+16, r26	; 0x10
    1704:	b9 8b       	std	Y+17, r27	; 0x11

		if (!dp->clust) {		/* Static table */
    1706:	4a 85       	ldd	r20, Y+10	; 0x0a
    1708:	5b 85       	ldd	r21, Y+11	; 0x0b
    170a:	6c 85       	ldd	r22, Y+12	; 0x0c
    170c:	7d 85       	ldd	r23, Y+13	; 0x0d
    170e:	41 15       	cp	r20, r1
    1710:	51 05       	cpc	r21, r1
    1712:	61 05       	cpc	r22, r1
    1714:	71 05       	cpc	r23, r1
    1716:	49 f4       	brne	.+18     	; 0x172a <dir_next+0x84>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    1718:	e8 81       	ld	r30, Y
    171a:	f9 81       	ldd	r31, Y+1	; 0x01
    171c:	80 85       	ldd	r24, Z+8	; 0x08
    171e:	91 85       	ldd	r25, Z+9	; 0x09
    1720:	08 17       	cp	r16, r24
    1722:	19 07       	cpc	r17, r25
    1724:	08 f0       	brcs	.+2      	; 0x1728 <dir_next+0x82>
    1726:	c3 c0       	rjmp	.+390    	; 0x18ae <dir_next+0x208>
    1728:	a7 c0       	rjmp	.+334    	; 0x1878 <dir_next+0x1d2>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    172a:	e8 81       	ld	r30, Y
    172c:	f9 81       	ldd	r31, Y+1	; 0x01
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	98 01       	movw	r18, r16
    1736:	32 95       	swap	r19
    1738:	22 95       	swap	r18
    173a:	2f 70       	andi	r18, 0x0F	; 15
    173c:	23 27       	eor	r18, r19
    173e:	3f 70       	andi	r19, 0x0F	; 15
    1740:	23 27       	eor	r18, r19
    1742:	82 23       	and	r24, r18
    1744:	93 23       	and	r25, r19
    1746:	89 2b       	or	r24, r25
    1748:	09 f0       	breq	.+2      	; 0x174c <dir_next+0xa6>
    174a:	96 c0       	rjmp	.+300    	; 0x1878 <dir_next+0x1d2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    174c:	cf 01       	movw	r24, r30
    174e:	0e 94 89 07 	call	0xf12	; 0xf12 <get_fat>
    1752:	4b 01       	movw	r8, r22
    1754:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    1756:	82 e0       	ldi	r24, 0x02	; 2
    1758:	88 16       	cp	r8, r24
    175a:	91 04       	cpc	r9, r1
    175c:	a1 04       	cpc	r10, r1
    175e:	b1 04       	cpc	r11, r1
    1760:	08 f4       	brcc	.+2      	; 0x1764 <dir_next+0xbe>
    1762:	a7 c0       	rjmp	.+334    	; 0x18b2 <dir_next+0x20c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1764:	ef ef       	ldi	r30, 0xFF	; 255
    1766:	8e 16       	cp	r8, r30
    1768:	9e 06       	cpc	r9, r30
    176a:	ae 06       	cpc	r10, r30
    176c:	be 06       	cpc	r11, r30
    176e:	09 f4       	brne	.+2      	; 0x1772 <dir_next+0xcc>
    1770:	a2 c0       	rjmp	.+324    	; 0x18b6 <dir_next+0x210>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    1772:	e8 81       	ld	r30, Y
    1774:	f9 81       	ldd	r31, Y+1	; 0x01
    1776:	82 89       	ldd	r24, Z+18	; 0x12
    1778:	93 89       	ldd	r25, Z+19	; 0x13
    177a:	a4 89       	ldd	r26, Z+20	; 0x14
    177c:	b5 89       	ldd	r27, Z+21	; 0x15
    177e:	88 16       	cp	r8, r24
    1780:	99 06       	cpc	r9, r25
    1782:	aa 06       	cpc	r10, r26
    1784:	bb 06       	cpc	r11, r27
    1786:	08 f4       	brcc	.+2      	; 0x178a <dir_next+0xe4>
    1788:	69 c0       	rjmp	.+210    	; 0x185c <dir_next+0x1b6>
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    178a:	ef 28       	or	r14, r15
    178c:	09 f4       	brne	.+2      	; 0x1790 <dir_next+0xea>
    178e:	95 c0       	rjmp	.+298    	; 0x18ba <dir_next+0x214>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    1790:	4a 85       	ldd	r20, Y+10	; 0x0a
    1792:	5b 85       	ldd	r21, Y+11	; 0x0b
    1794:	6c 85       	ldd	r22, Y+12	; 0x0c
    1796:	7d 85       	ldd	r23, Y+13	; 0x0d
    1798:	cf 01       	movw	r24, r30
    179a:	0e 94 30 0a 	call	0x1460	; 0x1460 <create_chain>
    179e:	4b 01       	movw	r8, r22
    17a0:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    17a2:	61 15       	cp	r22, r1
    17a4:	71 05       	cpc	r23, r1
    17a6:	81 05       	cpc	r24, r1
    17a8:	91 05       	cpc	r25, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <dir_next+0x108>
    17ac:	88 c0       	rjmp	.+272    	; 0x18be <dir_next+0x218>
					if (clst == 1) return FR_INT_ERR;
    17ae:	61 30       	cpi	r22, 0x01	; 1
    17b0:	71 05       	cpc	r23, r1
    17b2:	81 05       	cpc	r24, r1
    17b4:	91 05       	cpc	r25, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <dir_next+0x114>
    17b8:	84 c0       	rjmp	.+264    	; 0x18c2 <dir_next+0x21c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    17ba:	8f ef       	ldi	r24, 0xFF	; 255
    17bc:	88 16       	cp	r8, r24
    17be:	98 06       	cpc	r9, r24
    17c0:	a8 06       	cpc	r10, r24
    17c2:	b8 06       	cpc	r11, r24
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <dir_next+0x122>
    17c6:	7f c0       	rjmp	.+254    	; 0x18c6 <dir_next+0x220>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    17c8:	88 81       	ld	r24, Y
    17ca:	99 81       	ldd	r25, Y+1	; 0x01
    17cc:	0e 94 36 03 	call	0x66c	; 0x66c <sync_window>
    17d0:	81 11       	cpse	r24, r1
    17d2:	7b c0       	rjmp	.+246    	; 0x18ca <dir_next+0x224>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    17d4:	88 81       	ld	r24, Y
    17d6:	99 81       	ldd	r25, Y+1	; 0x01
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	52 e0       	ldi	r21, 0x02	; 2
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	8e 96       	adiw	r24, 0x2e	; 46
    17e2:	0e 94 a4 02 	call	0x548	; 0x548 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    17e6:	e8 80       	ld	r14, Y
    17e8:	f9 80       	ldd	r15, Y+1	; 0x01
    17ea:	b5 01       	movw	r22, r10
    17ec:	a4 01       	movw	r20, r8
    17ee:	c7 01       	movw	r24, r14
    17f0:	0e 94 53 07 	call	0xea6	; 0xea6 <clust2sect>
    17f4:	f7 01       	movw	r30, r14
    17f6:	62 a7       	std	Z+42, r22	; 0x2a
    17f8:	73 a7       	std	Z+43, r23	; 0x2b
    17fa:	84 a7       	std	Z+44, r24	; 0x2c
    17fc:	95 a7       	std	Z+45, r25	; 0x2d
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    17fe:	e1 2c       	mov	r14, r1
    1800:	f1 2c       	mov	r15, r1
						dp->fs->wflag = 1;
    1802:	77 24       	eor	r7, r7
    1804:	73 94       	inc	r7
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1806:	17 c0       	rjmp	.+46     	; 0x1836 <dir_next+0x190>
						dp->fs->wflag = 1;
    1808:	74 82       	std	Z+4, r7	; 0x04
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    180a:	88 81       	ld	r24, Y
    180c:	99 81       	ldd	r25, Y+1	; 0x01
    180e:	0e 94 36 03 	call	0x66c	; 0x66c <sync_window>
    1812:	81 11       	cpse	r24, r1
    1814:	5c c0       	rjmp	.+184    	; 0x18ce <dir_next+0x228>
						dp->fs->winsect++;
    1816:	e8 81       	ld	r30, Y
    1818:	f9 81       	ldd	r31, Y+1	; 0x01
    181a:	82 a5       	ldd	r24, Z+42	; 0x2a
    181c:	93 a5       	ldd	r25, Z+43	; 0x2b
    181e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1820:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	a1 1d       	adc	r26, r1
    1826:	b1 1d       	adc	r27, r1
    1828:	82 a7       	std	Z+42, r24	; 0x2a
    182a:	93 a7       	std	Z+43, r25	; 0x2b
    182c:	a4 a7       	std	Z+44, r26	; 0x2c
    182e:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1830:	ff ef       	ldi	r31, 0xFF	; 255
    1832:	ef 1a       	sub	r14, r31
    1834:	ff 0a       	sbc	r15, r31
    1836:	e8 81       	ld	r30, Y
    1838:	f9 81       	ldd	r31, Y+1	; 0x01
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	e8 16       	cp	r14, r24
    1840:	f9 06       	cpc	r15, r25
    1842:	10 f3       	brcs	.-60     	; 0x1808 <dir_next+0x162>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
    1844:	82 a5       	ldd	r24, Z+42	; 0x2a
    1846:	93 a5       	ldd	r25, Z+43	; 0x2b
    1848:	a4 a5       	ldd	r26, Z+44	; 0x2c
    184a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    184c:	8e 19       	sub	r24, r14
    184e:	9f 09       	sbc	r25, r15
    1850:	a1 09       	sbc	r26, r1
    1852:	b1 09       	sbc	r27, r1
    1854:	82 a7       	std	Z+42, r24	; 0x2a
    1856:	93 a7       	std	Z+43, r25	; 0x2b
    1858:	a4 a7       	std	Z+44, r26	; 0x2c
    185a:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
    185c:	8a 86       	std	Y+10, r8	; 0x0a
    185e:	9b 86       	std	Y+11, r9	; 0x0b
    1860:	ac 86       	std	Y+12, r10	; 0x0c
    1862:	bd 86       	std	Y+13, r11	; 0x0d
				dp->sect = clust2sect(dp->fs, clst);
    1864:	b5 01       	movw	r22, r10
    1866:	a4 01       	movw	r20, r8
    1868:	88 81       	ld	r24, Y
    186a:	99 81       	ldd	r25, Y+1	; 0x01
    186c:	0e 94 53 07 	call	0xea6	; 0xea6 <clust2sect>
    1870:	6e 87       	std	Y+14, r22	; 0x0e
    1872:	7f 87       	std	Y+15, r23	; 0x0f
    1874:	88 8b       	std	Y+16, r24	; 0x10
    1876:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
    1878:	1d 83       	std	Y+5, r17	; 0x05
    187a:	0c 83       	std	Y+4, r16	; 0x04
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
    187c:	cc 0c       	add	r12, r12
    187e:	dd 1c       	adc	r13, r13
    1880:	cc 0c       	add	r12, r12
    1882:	dd 1c       	adc	r13, r13
    1884:	cc 0c       	add	r12, r12
    1886:	dd 1c       	adc	r13, r13
    1888:	cc 0c       	add	r12, r12
    188a:	dd 1c       	adc	r13, r13
    188c:	cc 0c       	add	r12, r12
    188e:	dd 1c       	adc	r13, r13
    1890:	8e e2       	ldi	r24, 0x2E	; 46
    1892:	c8 0e       	add	r12, r24
    1894:	d1 1c       	adc	r13, r1
    1896:	88 81       	ld	r24, Y
    1898:	99 81       	ldd	r25, Y+1	; 0x01
    189a:	c8 0e       	add	r12, r24
    189c:	d9 1e       	adc	r13, r25
    189e:	db 8a       	std	Y+19, r13	; 0x13
    18a0:	ca 8a       	std	Y+18, r12	; 0x12

	return FR_OK;
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	15 c0       	rjmp	.+42     	; 0x18d0 <dir_next+0x22a>
	UINT i;


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    18a6:	84 e0       	ldi	r24, 0x04	; 4
    18a8:	13 c0       	rjmp	.+38     	; 0x18d0 <dir_next+0x22a>
    18aa:	84 e0       	ldi	r24, 0x04	; 4
    18ac:	11 c0       	rjmp	.+34     	; 0x18d0 <dir_next+0x22a>
	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
		dp->sect++;					/* Next sector */

		if (!dp->clust) {		/* Static table */
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
				return FR_NO_FILE;
    18ae:	84 e0       	ldi	r24, 0x04	; 4
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <dir_next+0x22a>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	0d c0       	rjmp	.+26     	; 0x18d0 <dir_next+0x22a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	0b c0       	rjmp	.+22     	; 0x18d0 <dir_next+0x22a>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    18ba:	84 e0       	ldi	r24, 0x04	; 4
    18bc:	09 c0       	rjmp	.+18     	; 0x18d0 <dir_next+0x22a>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    18be:	87 e0       	ldi	r24, 0x07	; 7
    18c0:	07 c0       	rjmp	.+14     	; 0x18d0 <dir_next+0x22a>
					if (clst == 1) return FR_INT_ERR;
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <dir_next+0x22a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <dir_next+0x22a>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <dir_next+0x22a>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    18ce:	81 e0       	ldi	r24, 0x01	; 1

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */

	return FR_OK;
}
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	ff 90       	pop	r15
    18da:	ef 90       	pop	r14
    18dc:	df 90       	pop	r13
    18de:	cf 90       	pop	r12
    18e0:	bf 90       	pop	r11
    18e2:	af 90       	pop	r10
    18e4:	9f 90       	pop	r9
    18e6:	8f 90       	pop	r8
    18e8:	7f 90       	pop	r7
    18ea:	08 95       	ret

000018ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
    18ec:	2f 92       	push	r2
    18ee:	3f 92       	push	r3
    18f0:	4f 92       	push	r4
    18f2:	5f 92       	push	r5
    18f4:	6f 92       	push	r6
    18f6:	7f 92       	push	r7
    18f8:	8f 92       	push	r8
    18fa:	9f 92       	push	r9
    18fc:	af 92       	push	r10
    18fe:	bf 92       	push	r11
    1900:	cf 92       	push	r12
    1902:	df 92       	push	r13
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	00 d0       	rcall	.+0      	; 0x1912 <follow_path+0x26>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <follow_path+0x28>
    1914:	1f 92       	push	r1
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	6c 01       	movw	r12, r24
    191c:	8b 01       	movw	r16, r22
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
    191e:	db 01       	movw	r26, r22
    1920:	8c 91       	ld	r24, X
    1922:	8f 32       	cpi	r24, 0x2F	; 47
    1924:	11 f0       	breq	.+4      	; 0x192a <follow_path+0x3e>
    1926:	8c 35       	cpi	r24, 0x5C	; 92
    1928:	11 f4       	brne	.+4      	; 0x192e <follow_path+0x42>
		path++;
    192a:	0f 5f       	subi	r16, 0xFF	; 255
    192c:	1f 4f       	sbci	r17, 0xFF	; 255
	dp->sclust = 0;							/* Always start from the root directory */
    192e:	f6 01       	movw	r30, r12
    1930:	16 82       	std	Z+6, r1	; 0x06
    1932:	17 82       	std	Z+7, r1	; 0x07
    1934:	10 86       	std	Z+8, r1	; 0x08
    1936:	11 86       	std	Z+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1938:	d8 01       	movw	r26, r16
    193a:	8c 91       	ld	r24, X
    193c:	80 32       	cpi	r24, 0x20	; 32
    193e:	48 f4       	brcc	.+18     	; 0x1952 <follow_path+0x66>
		res = dir_sdi(dp, 0);
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	c6 01       	movw	r24, r12
    1946:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <dir_sdi>
		dp->dir = 0;
    194a:	f6 01       	movw	r30, r12
    194c:	13 8a       	std	Z+19, r1	; 0x13
    194e:	12 8a       	std	Z+18, r1	; 0x12
    1950:	45 c1       	rjmp	.+650    	; 0x1bdc <follow_path+0x2f0>
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dp->fn;
	mem_set(sfn, ' ', 11);
    1952:	0f 2e       	mov	r0, r31
    1954:	fb e0       	ldi	r31, 0x0B	; 11
    1956:	4f 2e       	mov	r4, r31
    1958:	51 2c       	mov	r5, r1
    195a:	f0 2d       	mov	r31, r0
	si = i = b = 0; ni = 8;
    195c:	e1 2c       	mov	r14, r1
    195e:	f1 2c       	mov	r15, r1
    1960:	68 94       	set
    1962:	66 24       	eor	r6, r6
    1964:	63 f8       	bld	r6, 3
    1966:	71 2c       	mov	r7, r1
    1968:	b1 2c       	mov	r11, r1
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    196a:	69 82       	std	Y+1, r6	; 0x01
    196c:	7a 82       	std	Y+2, r7	; 0x02
    196e:	a4 2c       	mov	r10, r4
    1970:	5b 82       	std	Y+3, r5	; 0x03
    1972:	0f 2e       	mov	r0, r31
    1974:	f7 e0       	ldi	r31, 0x07	; 7
    1976:	2f 2e       	mov	r2, r31
    1978:	f1 e0       	ldi	r31, 0x01	; 1
    197a:	3f 2e       	mov	r3, r31
    197c:	f0 2d       	mov	r31, r0
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
    197e:	dd 82       	std	Y+5, r13	; 0x05
    1980:	cc 82       	std	Y+4, r12	; 0x04
    1982:	f8 01       	movw	r30, r16
    1984:	2c 81       	ldd	r18, Y+4	; 0x04
    1986:	3d 81       	ldd	r19, Y+5	; 0x05
    1988:	4f 01       	movw	r8, r30
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    198a:	81 91       	ld	r24, Z+
    198c:	8f 32       	cpi	r24, 0x2F	; 47
    198e:	e1 f3       	breq	.-8      	; 0x1988 <follow_path+0x9c>
    1990:	8c 35       	cpi	r24, 0x5C	; 92
    1992:	d1 f3       	breq	.-12     	; 0x1988 <follow_path+0x9c>
    1994:	3d 83       	std	Y+5, r19	; 0x05
    1996:	2c 83       	std	Y+4, r18	; 0x04
	sfn = dp->fn;
    1998:	d9 01       	movw	r26, r18
    199a:	54 96       	adiw	r26, 0x14	; 20
    199c:	cd 90       	ld	r12, X+
    199e:	dc 90       	ld	r13, X
    19a0:	55 97       	sbiw	r26, 0x15	; 21
	mem_set(sfn, ' ', 11);
    19a2:	a2 01       	movw	r20, r4
    19a4:	60 e2       	ldi	r22, 0x20	; 32
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	c6 01       	movw	r24, r12
    19aa:	0e 94 a4 02 	call	0x548	; 0x548 <mem_set>
	si = i = b = 0; ni = 8;
    19ae:	c7 01       	movw	r24, r14
    19b0:	97 01       	movw	r18, r14
    19b2:	b3 01       	movw	r22, r6
    19b4:	bb 2d       	mov	r27, r11
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    19b6:	f4 01       	movw	r30, r8
    19b8:	e2 0f       	add	r30, r18
    19ba:	f3 1f       	adc	r31, r19
    19bc:	a0 81       	ld	r26, Z
    19be:	89 01       	movw	r16, r18
    19c0:	0f 5f       	subi	r16, 0xFF	; 255
    19c2:	1f 4f       	sbci	r17, 0xFF	; 255
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    19c4:	a1 32       	cpi	r26, 0x21	; 33
    19c6:	08 f4       	brcc	.+2      	; 0x19ca <follow_path+0xde>
    19c8:	e7 c0       	rjmp	.+462    	; 0x1b98 <follow_path+0x2ac>
    19ca:	af 32       	cpi	r26, 0x2F	; 47
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <follow_path+0xe4>
    19ce:	e9 c0       	rjmp	.+466    	; 0x1ba2 <follow_path+0x2b6>
    19d0:	ac 35       	cpi	r26, 0x5C	; 92
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <follow_path+0xea>
    19d4:	e6 c0       	rjmp	.+460    	; 0x1ba2 <follow_path+0x2b6>
		if (c == '.' || i >= ni) {
    19d6:	ae 32       	cpi	r26, 0x2E	; 46
    19d8:	09 f4       	brne	.+2      	; 0x19dc <follow_path+0xf0>
    19da:	d2 c0       	rjmp	.+420    	; 0x1b80 <follow_path+0x294>
    19dc:	86 17       	cp	r24, r22
    19de:	97 07       	cpc	r25, r23
    19e0:	08 f0       	brcs	.+2      	; 0x19e4 <follow_path+0xf8>
    19e2:	be c0       	rjmp	.+380    	; 0x1b60 <follow_path+0x274>
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <follow_path+0x10a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
    19e6:	bb 0f       	add	r27, r27
    19e8:	bb 0f       	add	r27, r27
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    19ea:	98 01       	movw	r18, r16
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	6a 2d       	mov	r22, r10
    19f2:	7b 81       	ldd	r23, Y+3	; 0x03
    19f4:	e0 cf       	rjmp	.-64     	; 0x19b6 <follow_path+0xca>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
    19f6:	aa 23       	and	r26, r26
    19f8:	0c f4       	brge	.+2      	; 0x19fc <follow_path+0x110>
			b |= 3;						/* Eliminate NT flag */
    19fa:	b3 60       	ori	r27, 0x03	; 3
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    19fc:	4a 2f       	mov	r20, r26
    19fe:	41 58       	subi	r20, 0x81	; 129
    1a00:	4f 31       	cpi	r20, 0x1F	; 31
    1a02:	18 f0       	brcs	.+6      	; 0x1a0a <follow_path+0x11e>
    1a04:	4f 55       	subi	r20, 0x5F	; 95
    1a06:	4d 31       	cpi	r20, 0x1D	; 29
    1a08:	e0 f4       	brcc	.+56     	; 0x1a42 <follow_path+0x156>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    1a0a:	f4 01       	movw	r30, r8
    1a0c:	e0 0f       	add	r30, r16
    1a0e:	f1 1f       	adc	r31, r17
    1a10:	10 81       	ld	r17, Z
    1a12:	2e 5f       	subi	r18, 0xFE	; 254
    1a14:	3f 4f       	sbci	r19, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1a16:	41 2f       	mov	r20, r17
    1a18:	40 54       	subi	r20, 0x40	; 64
    1a1a:	4f 33       	cpi	r20, 0x3F	; 63
    1a1c:	20 f0       	brcs	.+8      	; 0x1a26 <follow_path+0x13a>
    1a1e:	40 54       	subi	r20, 0x40	; 64
    1a20:	4d 37       	cpi	r20, 0x7D	; 125
    1a22:	08 f0       	brcs	.+2      	; 0x1a26 <follow_path+0x13a>
    1a24:	9f c0       	rjmp	.+318    	; 0x1b64 <follow_path+0x278>
    1a26:	ab 01       	movw	r20, r22
    1a28:	41 50       	subi	r20, 0x01	; 1
    1a2a:	51 09       	sbc	r21, r1
    1a2c:	84 17       	cp	r24, r20
    1a2e:	95 07       	cpc	r25, r21
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <follow_path+0x148>
    1a32:	9a c0       	rjmp	.+308    	; 0x1b68 <follow_path+0x27c>
				return FR_INVALID_NAME;
			sfn[i++] = c;
    1a34:	f6 01       	movw	r30, r12
    1a36:	e8 0f       	add	r30, r24
    1a38:	f9 1f       	adc	r31, r25
    1a3a:	a0 83       	st	Z, r26
			sfn[i++] = d;
    1a3c:	11 83       	std	Z+1, r17	; 0x01
    1a3e:	02 96       	adiw	r24, 0x02	; 2
    1a40:	ba cf       	rjmp	.-140    	; 0x19b6 <follow_path+0xca>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    1a42:	4a 2f       	mov	r20, r26
    1a44:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1a46:	42 32       	cpi	r20, 0x22	; 34
    1a48:	51 05       	cpc	r21, r1
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <follow_path+0x162>
    1a4c:	8f c0       	rjmp	.+286    	; 0x1b6c <follow_path+0x280>
    1a4e:	f1 01       	movw	r30, r2
    1a50:	9c 01       	movw	r18, r24
    1a52:	81 91       	ld	r24, Z+
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <follow_path+0x16e>
    1a58:	98 c0       	rjmp	.+304    	; 0x1b8a <follow_path+0x29e>
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	48 17       	cp	r20, r24
    1a5e:	59 07       	cpc	r21, r25
    1a60:	c1 f7       	brne	.-16     	; 0x1a52 <follow_path+0x166>
    1a62:	86 e0       	ldi	r24, 0x06	; 6
    1a64:	bb c0       	rjmp	.+374    	; 0x1bdc <follow_path+0x2f0>
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
				b |= 2;
    1a66:	b2 60       	ori	r27, 0x02	; 2
    1a68:	06 c0       	rjmp	.+12     	; 0x1a76 <follow_path+0x18a>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    1a6a:	2a 2f       	mov	r18, r26
    1a6c:	21 56       	subi	r18, 0x61	; 97
    1a6e:	2a 31       	cpi	r18, 0x1A	; 26
    1a70:	10 f4       	brcc	.+4      	; 0x1a76 <follow_path+0x18a>
					b |= 1; c -= 0x20;
    1a72:	b1 60       	ori	r27, 0x01	; 1
    1a74:	a0 52       	subi	r26, 0x20	; 32
				}
			}
			sfn[i++] = c;
    1a76:	f6 01       	movw	r30, r12
    1a78:	e8 0f       	add	r30, r24
    1a7a:	f9 1f       	adc	r31, r25
    1a7c:	a0 83       	st	Z, r26
    1a7e:	01 96       	adiw	r24, 0x01	; 1
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    1a80:	98 01       	movw	r18, r16
    1a82:	99 cf       	rjmp	.-206    	; 0x19b6 <follow_path+0xca>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1a84:	89 2b       	or	r24, r25
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <follow_path+0x19e>
    1a88:	73 c0       	rjmp	.+230    	; 0x1b70 <follow_path+0x284>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
    1a8a:	f6 01       	movw	r30, r12
    1a8c:	80 81       	ld	r24, Z
    1a8e:	85 3e       	cpi	r24, 0xE5	; 229
    1a90:	11 f4       	brne	.+4      	; 0x1a96 <follow_path+0x1aa>
    1a92:	45 e0       	ldi	r20, 0x05	; 5
    1a94:	40 83       	st	Z, r20

	if (ni == 8) b <<= 2;
    1a96:	68 30       	cpi	r22, 0x08	; 8
    1a98:	71 05       	cpc	r23, r1
    1a9a:	19 f4       	brne	.+6      	; 0x1aa2 <follow_path+0x1b6>
    1a9c:	b3 2f       	mov	r27, r19
    1a9e:	bb 0f       	add	r27, r27
    1aa0:	bb 0f       	add	r27, r27
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    1aa2:	8b 2f       	mov	r24, r27
    1aa4:	83 70       	andi	r24, 0x03	; 3
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <follow_path+0x1c0>
    1aaa:	20 61       	ori	r18, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    1aac:	bc 70       	andi	r27, 0x0C	; 12
    1aae:	b4 30       	cpi	r27, 0x04	; 4
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <follow_path+0x1c8>
    1ab2:	28 60       	ori	r18, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    1ab4:	d6 01       	movw	r26, r12
    1ab6:	1b 96       	adiw	r26, 0x0b	; 11
    1ab8:	2c 93       	st	X, r18
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1aba:	b7 01       	movw	r22, r14
    1abc:	8c 81       	ldd	r24, Y+4	; 0x04
    1abe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <dir_sdi>
	if (res != FR_OK) return res;
    1ac4:	81 11       	cpse	r24, r1
    1ac6:	72 c0       	rjmp	.+228    	; 0x1bac <follow_path+0x2c0>
    1ac8:	cc 80       	ldd	r12, Y+4	; 0x04
    1aca:	dd 80       	ldd	r13, Y+5	; 0x05

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dp->fs, dp->sect);
    1acc:	f6 01       	movw	r30, r12
    1ace:	46 85       	ldd	r20, Z+14	; 0x0e
    1ad0:	57 85       	ldd	r21, Z+15	; 0x0f
    1ad2:	60 89       	ldd	r22, Z+16	; 0x10
    1ad4:	71 89       	ldd	r23, Z+17	; 0x11
    1ad6:	80 81       	ld	r24, Z
    1ad8:	91 81       	ldd	r25, Z+1	; 0x01
    1ada:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
		if (res != FR_OK) break;
    1ade:	81 11       	cpse	r24, r1
    1ae0:	67 c0       	rjmp	.+206    	; 0x1bb0 <follow_path+0x2c4>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1ae2:	d6 01       	movw	r26, r12
    1ae4:	52 96       	adiw	r26, 0x12	; 18
    1ae6:	6d 91       	ld	r22, X+
    1ae8:	7c 91       	ld	r23, X
    1aea:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1aec:	fb 01       	movw	r30, r22
    1aee:	90 81       	ld	r25, Z
    1af0:	99 23       	and	r25, r25
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <follow_path+0x20a>
    1af4:	66 c0       	rjmp	.+204    	; 0x1bc2 <follow_path+0x2d6>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dp->fn[NS] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    1af6:	93 85       	ldd	r25, Z+11	; 0x0b
    1af8:	93 fd       	sbrc	r25, 3
    1afa:	13 c0       	rjmp	.+38     	; 0x1b22 <follow_path+0x236>
    1afc:	54 96       	adiw	r26, 0x14	; 20
    1afe:	4d 91       	ld	r20, X+
    1b00:	5c 91       	ld	r21, X
    1b02:	55 97       	sbiw	r26, 0x15	; 21
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    1b04:	9b 01       	movw	r18, r22
    1b06:	25 5f       	subi	r18, 0xF5	; 245
    1b08:	3f 4f       	sbci	r19, 0xFF	; 255
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    1b0a:	da 01       	movw	r26, r20
    1b0c:	46 01       	movw	r8, r12
    1b0e:	04 c0       	rjmp	.+8      	; 0x1b18 <follow_path+0x22c>
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1b10:	e2 17       	cp	r30, r18
    1b12:	f3 07       	cpc	r31, r19
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <follow_path+0x22c>
    1b16:	5c c0       	rjmp	.+184    	; 0x1bd0 <follow_path+0x2e4>
    1b18:	d1 90       	ld	r13, Z+
    1b1a:	9d 91       	ld	r25, X+
    1b1c:	d9 16       	cp	r13, r25
    1b1e:	c1 f3       	breq	.-16     	; 0x1b10 <follow_path+0x224>
    1b20:	64 01       	movw	r12, r8
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
    1b22:	b7 01       	movw	r22, r14
    1b24:	c6 01       	movw	r24, r12
    1b26:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <dir_next>
	} while (res == FR_OK);
    1b2a:	88 23       	and	r24, r24
    1b2c:	79 f2       	breq	.-98     	; 0x1acc <follow_path+0x1e0>
    1b2e:	40 c0       	rjmp	.+128    	; 0x1bb0 <follow_path+0x2c4>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1b30:	92 ff       	sbrs	r25, 2
    1b32:	20 c0       	rjmp	.+64     	; 0x1b74 <follow_path+0x288>
		dp->dir = 0;
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
    1b34:	84 e0       	ldi	r24, 0x04	; 4
    1b36:	52 c0       	rjmp	.+164    	; 0x1bdc <follow_path+0x2f0>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    1b38:	db 01       	movw	r26, r22
    1b3a:	1b 96       	adiw	r26, 0x0b	; 11
    1b3c:	8c 91       	ld	r24, X
    1b3e:	84 ff       	sbrs	r24, 4
    1b40:	1b c0       	rjmp	.+54     	; 0x1b78 <follow_path+0x28c>
				res = FR_NO_PATH; break;
			}
			dp->sclust = ld_clust(dp->fs, dir);
    1b42:	ec 81       	ldd	r30, Y+4	; 0x04
    1b44:	fd 81       	ldd	r31, Y+5	; 0x05
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	0e 94 af 02 	call	0x55e	; 0x55e <ld_clust>
    1b4e:	ac 81       	ldd	r26, Y+4	; 0x04
    1b50:	bd 81       	ldd	r27, Y+5	; 0x05
    1b52:	16 96       	adiw	r26, 0x06	; 6
    1b54:	6d 93       	st	X+, r22
    1b56:	7d 93       	st	X+, r23
    1b58:	8d 93       	st	X+, r24
    1b5a:	9c 93       	st	X, r25
    1b5c:	19 97       	sbiw	r26, 0x09	; 9
		}
    1b5e:	11 cf       	rjmp	.-478    	; 0x1982 <follow_path+0x96>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
    1b60:	86 e0       	ldi	r24, 0x06	; 6
    1b62:	3c c0       	rjmp	.+120    	; 0x1bdc <follow_path+0x2f0>
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1b64:	86 e0       	ldi	r24, 0x06	; 6
    1b66:	3a c0       	rjmp	.+116    	; 0x1bdc <follow_path+0x2f0>
    1b68:	86 e0       	ldi	r24, 0x06	; 6
    1b6a:	38 c0       	rjmp	.+112    	; 0x1bdc <follow_path+0x2f0>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1b6c:	86 e0       	ldi	r24, 0x06	; 6
    1b6e:	36 c0       	rjmp	.+108    	; 0x1bdc <follow_path+0x2f0>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1b70:	86 e0       	ldi	r24, 0x06	; 6
    1b72:	34 c0       	rjmp	.+104    	; 0x1bdc <follow_path+0x2f0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1b74:	85 e0       	ldi	r24, 0x05	; 5
    1b76:	32 c0       	rjmp	.+100    	; 0x1bdc <follow_path+0x2f0>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    1b78:	85 e0       	ldi	r24, 0x05	; 5
    1b7a:	30 c0       	rjmp	.+96     	; 0x1bdc <follow_path+0x2f0>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1b7c:	86 e0       	ldi	r24, 0x06	; 6
    1b7e:	2e c0       	rjmp	.+92     	; 0x1bdc <follow_path+0x2f0>
    1b80:	68 30       	cpi	r22, 0x08	; 8
    1b82:	71 05       	cpc	r23, r1
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <follow_path+0x29c>
    1b86:	2f cf       	rjmp	.-418    	; 0x19e6 <follow_path+0xfa>
    1b88:	f9 cf       	rjmp	.-14     	; 0x1b7c <follow_path+0x290>
    1b8a:	c9 01       	movw	r24, r18
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1b8c:	2a 2f       	mov	r18, r26
    1b8e:	21 54       	subi	r18, 0x41	; 65
    1b90:	2a 31       	cpi	r18, 0x1A	; 26
    1b92:	08 f4       	brcc	.+2      	; 0x1b96 <follow_path+0x2aa>
    1b94:	68 cf       	rjmp	.-304    	; 0x1a66 <follow_path+0x17a>
    1b96:	69 cf       	rjmp	.-302    	; 0x1a6a <follow_path+0x17e>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    1b98:	08 0d       	add	r16, r8
    1b9a:	19 1d       	adc	r17, r9
    1b9c:	3b 2f       	mov	r19, r27
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1b9e:	24 e0       	ldi	r18, 0x04	; 4
    1ba0:	71 cf       	rjmp	.-286    	; 0x1a84 <follow_path+0x198>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    1ba2:	08 0d       	add	r16, r8
    1ba4:	19 1d       	adc	r17, r9
    1ba6:	3b 2f       	mov	r19, r27
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1ba8:	2b 2d       	mov	r18, r11
    1baa:	6c cf       	rjmp	.-296    	; 0x1a84 <follow_path+0x198>
    1bac:	cc 80       	ldd	r12, Y+4	; 0x04
    1bae:	dd 80       	ldd	r13, Y+5	; 0x05
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NS];
    1bb0:	d6 01       	movw	r26, r12
    1bb2:	54 96       	adiw	r26, 0x14	; 20
    1bb4:	ed 91       	ld	r30, X+
    1bb6:	fc 91       	ld	r31, X
    1bb8:	55 97       	sbiw	r26, 0x15	; 21
    1bba:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    1bbc:	84 30       	cpi	r24, 0x04	; 4
    1bbe:	71 f4       	brne	.+28     	; 0x1bdc <follow_path+0x2f0>
    1bc0:	b7 cf       	rjmp	.-146    	; 0x1b30 <follow_path+0x244>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NS];
    1bc2:	d6 01       	movw	r26, r12
    1bc4:	54 96       	adiw	r26, 0x14	; 20
    1bc6:	ed 91       	ld	r30, X+
    1bc8:	fc 91       	ld	r31, X
    1bca:	55 97       	sbiw	r26, 0x15	; 21
    1bcc:	93 85       	ldd	r25, Z+11	; 0x0b
    1bce:	b0 cf       	rjmp	.-160    	; 0x1b30 <follow_path+0x244>
    1bd0:	9d 82       	std	Y+5, r9	; 0x05
    1bd2:	8c 82       	std	Y+4, r8	; 0x04
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    1bd4:	fa 01       	movw	r30, r20
    1bd6:	93 85       	ldd	r25, Z+11	; 0x0b
    1bd8:	92 ff       	sbrs	r25, 2
    1bda:	ae cf       	rjmp	.-164    	; 0x1b38 <follow_path+0x24c>
			dp->sclust = ld_clust(dp->fs, dir);
		}
	}

	return res;
}
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	df 90       	pop	r13
    1bf4:	cf 90       	pop	r12
    1bf6:	bf 90       	pop	r11
    1bf8:	af 90       	pop	r10
    1bfa:	9f 90       	pop	r9
    1bfc:	8f 90       	pop	r8
    1bfe:	7f 90       	pop	r7
    1c00:	6f 90       	pop	r6
    1c02:	5f 90       	pop	r5
    1c04:	4f 90       	pop	r4
    1c06:	3f 90       	pop	r3
    1c08:	2f 90       	pop	r2
    1c0a:	08 95       	ret

00001c0c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	ec 01       	movw	r28, r24
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <dir_sdi>
    1c1c:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    1c1e:	81 11       	cpse	r24, r1
    1c20:	1a c0       	rjmp	.+52     	; 0x1c56 <dir_register+0x4a>
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
    1c22:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c24:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c26:	68 89       	ldd	r22, Y+16	; 0x10
    1c28:	79 89       	ldd	r23, Y+17	; 0x11
    1c2a:	88 81       	ld	r24, Y
    1c2c:	99 81       	ldd	r25, Y+1	; 0x01
    1c2e:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
    1c32:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    1c34:	81 11       	cpse	r24, r1
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <dir_register+0x4a>
			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
    1c38:	ea 89       	ldd	r30, Y+18	; 0x12
    1c3a:	fb 89       	ldd	r31, Y+19	; 0x13
    1c3c:	80 81       	ld	r24, Z
    1c3e:	85 3e       	cpi	r24, 0xE5	; 229
    1c40:	71 f0       	breq	.+28     	; 0x1c5e <dir_register+0x52>
    1c42:	88 23       	and	r24, r24
    1c44:	61 f0       	breq	.+24     	; 0x1c5e <dir_register+0x52>
				if (++n == nent) break;	/* A block of contiguous entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    1c46:	61 e0       	ldi	r22, 0x01	; 1
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <dir_next>
    1c50:	18 2f       	mov	r17, r24
		} while (res == FR_OK);
    1c52:	88 23       	and	r24, r24
    1c54:	31 f3       	breq	.-52     	; 0x1c22 <dir_register+0x16>
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1c56:	14 30       	cpi	r17, 0x04	; 4
    1c58:	11 f1       	breq	.+68     	; 0x1c9e <dir_register+0x92>
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
    1c5a:	11 11       	cpse	r17, r1
    1c5c:	21 c0       	rjmp	.+66     	; 0x1ca0 <dir_register+0x94>
		res = move_window(dp->fs, dp->sect);
    1c5e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c60:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c62:	68 89       	ldd	r22, Y+16	; 0x10
    1c64:	79 89       	ldd	r23, Y+17	; 0x11
    1c66:	88 81       	ld	r24, Y
    1c68:	99 81       	ldd	r25, Y+1	; 0x01
    1c6a:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
    1c6e:	18 2f       	mov	r17, r24
		if (res == FR_OK) {
    1c70:	81 11       	cpse	r24, r1
    1c72:	16 c0       	rjmp	.+44     	; 0x1ca0 <dir_register+0x94>
			mem_set(dp->dir, 0, SZ_DIR);	/* Clean the entry */
    1c74:	40 e2       	ldi	r20, 0x20	; 32
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c7e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c80:	0e 94 a4 02 	call	0x548	; 0x548 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    1c84:	6c 89       	ldd	r22, Y+20	; 0x14
    1c86:	7d 89       	ldd	r23, Y+21	; 0x15
    1c88:	4b e0       	ldi	r20, 0x0B	; 11
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c8e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c90:	0e 94 74 02 	call	0x4e8	; 0x4e8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NS] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
    1c94:	e8 81       	ld	r30, Y
    1c96:	f9 81       	ldd	r31, Y+1	; 0x01
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	84 83       	std	Z+4, r24	; 0x04
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <dir_register+0x94>
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1c9e:	17 e0       	ldi	r17, 0x07	; 7
			dp->fs->wflag = 1;
		}
	}

	return res;
}
    1ca0:	81 2f       	mov	r24, r17
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	08 95       	ret

00001caa <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1caa:	8f 92       	push	r8
    1cac:	9f 92       	push	r9
    1cae:	af 92       	push	r10
    1cb0:	bf 92       	push	r11
    1cb2:	cf 92       	push	r12
    1cb4:	df 92       	push	r13
    1cb6:	ef 92       	push	r14
    1cb8:	ff 92       	push	r15
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	ec 01       	movw	r28, r24
    1cc4:	6a 01       	movw	r12, r20
    1cc6:	7b 01       	movw	r14, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1cc8:	42 30       	cpi	r20, 0x02	; 2
    1cca:	51 05       	cpc	r21, r1
    1ccc:	61 05       	cpc	r22, r1
    1cce:	71 05       	cpc	r23, r1
    1cd0:	08 f4       	brcc	.+2      	; 0x1cd4 <remove_chain+0x2a>
    1cd2:	4e c0       	rjmp	.+156    	; 0x1d70 <remove_chain+0xc6>
    1cd4:	8a 89       	ldd	r24, Y+18	; 0x12
    1cd6:	9b 89       	ldd	r25, Y+19	; 0x13
    1cd8:	ac 89       	ldd	r26, Y+20	; 0x14
    1cda:	bd 89       	ldd	r27, Y+21	; 0x15
    1cdc:	48 17       	cp	r20, r24
    1cde:	59 07       	cpc	r21, r25
    1ce0:	6a 07       	cpc	r22, r26
    1ce2:	7b 07       	cpc	r23, r27
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <remove_chain+0x3e>
    1ce6:	46 c0       	rjmp	.+140    	; 0x1d74 <remove_chain+0xca>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1ce8:	b7 01       	movw	r22, r14
    1cea:	a6 01       	movw	r20, r12
    1cec:	ce 01       	movw	r24, r28
    1cee:	0e 94 89 07 	call	0xf12	; 0xf12 <get_fat>
    1cf2:	4b 01       	movw	r8, r22
    1cf4:	5c 01       	movw	r10, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1cf6:	61 15       	cp	r22, r1
    1cf8:	71 05       	cpc	r23, r1
    1cfa:	81 05       	cpc	r24, r1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	e1 f1       	breq	.+120    	; 0x1d78 <remove_chain+0xce>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1d00:	91 e0       	ldi	r25, 0x01	; 1
    1d02:	89 16       	cp	r8, r25
    1d04:	91 04       	cpc	r9, r1
    1d06:	a1 04       	cpc	r10, r1
    1d08:	b1 04       	cpc	r11, r1
    1d0a:	c1 f1       	breq	.+112    	; 0x1d7c <remove_chain+0xd2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1d0c:	8f ef       	ldi	r24, 0xFF	; 255
    1d0e:	88 16       	cp	r8, r24
    1d10:	98 06       	cpc	r9, r24
    1d12:	a8 06       	cpc	r10, r24
    1d14:	b8 06       	cpc	r11, r24
    1d16:	a1 f1       	breq	.+104    	; 0x1d80 <remove_chain+0xd6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1d18:	00 e0       	ldi	r16, 0x00	; 0
    1d1a:	10 e0       	ldi	r17, 0x00	; 0
    1d1c:	98 01       	movw	r18, r16
    1d1e:	b7 01       	movw	r22, r14
    1d20:	a6 01       	movw	r20, r12
    1d22:	ce 01       	movw	r24, r28
    1d24:	0e 94 29 09 	call	0x1252	; 0x1252 <put_fat>
			if (res != FR_OK) break;
    1d28:	81 11       	cpse	r24, r1
    1d2a:	2b c0       	rjmp	.+86     	; 0x1d82 <remove_chain+0xd8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    1d2c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d2e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d30:	68 89       	ldd	r22, Y+16	; 0x10
    1d32:	79 89       	ldd	r23, Y+17	; 0x11
    1d34:	4f 3f       	cpi	r20, 0xFF	; 255
    1d36:	9f ef       	ldi	r25, 0xFF	; 255
    1d38:	59 07       	cpc	r21, r25
    1d3a:	69 07       	cpc	r22, r25
    1d3c:	79 07       	cpc	r23, r25
    1d3e:	59 f0       	breq	.+22     	; 0x1d56 <remove_chain+0xac>
				fs->free_clust++;
    1d40:	4f 5f       	subi	r20, 0xFF	; 255
    1d42:	5f 4f       	sbci	r21, 0xFF	; 255
    1d44:	6f 4f       	sbci	r22, 0xFF	; 255
    1d46:	7f 4f       	sbci	r23, 0xFF	; 255
    1d48:	4e 87       	std	Y+14, r20	; 0x0e
    1d4a:	5f 87       	std	Y+15, r21	; 0x0f
    1d4c:	68 8b       	std	Y+16, r22	; 0x10
    1d4e:	79 8b       	std	Y+17, r23	; 0x11
				fs->fsi_flag |= 1;
    1d50:	9d 81       	ldd	r25, Y+5	; 0x05
    1d52:	91 60       	ori	r25, 0x01	; 1
    1d54:	9d 83       	std	Y+5, r25	; 0x05
    1d56:	75 01       	movw	r14, r10
    1d58:	64 01       	movw	r12, r8
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1d5a:	4a 89       	ldd	r20, Y+18	; 0x12
    1d5c:	5b 89       	ldd	r21, Y+19	; 0x13
    1d5e:	6c 89       	ldd	r22, Y+20	; 0x14
    1d60:	7d 89       	ldd	r23, Y+21	; 0x15
    1d62:	84 16       	cp	r8, r20
    1d64:	95 06       	cpc	r9, r21
    1d66:	a6 06       	cpc	r10, r22
    1d68:	b7 06       	cpc	r11, r23
    1d6a:	08 f4       	brcc	.+2      	; 0x1d6e <remove_chain+0xc4>
    1d6c:	bd cf       	rjmp	.-134    	; 0x1ce8 <remove_chain+0x3e>
    1d6e:	09 c0       	rjmp	.+18     	; 0x1d82 <remove_chain+0xd8>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1d70:	82 e0       	ldi	r24, 0x02	; 2
    1d72:	07 c0       	rjmp	.+14     	; 0x1d82 <remove_chain+0xd8>
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	05 c0       	rjmp	.+10     	; 0x1d82 <remove_chain+0xd8>

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	03 c0       	rjmp	.+6      	; 0x1d82 <remove_chain+0xd8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1d80:	81 e0       	ldi	r24, 0x01	; 1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	1f 91       	pop	r17
    1d88:	0f 91       	pop	r16
    1d8a:	ff 90       	pop	r15
    1d8c:	ef 90       	pop	r14
    1d8e:	df 90       	pop	r13
    1d90:	cf 90       	pop	r12
    1d92:	bf 90       	pop	r11
    1d94:	af 90       	pop	r10
    1d96:	9f 90       	pop	r9
    1d98:	8f 90       	pop	r8
    1d9a:	08 95       	ret

00001d9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1d9c:	1f 93       	push	r17
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <f_mount+0x8>
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <f_mount+0xa>
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <f_mount+0xc>
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	9c 83       	std	Y+4, r25	; 0x04
    1dae:	8b 83       	std	Y+3, r24	; 0x03
    1db0:	7e 83       	std	Y+6, r23	; 0x06
    1db2:	6d 83       	std	Y+5, r22	; 0x05
    1db4:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1db6:	7a 83       	std	Y+2, r23	; 0x02
    1db8:	69 83       	std	Y+1, r22	; 0x01


	vol = get_ldnumber(&rp);
    1dba:	ce 01       	movw	r24, r28
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    1dc2:	99 23       	and	r25, r25
    1dc4:	34 f1       	brlt	.+76     	; 0x1e12 <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	ee 0f       	add	r30, r30
    1dca:	ff 1f       	adc	r31, r31
    1dcc:	e8 58       	subi	r30, 0x88	; 136
    1dce:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd0:	01 90       	ld	r0, Z+
    1dd2:	f0 81       	ld	r31, Z
    1dd4:	e0 2d       	mov	r30, r0

	if (cfs) {
    1dd6:	30 97       	sbiw	r30, 0x00	; 0
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <f_mount+0x40>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1dda:	10 82       	st	Z, r1
	}

	if (fs) {
    1ddc:	eb 81       	ldd	r30, Y+3	; 0x03
    1dde:	fc 81       	ldd	r31, Y+4	; 0x04
    1de0:	30 97       	sbiw	r30, 0x00	; 0
    1de2:	e9 f0       	breq	.+58     	; 0x1e1e <f_mount+0x82>
		fs->fs_type = 0;				/* Clear new fs object */
    1de4:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1de6:	2b 81       	ldd	r18, Y+3	; 0x03
    1de8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dea:	fc 01       	movw	r30, r24
    1dec:	ee 0f       	add	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	e8 58       	subi	r30, 0x88	; 136
    1df2:	fd 4f       	sbci	r31, 0xFD	; 253
    1df4:	31 83       	std	Z+1, r19	; 0x01
    1df6:	20 83       	st	Z, r18

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1df8:	23 2b       	or	r18, r19
    1dfa:	69 f0       	breq	.+26     	; 0x1e16 <f_mount+0x7a>
    1dfc:	11 30       	cpi	r17, 0x01	; 1
    1dfe:	69 f4       	brne	.+26     	; 0x1e1a <f_mount+0x7e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	be 01       	movw	r22, r28
    1e04:	6b 5f       	subi	r22, 0xFB	; 251
    1e06:	7f 4f       	sbci	r23, 0xFF	; 255
    1e08:	ce 01       	movw	r24, r28
    1e0a:	03 96       	adiw	r24, 0x03	; 3
    1e0c:	0e 94 17 04 	call	0x82e	; 0x82e <find_volume>
    1e10:	0e c0       	rjmp	.+28     	; 0x1e2e <f_mount+0x92>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    1e12:	8b e0       	ldi	r24, 0x0B	; 11
    1e14:	0c c0       	rjmp	.+24     	; 0x1e2e <f_mount+0x92>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	0a c0       	rjmp	.+20     	; 0x1e2e <f_mount+0x92>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	08 c0       	rjmp	.+16     	; 0x1e2e <f_mount+0x92>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1e1e:	fc 01       	movw	r30, r24
    1e20:	ee 0f       	add	r30, r30
    1e22:	ff 1f       	adc	r31, r31
    1e24:	e8 58       	subi	r30, 0x88	; 136
    1e26:	fd 4f       	sbci	r31, 0xFD	; 253
    1e28:	11 82       	std	Z+1, r1	; 0x01
    1e2a:	10 82       	st	Z, r1

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1e2c:	80 e0       	ldi	r24, 0x00	; 0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    1e2e:	26 96       	adiw	r28, 0x06	; 6
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	1f 91       	pop	r17
    1e40:	08 95       	ret

00001e42 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1e42:	4f 92       	push	r4
    1e44:	5f 92       	push	r5
    1e46:	6f 92       	push	r6
    1e48:	7f 92       	push	r7
    1e4a:	af 92       	push	r10
    1e4c:	bf 92       	push	r11
    1e4e:	cf 92       	push	r12
    1e50:	df 92       	push	r13
    1e52:	ef 92       	push	r14
    1e54:	ff 92       	push	r15
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	a8 97       	sbiw	r28, 0x28	; 40
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	8c 01       	movw	r16, r24
    1e70:	7c a3       	std	Y+36, r23	; 0x24
    1e72:	6b a3       	std	Y+35, r22	; 0x23
    1e74:	f4 2e       	mov	r15, r20
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <f_open+0x3a>
    1e7a:	d4 c0       	rjmp	.+424    	; 0x2024 <f_open+0x1e2>
	fp->fs = 0;			/* Clear file object */
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	1d 92       	st	X+, r1
    1e80:	1c 92       	st	X, r1

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    1e82:	4e 71       	andi	r20, 0x1E	; 30
    1e84:	be 01       	movw	r22, r28
    1e86:	6d 5d       	subi	r22, 0xDD	; 221
    1e88:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	01 96       	adiw	r24, 0x01	; 1
    1e8e:	0e 94 17 04 	call	0x82e	; 0x82e <find_volume>
    1e92:	b8 2e       	mov	r11, r24
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    1e94:	81 11       	cpse	r24, r1
    1e96:	ed c0       	rjmp	.+474    	; 0x2072 <f_open+0x230>
	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    1e98:	0f 2e       	mov	r0, r31
    1e9a:	ff e1       	ldi	r31, 0x1F	; 31
    1e9c:	af 2e       	mov	r10, r31
    1e9e:	f0 2d       	mov	r31, r0
    1ea0:	af 20       	and	r10, r15
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	47 96       	adiw	r24, 0x17	; 23
    1ea6:	9e 8b       	std	Y+22, r25	; 0x16
    1ea8:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    1eaa:	6b a1       	ldd	r22, Y+35	; 0x23
    1eac:	7c a1       	ldd	r23, Y+36	; 0x24
    1eae:	ce 01       	movw	r24, r28
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	0e 94 76 0c 	call	0x18ec	; 0x18ec <follow_path>
		dir = dj.dir;
    1eb6:	cb 88       	ldd	r12, Y+19	; 0x13
    1eb8:	dc 88       	ldd	r13, Y+20	; 0x14
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    1eba:	81 11       	cpse	r24, r1
    1ebc:	be c0       	rjmp	.+380    	; 0x203a <f_open+0x1f8>
			if (!dir)	/* Default directory itself */
    1ebe:	c1 14       	cp	r12, r1
    1ec0:	d1 04       	cpc	r13, r1
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <f_open+0x84>
    1ec4:	b4 c0       	rjmp	.+360    	; 0x202e <f_open+0x1ec>
    1ec6:	b8 c0       	rjmp	.+368    	; 0x2038 <f_open+0x1f6>
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
    1ec8:	88 23       	and	r24, r24
    1eca:	79 f0       	breq	.+30     	; 0x1eea <f_open+0xa8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    1ecc:	84 30       	cpi	r24, 0x04	; 4
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <f_open+0x90>
    1ed0:	c2 c0       	rjmp	.+388    	; 0x2056 <f_open+0x214>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <dir_register>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1eda:	b8 e0       	ldi	r27, 0x08	; 8
    1edc:	ab 2a       	or	r10, r27
				dir = dj.dir;					/* New entry */
    1ede:	cb 88       	ldd	r12, Y+19	; 0x13
    1ee0:	dc 88       	ldd	r13, Y+20	; 0x14
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1ee2:	88 23       	and	r24, r24
    1ee4:	49 f0       	breq	.+18     	; 0x1ef8 <f_open+0xb6>
			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    1ee6:	b8 2e       	mov	r11, r24
    1ee8:	c4 c0       	rjmp	.+392    	; 0x2072 <f_open+0x230>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1eea:	f6 01       	movw	r30, r12
    1eec:	83 85       	ldd	r24, Z+11	; 0x0b
    1eee:	81 71       	andi	r24, 0x11	; 17
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <f_open+0xb2>
    1ef2:	a8 c0       	rjmp	.+336    	; 0x2044 <f_open+0x202>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    1ef4:	f2 fc       	sbrc	r15, 2
    1ef6:	ab c0       	rjmp	.+342    	; 0x204e <f_open+0x20c>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1ef8:	a3 fe       	sbrs	r10, 3
    1efa:	54 c0       	rjmp	.+168    	; 0x1fa4 <f_open+0x162>
				dw = get_fattime();				/* Created time */
    1efc:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <get_fattime>
				ST_DWORD(dir+DIR_CrtTime, dw);
    1f00:	d6 01       	movw	r26, r12
    1f02:	1e 96       	adiw	r26, 0x0e	; 14
    1f04:	6d 93       	st	X+, r22
    1f06:	7d 93       	st	X+, r23
    1f08:	8d 93       	st	X+, r24
    1f0a:	9c 93       	st	X, r25
    1f0c:	51 97       	sbiw	r26, 0x11	; 17
				dir[DIR_Attr] = 0;				/* Reset attribute */
    1f0e:	1b 96       	adiw	r26, 0x0b	; 11
    1f10:	1c 92       	st	X, r1
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    1f12:	f6 01       	movw	r30, r12
    1f14:	14 8e       	std	Z+28, r1	; 0x1c
    1f16:	15 8e       	std	Z+29, r1	; 0x1d
    1f18:	16 8e       	std	Z+30, r1	; 0x1e
    1f1a:	17 8e       	std	Z+31, r1	; 0x1f
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
    1f1c:	b6 01       	movw	r22, r12
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	0e 94 af 02 	call	0x55e	; 0x55e <ld_clust>
    1f26:	2b 01       	movw	r4, r22
    1f28:	3c 01       	movw	r6, r24
				st_clust(dir, 0);				/* cluster = 0 */
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	50 e0       	ldi	r21, 0x00	; 0
    1f2e:	ba 01       	movw	r22, r20
    1f30:	c6 01       	movw	r24, r12
    1f32:	0e 94 cd 02 	call	0x59a	; 0x59a <st_clust>
				dj.fs->wflag = 1;
    1f36:	e9 81       	ldd	r30, Y+1	; 0x01
    1f38:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {						/* Remove the cluster chain if exist */
    1f3e:	41 14       	cp	r4, r1
    1f40:	51 04       	cpc	r5, r1
    1f42:	61 04       	cpc	r6, r1
    1f44:	71 04       	cpc	r7, r1
    1f46:	71 f1       	breq	.+92     	; 0x1fa4 <f_open+0x162>
					dw = dj.fs->winsect;
    1f48:	82 a5       	ldd	r24, Z+42	; 0x2a
    1f4a:	93 a5       	ldd	r25, Z+43	; 0x2b
    1f4c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1f4e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1f50:	8d a3       	std	Y+37, r24	; 0x25
    1f52:	9e a3       	std	Y+38, r25	; 0x26
    1f54:	af a3       	std	Y+39, r26	; 0x27
    1f56:	b8 a7       	std	Y+40, r27	; 0x28
					res = remove_chain(dj.fs, cl);
    1f58:	b3 01       	movw	r22, r6
    1f5a:	a2 01       	movw	r20, r4
    1f5c:	cf 01       	movw	r24, r30
    1f5e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <remove_chain>
					if (res == FR_OK) {
    1f62:	81 11       	cpse	r24, r1
    1f64:	7a c0       	rjmp	.+244    	; 0x205a <f_open+0x218>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6a:	a1 e0       	ldi	r26, 0x01	; 1
    1f6c:	4a 1a       	sub	r4, r26
    1f6e:	51 08       	sbc	r5, r1
    1f70:	61 08       	sbc	r6, r1
    1f72:	71 08       	sbc	r7, r1
    1f74:	fc 01       	movw	r30, r24
    1f76:	42 86       	std	Z+10, r4	; 0x0a
    1f78:	53 86       	std	Z+11, r5	; 0x0b
    1f7a:	64 86       	std	Z+12, r6	; 0x0c
    1f7c:	75 86       	std	Z+13, r7	; 0x0d
						res = move_window(dj.fs, dw);
    1f7e:	4d a1       	ldd	r20, Y+37	; 0x25
    1f80:	5e a1       	ldd	r21, Y+38	; 0x26
    1f82:	6f a1       	ldd	r22, Y+39	; 0x27
    1f84:	78 a5       	ldd	r23, Y+40	; 0x28
    1f86:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
    1f8a:	0a c0       	rjmp	.+20     	; 0x1fa0 <f_open+0x15e>
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    1f8c:	d6 01       	movw	r26, r12
    1f8e:	1b 96       	adiw	r26, 0x0b	; 11
    1f90:	8c 91       	ld	r24, X
    1f92:	84 fd       	sbrc	r24, 4
    1f94:	64 c0       	rjmp	.+200    	; 0x205e <f_open+0x21c>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1f96:	f1 fe       	sbrs	r15, 1
    1f98:	05 c0       	rjmp	.+10     	; 0x1fa4 <f_open+0x162>
    1f9a:	80 fd       	sbrc	r24, 0
    1f9c:	64 c0       	rjmp	.+200    	; 0x2066 <f_open+0x224>
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <f_open+0x162>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    1fa0:	81 11       	cpse	r24, r1
    1fa2:	66 c0       	rjmp	.+204    	; 0x2070 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    1fa4:	a3 fe       	sbrs	r10, 3
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <f_open+0x16a>
				mode |= FA__WRITTEN;
    1fa8:	b0 e2       	ldi	r27, 0x20	; 32
    1faa:	ab 2a       	or	r10, r27
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    1fac:	e9 80       	ldd	r14, Y+1	; 0x01
    1fae:	fa 80       	ldd	r15, Y+2	; 0x02
    1fb0:	f7 01       	movw	r30, r14
    1fb2:	82 a5       	ldd	r24, Z+42	; 0x2a
    1fb4:	93 a5       	ldd	r25, Z+43	; 0x2b
    1fb6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1fb8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1fba:	f8 01       	movw	r30, r16
    1fbc:	82 8f       	std	Z+26, r24	; 0x1a
    1fbe:	93 8f       	std	Z+27, r25	; 0x1b
    1fc0:	a4 8f       	std	Z+28, r26	; 0x1c
    1fc2:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    1fc4:	d7 8e       	std	Z+31, r13	; 0x1f
    1fc6:	c6 8e       	std	Z+30, r12	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    1fc8:	a4 82       	std	Z+4, r10	; 0x04
			fp->err = 0;						/* Clear error flag */
    1fca:	15 82       	std	Z+5, r1	; 0x05
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    1fcc:	b6 01       	movw	r22, r12
    1fce:	c7 01       	movw	r24, r14
    1fd0:	0e 94 af 02 	call	0x55e	; 0x55e <ld_clust>
    1fd4:	d8 01       	movw	r26, r16
    1fd6:	1e 96       	adiw	r26, 0x0e	; 14
    1fd8:	6d 93       	st	X+, r22
    1fda:	7d 93       	st	X+, r23
    1fdc:	8d 93       	st	X+, r24
    1fde:	9c 93       	st	X, r25
    1fe0:	51 97       	sbiw	r26, 0x11	; 17
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1fe2:	f6 01       	movw	r30, r12
    1fe4:	44 8d       	ldd	r20, Z+28	; 0x1c
    1fe6:	55 8d       	ldd	r21, Z+29	; 0x1d
    1fe8:	66 8d       	ldd	r22, Z+30	; 0x1e
    1fea:	77 8d       	ldd	r23, Z+31	; 0x1f
    1fec:	1a 96       	adiw	r26, 0x0a	; 10
    1fee:	4d 93       	st	X+, r20
    1ff0:	5d 93       	st	X+, r21
    1ff2:	6d 93       	st	X+, r22
    1ff4:	7c 93       	st	X, r23
    1ff6:	1d 97       	sbiw	r26, 0x0d	; 13
			fp->fptr = 0;						/* File pointer */
    1ff8:	f8 01       	movw	r30, r16
    1ffa:	16 82       	std	Z+6, r1	; 0x06
    1ffc:	17 82       	std	Z+7, r1	; 0x07
    1ffe:	10 86       	std	Z+8, r1	; 0x08
    2000:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    2002:	56 96       	adiw	r26, 0x16	; 22
    2004:	1d 92       	st	X+, r1
    2006:	1d 92       	st	X+, r1
    2008:	1d 92       	st	X+, r1
    200a:	1c 92       	st	X, r1
    200c:	59 97       	sbiw	r26, 0x19	; 25
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    200e:	11 96       	adiw	r26, 0x01	; 1
    2010:	fc 92       	st	X, r15
    2012:	ee 92       	st	-X, r14
			fp->id = fp->fs->id;
    2014:	f7 01       	movw	r30, r14
    2016:	86 81       	ldd	r24, Z+6	; 0x06
    2018:	97 81       	ldd	r25, Z+7	; 0x07
    201a:	13 96       	adiw	r26, 0x03	; 3
    201c:	9c 93       	st	X, r25
    201e:	8e 93       	st	-X, r24
    2020:	12 97       	sbiw	r26, 0x02	; 2
    2022:	27 c0       	rjmp	.+78     	; 0x2072 <f_open+0x230>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    2024:	0f 2e       	mov	r0, r31
    2026:	f9 e0       	ldi	r31, 0x09	; 9
    2028:	bf 2e       	mov	r11, r31
    202a:	f0 2d       	mov	r31, r0
    202c:	22 c0       	rjmp	.+68     	; 0x2072 <f_open+0x230>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    202e:	8f 2d       	mov	r24, r15
    2030:	8c 71       	andi	r24, 0x1C	; 28
    2032:	09 f0       	breq	.+2      	; 0x2036 <f_open+0x1f4>
    2034:	5a cf       	rjmp	.-332    	; 0x1eea <f_open+0xa8>
    2036:	aa cf       	rjmp	.-172    	; 0x1f8c <f_open+0x14a>
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
    2038:	86 e0       	ldi	r24, 0x06	; 6
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    203a:	9f 2d       	mov	r25, r15
    203c:	9c 71       	andi	r25, 0x1C	; 28
    203e:	09 f0       	breq	.+2      	; 0x2042 <f_open+0x200>
    2040:	43 cf       	rjmp	.-378    	; 0x1ec8 <f_open+0x86>
    2042:	ae cf       	rjmp	.-164    	; 0x1fa0 <f_open+0x15e>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    2044:	0f 2e       	mov	r0, r31
    2046:	f7 e0       	ldi	r31, 0x07	; 7
    2048:	bf 2e       	mov	r11, r31
    204a:	f0 2d       	mov	r31, r0
    204c:	12 c0       	rjmp	.+36     	; 0x2072 <f_open+0x230>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    204e:	68 94       	set
    2050:	bb 24       	eor	r11, r11
    2052:	b3 f8       	bld	r11, 3
    2054:	0e c0       	rjmp	.+28     	; 0x2072 <f_open+0x230>
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    2056:	b8 2e       	mov	r11, r24
    2058:	0c c0       	rjmp	.+24     	; 0x2072 <f_open+0x230>
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
				if (cl) {						/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
    205a:	b8 2e       	mov	r11, r24
    205c:	0a c0       	rjmp	.+20     	; 0x2072 <f_open+0x230>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
    205e:	68 94       	set
    2060:	bb 24       	eor	r11, r11
    2062:	b2 f8       	bld	r11, 2
    2064:	06 c0       	rjmp	.+12     	; 0x2072 <f_open+0x230>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    2066:	0f 2e       	mov	r0, r31
    2068:	f7 e0       	ldi	r31, 0x07	; 7
    206a:	bf 2e       	mov	r11, r31
    206c:	f0 2d       	mov	r31, r0
    206e:	01 c0       	rjmp	.+2      	; 0x2072 <f_open+0x230>
				}
			}
		}
		if (res == FR_OK) {
    2070:	b8 2e       	mov	r11, r24
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    2072:	8b 2d       	mov	r24, r11
    2074:	a8 96       	adiw	r28, 0x28	; 40
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	1f 91       	pop	r17
    2086:	0f 91       	pop	r16
    2088:	ff 90       	pop	r15
    208a:	ef 90       	pop	r14
    208c:	df 90       	pop	r13
    208e:	cf 90       	pop	r12
    2090:	bf 90       	pop	r11
    2092:	af 90       	pop	r10
    2094:	7f 90       	pop	r7
    2096:	6f 90       	pop	r6
    2098:	5f 90       	pop	r5
    209a:	4f 90       	pop	r4
    209c:	08 95       	ret

0000209e <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
    209e:	3f 92       	push	r3
    20a0:	4f 92       	push	r4
    20a2:	5f 92       	push	r5
    20a4:	6f 92       	push	r6
    20a6:	7f 92       	push	r7
    20a8:	8f 92       	push	r8
    20aa:	9f 92       	push	r9
    20ac:	af 92       	push	r10
    20ae:	bf 92       	push	r11
    20b0:	cf 92       	push	r12
    20b2:	df 92       	push	r13
    20b4:	ef 92       	push	r14
    20b6:	ff 92       	push	r15
    20b8:	0f 93       	push	r16
    20ba:	1f 93       	push	r17
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <f_read+0x24>
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <f_read+0x26>
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
    20cc:	96 2e       	mov	r9, r22
    20ce:	17 2f       	mov	r17, r23
    20d0:	7a 01       	movw	r14, r20
    20d2:	69 01       	movw	r12, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    20d4:	d9 01       	movw	r26, r18
    20d6:	1d 92       	st	X+, r1
    20d8:	1c 92       	st	X, r1

	res = validate(fp);							/* Check validity */
    20da:	0e 94 11 03 	call	0x622	; 0x622 <validate>
    20de:	38 2e       	mov	r3, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    20e0:	81 11       	cpse	r24, r1
    20e2:	57 c1       	rjmp	.+686    	; 0x2392 <f_read+0x2f4>
	if (fp->err)								/* Check error */
    20e4:	eb 81       	ldd	r30, Y+3	; 0x03
    20e6:	fc 81       	ldd	r31, Y+4	; 0x04
    20e8:	85 81       	ldd	r24, Z+5	; 0x05
    20ea:	81 11       	cpse	r24, r1
    20ec:	4c c1       	rjmp	.+664    	; 0x2386 <f_read+0x2e8>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    20ee:	84 81       	ldd	r24, Z+4	; 0x04
    20f0:	80 ff       	sbrs	r24, 0
    20f2:	4b c1       	rjmp	.+662    	; 0x238a <f_read+0x2ec>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    20f4:	82 85       	ldd	r24, Z+10	; 0x0a
    20f6:	93 85       	ldd	r25, Z+11	; 0x0b
    20f8:	a4 85       	ldd	r26, Z+12	; 0x0c
    20fa:	b5 85       	ldd	r27, Z+13	; 0x0d
    20fc:	46 81       	ldd	r20, Z+6	; 0x06
    20fe:	57 81       	ldd	r21, Z+7	; 0x07
    2100:	60 85       	ldd	r22, Z+8	; 0x08
    2102:	71 85       	ldd	r23, Z+9	; 0x09
    2104:	84 1b       	sub	r24, r20
    2106:	95 0b       	sbc	r25, r21
    2108:	a6 0b       	sbc	r26, r22
    210a:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    210c:	a7 01       	movw	r20, r14
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	84 17       	cp	r24, r20
    2114:	95 07       	cpc	r25, r21
    2116:	a6 07       	cpc	r26, r22
    2118:	b7 07       	cpc	r27, r23
    211a:	08 f4       	brcc	.+2      	; 0x211e <f_read+0x80>
    211c:	7c 01       	movw	r14, r24

	for ( ;  btr;								/* Repeat until all data read */
    211e:	e1 14       	cp	r14, r1
    2120:	f1 04       	cpc	r15, r1
    2122:	09 f4       	brne	.+2      	; 0x2126 <f_read+0x88>
    2124:	36 c1       	rjmp	.+620    	; 0x2392 <f_read+0x2f4>
    2126:	a9 2c       	mov	r10, r9
    2128:	b1 2e       	mov	r11, r17
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    212a:	eb 81       	ldd	r30, Y+3	; 0x03
    212c:	fc 81       	ldd	r31, Y+4	; 0x04
    212e:	86 81       	ldd	r24, Z+6	; 0x06
    2130:	97 81       	ldd	r25, Z+7	; 0x07
    2132:	a0 85       	ldd	r26, Z+8	; 0x08
    2134:	b1 85       	ldd	r27, Z+9	; 0x09
    2136:	ac 01       	movw	r20, r24
    2138:	bd 01       	movw	r22, r26
    213a:	51 70       	andi	r21, 0x01	; 1
    213c:	66 27       	eor	r22, r22
    213e:	77 27       	eor	r23, r23
    2140:	45 2b       	or	r20, r21
    2142:	46 2b       	or	r20, r22
    2144:	47 2b       	or	r20, r23
    2146:	09 f0       	breq	.+2      	; 0x214a <f_read+0xac>
    2148:	c7 c0       	rjmp	.+398    	; 0x22d8 <f_read+0x23a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    214a:	20 81       	ld	r18, Z
    214c:	31 81       	ldd	r19, Z+1	; 0x01
    214e:	ac 01       	movw	r20, r24
    2150:	bd 01       	movw	r22, r26
    2152:	03 2e       	mov	r0, r19
    2154:	39 e0       	ldi	r19, 0x09	; 9
    2156:	76 95       	lsr	r23
    2158:	67 95       	ror	r22
    215a:	57 95       	ror	r21
    215c:	47 95       	ror	r20
    215e:	3a 95       	dec	r19
    2160:	d1 f7       	brne	.-12     	; 0x2156 <f_read+0xb8>
    2162:	30 2d       	mov	r19, r0
    2164:	f9 01       	movw	r30, r18
    2166:	12 81       	ldd	r17, Z+2	; 0x02
    2168:	11 50       	subi	r17, 0x01	; 1
    216a:	14 23       	and	r17, r20
			if (!csect) {						/* On the cluster boundary? */
    216c:	c9 f5       	brne	.+114    	; 0x21e0 <f_read+0x142>
				if (fp->fptr == 0) {			/* On the top of the file? */
    216e:	89 2b       	or	r24, r25
    2170:	8a 2b       	or	r24, r26
    2172:	8b 2b       	or	r24, r27
    2174:	49 f4       	brne	.+18     	; 0x2188 <f_read+0xea>
					clst = fp->sclust;			/* Follow from the origin */
    2176:	ab 81       	ldd	r26, Y+3	; 0x03
    2178:	bc 81       	ldd	r27, Y+4	; 0x04
    217a:	1e 96       	adiw	r26, 0x0e	; 14
    217c:	6d 91       	ld	r22, X+
    217e:	7d 91       	ld	r23, X+
    2180:	8d 91       	ld	r24, X+
    2182:	9c 91       	ld	r25, X
    2184:	51 97       	sbiw	r26, 0x11	; 17
    2186:	09 c0       	rjmp	.+18     	; 0x219a <f_read+0xfc>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    2188:	eb 81       	ldd	r30, Y+3	; 0x03
    218a:	fc 81       	ldd	r31, Y+4	; 0x04
    218c:	42 89       	ldd	r20, Z+18	; 0x12
    218e:	53 89       	ldd	r21, Z+19	; 0x13
    2190:	64 89       	ldd	r22, Z+20	; 0x14
    2192:	75 89       	ldd	r23, Z+21	; 0x15
    2194:	c9 01       	movw	r24, r18
    2196:	0e 94 89 07 	call	0xf12	; 0xf12 <get_fat>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    219a:	62 30       	cpi	r22, 0x02	; 2
    219c:	71 05       	cpc	r23, r1
    219e:	81 05       	cpc	r24, r1
    21a0:	91 05       	cpc	r25, r1
    21a2:	48 f4       	brcc	.+18     	; 0x21b6 <f_read+0x118>
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	ab 81       	ldd	r26, Y+3	; 0x03
    21a8:	bc 81       	ldd	r27, Y+4	; 0x04
    21aa:	15 96       	adiw	r26, 0x05	; 5
    21ac:	8c 93       	st	X, r24
    21ae:	68 94       	set
    21b0:	33 24       	eor	r3, r3
    21b2:	31 f8       	bld	r3, 1
    21b4:	ee c0       	rjmp	.+476    	; 0x2392 <f_read+0x2f4>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    21b6:	6f 3f       	cpi	r22, 0xFF	; 255
    21b8:	bf ef       	ldi	r27, 0xFF	; 255
    21ba:	7b 07       	cpc	r23, r27
    21bc:	8b 07       	cpc	r24, r27
    21be:	9b 07       	cpc	r25, r27
    21c0:	39 f4       	brne	.+14     	; 0x21d0 <f_read+0x132>
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	eb 81       	ldd	r30, Y+3	; 0x03
    21c6:	fc 81       	ldd	r31, Y+4	; 0x04
    21c8:	85 83       	std	Z+5, r24	; 0x05
    21ca:	33 24       	eor	r3, r3
    21cc:	33 94       	inc	r3
    21ce:	e1 c0       	rjmp	.+450    	; 0x2392 <f_read+0x2f4>
				fp->clust = clst;				/* Update current cluster */
    21d0:	ab 81       	ldd	r26, Y+3	; 0x03
    21d2:	bc 81       	ldd	r27, Y+4	; 0x04
    21d4:	52 96       	adiw	r26, 0x12	; 18
    21d6:	6d 93       	st	X+, r22
    21d8:	7d 93       	st	X+, r23
    21da:	8d 93       	st	X+, r24
    21dc:	9c 93       	st	X, r25
    21de:	55 97       	sbiw	r26, 0x15	; 21
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    21e0:	eb 81       	ldd	r30, Y+3	; 0x03
    21e2:	fc 81       	ldd	r31, Y+4	; 0x04
    21e4:	01 90       	ld	r0, Z+
    21e6:	f0 81       	ld	r31, Z
    21e8:	e0 2d       	mov	r30, r0
    21ea:	fa 83       	std	Y+2, r31	; 0x02
    21ec:	e9 83       	std	Y+1, r30	; 0x01
    21ee:	ab 81       	ldd	r26, Y+3	; 0x03
    21f0:	bc 81       	ldd	r27, Y+4	; 0x04
    21f2:	52 96       	adiw	r26, 0x12	; 18
    21f4:	4d 91       	ld	r20, X+
    21f6:	5d 91       	ld	r21, X+
    21f8:	6d 91       	ld	r22, X+
    21fa:	7c 91       	ld	r23, X
    21fc:	55 97       	sbiw	r26, 0x15	; 21
    21fe:	cf 01       	movw	r24, r30
    2200:	0e 94 53 07 	call	0xea6	; 0xea6 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2204:	61 15       	cp	r22, r1
    2206:	71 05       	cpc	r23, r1
    2208:	81 05       	cpc	r24, r1
    220a:	91 05       	cpc	r25, r1
    220c:	41 f4       	brne	.+16     	; 0x221e <f_read+0x180>
    220e:	82 e0       	ldi	r24, 0x02	; 2
    2210:	eb 81       	ldd	r30, Y+3	; 0x03
    2212:	fc 81       	ldd	r31, Y+4	; 0x04
    2214:	85 83       	std	Z+5, r24	; 0x05
    2216:	68 94       	set
    2218:	33 24       	eor	r3, r3
    221a:	31 f8       	bld	r3, 1
    221c:	ba c0       	rjmp	.+372    	; 0x2392 <f_read+0x2f4>
			sect += csect;
    221e:	2b 01       	movw	r4, r22
    2220:	3c 01       	movw	r6, r24
    2222:	41 0e       	add	r4, r17
    2224:	51 1c       	adc	r5, r1
    2226:	61 1c       	adc	r6, r1
    2228:	71 1c       	adc	r7, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    222a:	47 01       	movw	r8, r14
    222c:	89 2c       	mov	r8, r9
    222e:	99 24       	eor	r9, r9
    2230:	86 94       	lsr	r8
			if (cc) {							/* Read maximum contiguous sectors directly */
    2232:	81 14       	cp	r8, r1
    2234:	91 04       	cpc	r9, r1
    2236:	09 f4       	brne	.+2      	; 0x223a <f_read+0x19c>
    2238:	49 c0       	rjmp	.+146    	; 0x22cc <f_read+0x22e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    223a:	a9 81       	ldd	r26, Y+1	; 0x01
    223c:	ba 81       	ldd	r27, Y+2	; 0x02
    223e:	12 96       	adiw	r26, 0x02	; 2
    2240:	4c 91       	ld	r20, X
    2242:	94 01       	movw	r18, r8
    2244:	21 0f       	add	r18, r17
    2246:	31 1d       	adc	r19, r1
    2248:	84 2f       	mov	r24, r20
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	82 17       	cp	r24, r18
    224e:	93 07       	cpc	r25, r19
    2250:	18 f4       	brcc	.+6      	; 0x2258 <f_read+0x1ba>
					cc = fp->fs->csize - csect;
    2252:	4c 01       	movw	r8, r24
    2254:	81 1a       	sub	r8, r17
    2256:	91 08       	sbc	r9, r1
				if (disk_read(fp->fs->drv, rbuff, sect, cc))
    2258:	84 01       	movw	r16, r8
    225a:	a3 01       	movw	r20, r6
    225c:	92 01       	movw	r18, r4
    225e:	b5 01       	movw	r22, r10
    2260:	e9 81       	ldd	r30, Y+1	; 0x01
    2262:	fa 81       	ldd	r31, Y+2	; 0x02
    2264:	81 81       	ldd	r24, Z+1	; 0x01
    2266:	0e 94 8c 1b 	call	0x3718	; 0x3718 <disk_read>
    226a:	88 23       	and	r24, r24
    226c:	41 f0       	breq	.+16     	; 0x227e <f_read+0x1e0>
					ABORT(fp->fs, FR_DISK_ERR);
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	ab 81       	ldd	r26, Y+3	; 0x03
    2272:	bc 81       	ldd	r27, Y+4	; 0x04
    2274:	15 96       	adiw	r26, 0x05	; 5
    2276:	8c 93       	st	X, r24
    2278:	33 24       	eor	r3, r3
    227a:	33 94       	inc	r3
    227c:	8a c0       	rjmp	.+276    	; 0x2392 <f_read+0x2f4>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    227e:	ab 81       	ldd	r26, Y+3	; 0x03
    2280:	bc 81       	ldd	r27, Y+4	; 0x04
    2282:	ed 91       	ld	r30, X+
    2284:	fc 91       	ld	r31, X
    2286:	84 81       	ldd	r24, Z+4	; 0x04
    2288:	88 23       	and	r24, r24
    228a:	e1 f0       	breq	.+56     	; 0x22c4 <f_read+0x226>
    228c:	82 a5       	ldd	r24, Z+42	; 0x2a
    228e:	93 a5       	ldd	r25, Z+43	; 0x2b
    2290:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2292:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2294:	84 19       	sub	r24, r4
    2296:	95 09       	sbc	r25, r5
    2298:	a6 09       	sbc	r26, r6
    229a:	b7 09       	sbc	r27, r7
    229c:	a4 01       	movw	r20, r8
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	84 17       	cp	r24, r20
    22a4:	95 07       	cpc	r25, r21
    22a6:	a6 07       	cpc	r26, r22
    22a8:	b7 07       	cpc	r27, r23
    22aa:	60 f4       	brcc	.+24     	; 0x22c4 <f_read+0x226>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    22ac:	bf 01       	movw	r22, r30
    22ae:	62 5d       	subi	r22, 0xD2	; 210
    22b0:	7f 4f       	sbci	r23, 0xFF	; 255
    22b2:	98 2f       	mov	r25, r24
    22b4:	88 27       	eor	r24, r24
    22b6:	99 0f       	add	r25, r25
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	52 e0       	ldi	r21, 0x02	; 2
    22bc:	8a 0d       	add	r24, r10
    22be:	9b 1d       	adc	r25, r11
    22c0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    22c4:	98 2c       	mov	r9, r8
    22c6:	88 24       	eor	r8, r8
    22c8:	99 0c       	add	r9, r9
				continue;
    22ca:	40 c0       	rjmp	.+128    	; 0x234c <f_read+0x2ae>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1))	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    22cc:	eb 81       	ldd	r30, Y+3	; 0x03
    22ce:	fc 81       	ldd	r31, Y+4	; 0x04
    22d0:	46 8a       	std	Z+22, r4	; 0x16
    22d2:	57 8a       	std	Z+23, r5	; 0x17
    22d4:	60 8e       	std	Z+24, r6	; 0x18
    22d6:	71 8e       	std	Z+25, r7	; 0x19
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    22d8:	eb 81       	ldd	r30, Y+3	; 0x03
    22da:	fc 81       	ldd	r31, Y+4	; 0x04
    22dc:	86 81       	ldd	r24, Z+6	; 0x06
    22de:	97 81       	ldd	r25, Z+7	; 0x07
    22e0:	a0 85       	ldd	r26, Z+8	; 0x08
    22e2:	b1 85       	ldd	r27, Z+9	; 0x09
    22e4:	91 70       	andi	r25, 0x01	; 1
    22e6:	aa 27       	eor	r26, r26
    22e8:	bb 27       	eor	r27, r27
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	32 e0       	ldi	r19, 0x02	; 2
    22ee:	28 1b       	sub	r18, r24
    22f0:	39 0b       	sbc	r19, r25
    22f2:	47 01       	movw	r8, r14
    22f4:	2e 15       	cp	r18, r14
    22f6:	3f 05       	cpc	r19, r15
    22f8:	08 f4       	brcc	.+2      	; 0x22fc <f_read+0x25e>
    22fa:	49 01       	movw	r8, r18
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    22fc:	ab 81       	ldd	r26, Y+3	; 0x03
    22fe:	bc 81       	ldd	r27, Y+4	; 0x04
    2300:	56 96       	adiw	r26, 0x16	; 22
    2302:	4d 91       	ld	r20, X+
    2304:	5d 91       	ld	r21, X+
    2306:	6d 91       	ld	r22, X+
    2308:	7c 91       	ld	r23, X
    230a:	59 97       	sbiw	r26, 0x19	; 25
    230c:	8d 91       	ld	r24, X+
    230e:	9c 91       	ld	r25, X
    2310:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
    2314:	88 23       	and	r24, r24
    2316:	39 f0       	breq	.+14     	; 0x2326 <f_read+0x288>
			ABORT(fp->fs, FR_DISK_ERR);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	eb 81       	ldd	r30, Y+3	; 0x03
    231c:	fc 81       	ldd	r31, Y+4	; 0x04
    231e:	85 83       	std	Z+5, r24	; 0x05
    2320:	33 24       	eor	r3, r3
    2322:	33 94       	inc	r3
    2324:	36 c0       	rjmp	.+108    	; 0x2392 <f_read+0x2f4>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    2326:	eb 81       	ldd	r30, Y+3	; 0x03
    2328:	fc 81       	ldd	r31, Y+4	; 0x04
    232a:	86 81       	ldd	r24, Z+6	; 0x06
    232c:	97 81       	ldd	r25, Z+7	; 0x07
    232e:	a0 85       	ldd	r26, Z+8	; 0x08
    2330:	b1 85       	ldd	r27, Z+9	; 0x09
    2332:	91 70       	andi	r25, 0x01	; 1
    2334:	aa 27       	eor	r26, r26
    2336:	bb 27       	eor	r27, r27
    2338:	8e 96       	adiw	r24, 0x2e	; 46
    233a:	20 81       	ld	r18, Z
    233c:	31 81       	ldd	r19, Z+1	; 0x01
    233e:	b9 01       	movw	r22, r18
    2340:	68 0f       	add	r22, r24
    2342:	79 1f       	adc	r23, r25
    2344:	a4 01       	movw	r20, r8
    2346:	c5 01       	movw	r24, r10
    2348:	0e 94 74 02 	call	0x4e8	; 0x4e8 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    234c:	a8 0c       	add	r10, r8
    234e:	b9 1c       	adc	r11, r9
    2350:	eb 81       	ldd	r30, Y+3	; 0x03
    2352:	fc 81       	ldd	r31, Y+4	; 0x04
    2354:	86 81       	ldd	r24, Z+6	; 0x06
    2356:	97 81       	ldd	r25, Z+7	; 0x07
    2358:	a0 85       	ldd	r26, Z+8	; 0x08
    235a:	b1 85       	ldd	r27, Z+9	; 0x09
    235c:	88 0d       	add	r24, r8
    235e:	99 1d       	adc	r25, r9
    2360:	a1 1d       	adc	r26, r1
    2362:	b1 1d       	adc	r27, r1
    2364:	86 83       	std	Z+6, r24	; 0x06
    2366:	97 83       	std	Z+7, r25	; 0x07
    2368:	a0 87       	std	Z+8, r26	; 0x08
    236a:	b1 87       	std	Z+9, r27	; 0x09
    236c:	d6 01       	movw	r26, r12
    236e:	8d 91       	ld	r24, X+
    2370:	9c 91       	ld	r25, X
    2372:	11 97       	sbiw	r26, 0x01	; 1
    2374:	88 0d       	add	r24, r8
    2376:	99 1d       	adc	r25, r9
    2378:	8d 93       	st	X+, r24
    237a:	9c 93       	st	X, r25
    237c:	e8 18       	sub	r14, r8
    237e:	f9 08       	sbc	r15, r9
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    2380:	09 f0       	breq	.+2      	; 0x2384 <f_read+0x2e6>
    2382:	d3 ce       	rjmp	.-602    	; 0x212a <f_read+0x8c>
    2384:	06 c0       	rjmp	.+12     	; 0x2392 <f_read+0x2f4>
	*br = 0;	/* Clear read byte counter */

	res = validate(fp);							/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)								/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    2386:	38 2e       	mov	r3, r24
    2388:	04 c0       	rjmp	.+8      	; 0x2392 <f_read+0x2f4>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    238a:	0f 2e       	mov	r0, r31
    238c:	f7 e0       	ldi	r31, 0x07	; 7
    238e:	3f 2e       	mov	r3, r31
    2390:	f0 2d       	mov	r31, r0
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    2392:	83 2d       	mov	r24, r3
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	1f 91       	pop	r17
    23a2:	0f 91       	pop	r16
    23a4:	ff 90       	pop	r15
    23a6:	ef 90       	pop	r14
    23a8:	df 90       	pop	r13
    23aa:	cf 90       	pop	r12
    23ac:	bf 90       	pop	r11
    23ae:	af 90       	pop	r10
    23b0:	9f 90       	pop	r9
    23b2:	8f 90       	pop	r8
    23b4:	7f 90       	pop	r7
    23b6:	6f 90       	pop	r6
    23b8:	5f 90       	pop	r5
    23ba:	4f 90       	pop	r4
    23bc:	3f 90       	pop	r3
    23be:	08 95       	ret

000023c0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    23c0:	2f 92       	push	r2
    23c2:	3f 92       	push	r3
    23c4:	4f 92       	push	r4
    23c6:	5f 92       	push	r5
    23c8:	6f 92       	push	r6
    23ca:	7f 92       	push	r7
    23cc:	8f 92       	push	r8
    23ce:	9f 92       	push	r9
    23d0:	af 92       	push	r10
    23d2:	bf 92       	push	r11
    23d4:	cf 92       	push	r12
    23d6:	df 92       	push	r13
    23d8:	ef 92       	push	r14
    23da:	ff 92       	push	r15
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <f_write+0x26>
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <f_write+0x28>
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	9c 83       	std	Y+4, r25	; 0x04
    23ee:	8b 83       	std	Y+3, r24	; 0x03
    23f0:	96 2e       	mov	r9, r22
    23f2:	17 2f       	mov	r17, r23
    23f4:	7a 01       	movw	r14, r20
    23f6:	69 01       	movw	r12, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    23f8:	d9 01       	movw	r26, r18
    23fa:	1d 92       	st	X+, r1
    23fc:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    23fe:	0e 94 11 03 	call	0x622	; 0x622 <validate>
    2402:	38 2e       	mov	r3, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2404:	81 11       	cpse	r24, r1
    2406:	d3 c1       	rjmp	.+934    	; 0x27ae <f_write+0x3ee>
	if (fp->err)							/* Check error */
    2408:	eb 81       	ldd	r30, Y+3	; 0x03
    240a:	fc 81       	ldd	r31, Y+4	; 0x04
    240c:	85 81       	ldd	r24, Z+5	; 0x05
    240e:	81 11       	cpse	r24, r1
    2410:	c8 c1       	rjmp	.+912    	; 0x27a2 <f_write+0x3e2>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    2412:	84 81       	ldd	r24, Z+4	; 0x04
    2414:	81 ff       	sbrs	r24, 1
    2416:	c7 c1       	rjmp	.+910    	; 0x27a6 <f_write+0x3e6>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    2418:	86 81       	ldd	r24, Z+6	; 0x06
    241a:	97 81       	ldd	r25, Z+7	; 0x07
    241c:	a0 85       	ldd	r26, Z+8	; 0x08
    241e:	b1 85       	ldd	r27, Z+9	; 0x09
    2420:	ac 01       	movw	r20, r24
    2422:	bd 01       	movw	r22, r26
    2424:	4e 0d       	add	r20, r14
    2426:	5f 1d       	adc	r21, r15
    2428:	61 1d       	adc	r22, r1
    242a:	71 1d       	adc	r23, r1
    242c:	48 17       	cp	r20, r24
    242e:	59 07       	cpc	r21, r25
    2430:	6a 07       	cpc	r22, r26
    2432:	7b 07       	cpc	r23, r27
    2434:	08 f4       	brcc	.+2      	; 0x2438 <f_write+0x78>
    2436:	99 c1       	rjmp	.+818    	; 0x276a <f_write+0x3aa>

	for ( ;  btw;							/* Repeat until all data written */
    2438:	e1 14       	cp	r14, r1
    243a:	f1 04       	cpc	r15, r1
    243c:	09 f4       	brne	.+2      	; 0x2440 <f_write+0x80>
    243e:	95 c1       	rjmp	.+810    	; 0x276a <f_write+0x3aa>
    2440:	a9 2c       	mov	r10, r9
    2442:	b1 2e       	mov	r11, r17
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    2444:	22 24       	eor	r2, r2
    2446:	23 94       	inc	r2
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    2448:	eb 81       	ldd	r30, Y+3	; 0x03
    244a:	fc 81       	ldd	r31, Y+4	; 0x04
    244c:	86 81       	ldd	r24, Z+6	; 0x06
    244e:	97 81       	ldd	r25, Z+7	; 0x07
    2450:	a0 85       	ldd	r26, Z+8	; 0x08
    2452:	b1 85       	ldd	r27, Z+9	; 0x09
    2454:	ac 01       	movw	r20, r24
    2456:	bd 01       	movw	r22, r26
    2458:	51 70       	andi	r21, 0x01	; 1
    245a:	66 27       	eor	r22, r22
    245c:	77 27       	eor	r23, r23
    245e:	45 2b       	or	r20, r21
    2460:	46 2b       	or	r20, r22
    2462:	47 2b       	or	r20, r23
    2464:	09 f0       	breq	.+2      	; 0x2468 <f_write+0xa8>
    2466:	27 c1       	rjmp	.+590    	; 0x26b6 <f_write+0x2f6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2468:	20 81       	ld	r18, Z
    246a:	31 81       	ldd	r19, Z+1	; 0x01
    246c:	ac 01       	movw	r20, r24
    246e:	bd 01       	movw	r22, r26
    2470:	03 2e       	mov	r0, r19
    2472:	39 e0       	ldi	r19, 0x09	; 9
    2474:	76 95       	lsr	r23
    2476:	67 95       	ror	r22
    2478:	57 95       	ror	r21
    247a:	47 95       	ror	r20
    247c:	3a 95       	dec	r19
    247e:	d1 f7       	brne	.-12     	; 0x2474 <f_write+0xb4>
    2480:	30 2d       	mov	r19, r0
    2482:	f9 01       	movw	r30, r18
    2484:	12 81       	ldd	r17, Z+2	; 0x02
    2486:	11 50       	subi	r17, 0x01	; 1
    2488:	14 23       	and	r17, r20
			if (!csect) {					/* On the cluster boundary? */
    248a:	09 f0       	breq	.+2      	; 0x248e <f_write+0xce>
    248c:	50 c0       	rjmp	.+160    	; 0x252e <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    248e:	89 2b       	or	r24, r25
    2490:	8a 2b       	or	r24, r26
    2492:	8b 2b       	or	r24, r27
    2494:	d1 f4       	brne	.+52     	; 0x24ca <f_write+0x10a>
					clst = fp->sclust;		/* Follow from the origin */
    2496:	ab 81       	ldd	r26, Y+3	; 0x03
    2498:	bc 81       	ldd	r27, Y+4	; 0x04
    249a:	1e 96       	adiw	r26, 0x0e	; 14
    249c:	6d 91       	ld	r22, X+
    249e:	7d 91       	ld	r23, X+
    24a0:	8d 91       	ld	r24, X+
    24a2:	9c 91       	ld	r25, X
    24a4:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)			/* When no cluster is allocated, */
    24a6:	61 15       	cp	r22, r1
    24a8:	71 05       	cpc	r23, r1
    24aa:	81 05       	cpc	r24, r1
    24ac:	91 05       	cpc	r25, r1
    24ae:	f1 f4       	brne	.+60     	; 0x24ec <f_write+0x12c>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    24b0:	40 e0       	ldi	r20, 0x00	; 0
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	ba 01       	movw	r22, r20
    24b6:	c9 01       	movw	r24, r18
    24b8:	0e 94 30 0a 	call	0x1460	; 0x1460 <create_chain>
    24bc:	eb 81       	ldd	r30, Y+3	; 0x03
    24be:	fc 81       	ldd	r31, Y+4	; 0x04
    24c0:	66 87       	std	Z+14, r22	; 0x0e
    24c2:	77 87       	std	Z+15, r23	; 0x0f
    24c4:	80 8b       	std	Z+16, r24	; 0x10
    24c6:	91 8b       	std	Z+17, r25	; 0x11
    24c8:	0b c0       	rjmp	.+22     	; 0x24e0 <f_write+0x120>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    24ca:	ab 81       	ldd	r26, Y+3	; 0x03
    24cc:	bc 81       	ldd	r27, Y+4	; 0x04
    24ce:	52 96       	adiw	r26, 0x12	; 18
    24d0:	4d 91       	ld	r20, X+
    24d2:	5d 91       	ld	r21, X+
    24d4:	6d 91       	ld	r22, X+
    24d6:	7c 91       	ld	r23, X
    24d8:	55 97       	sbiw	r26, 0x15	; 21
    24da:	c9 01       	movw	r24, r18
    24dc:	0e 94 30 0a 	call	0x1460	; 0x1460 <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    24e0:	61 15       	cp	r22, r1
    24e2:	71 05       	cpc	r23, r1
    24e4:	81 05       	cpc	r24, r1
    24e6:	91 05       	cpc	r25, r1
    24e8:	09 f4       	brne	.+2      	; 0x24ec <f_write+0x12c>
    24ea:	3f c1       	rjmp	.+638    	; 0x276a <f_write+0x3aa>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    24ec:	61 30       	cpi	r22, 0x01	; 1
    24ee:	71 05       	cpc	r23, r1
    24f0:	81 05       	cpc	r24, r1
    24f2:	91 05       	cpc	r25, r1
    24f4:	41 f4       	brne	.+16     	; 0x2506 <f_write+0x146>
    24f6:	82 e0       	ldi	r24, 0x02	; 2
    24f8:	eb 81       	ldd	r30, Y+3	; 0x03
    24fa:	fc 81       	ldd	r31, Y+4	; 0x04
    24fc:	85 83       	std	Z+5, r24	; 0x05
    24fe:	68 94       	set
    2500:	33 24       	eor	r3, r3
    2502:	31 f8       	bld	r3, 1
    2504:	54 c1       	rjmp	.+680    	; 0x27ae <f_write+0x3ee>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2506:	6f 3f       	cpi	r22, 0xFF	; 255
    2508:	ff ef       	ldi	r31, 0xFF	; 255
    250a:	7f 07       	cpc	r23, r31
    250c:	8f 07       	cpc	r24, r31
    250e:	9f 07       	cpc	r25, r31
    2510:	41 f4       	brne	.+16     	; 0x2522 <f_write+0x162>
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	ab 81       	ldd	r26, Y+3	; 0x03
    2516:	bc 81       	ldd	r27, Y+4	; 0x04
    2518:	15 96       	adiw	r26, 0x05	; 5
    251a:	8c 93       	st	X, r24
    251c:	33 24       	eor	r3, r3
    251e:	33 94       	inc	r3
    2520:	46 c1       	rjmp	.+652    	; 0x27ae <f_write+0x3ee>
				fp->clust = clst;			/* Update current cluster */
    2522:	eb 81       	ldd	r30, Y+3	; 0x03
    2524:	fc 81       	ldd	r31, Y+4	; 0x04
    2526:	62 8b       	std	Z+18, r22	; 0x12
    2528:	73 8b       	std	Z+19, r23	; 0x13
    252a:	84 8b       	std	Z+20, r24	; 0x14
    252c:	95 8b       	std	Z+21, r25	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    252e:	ab 81       	ldd	r26, Y+3	; 0x03
    2530:	bc 81       	ldd	r27, Y+4	; 0x04
    2532:	2d 91       	ld	r18, X+
    2534:	3c 91       	ld	r19, X
    2536:	f9 01       	movw	r30, r18
    2538:	82 a5       	ldd	r24, Z+42	; 0x2a
    253a:	93 a5       	ldd	r25, Z+43	; 0x2b
    253c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    253e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2540:	eb 81       	ldd	r30, Y+3	; 0x03
    2542:	fc 81       	ldd	r31, Y+4	; 0x04
    2544:	46 89       	ldd	r20, Z+22	; 0x16
    2546:	57 89       	ldd	r21, Z+23	; 0x17
    2548:	60 8d       	ldd	r22, Z+24	; 0x18
    254a:	71 8d       	ldd	r23, Z+25	; 0x19
    254c:	84 17       	cp	r24, r20
    254e:	95 07       	cpc	r25, r21
    2550:	a6 07       	cpc	r26, r22
    2552:	b7 07       	cpc	r27, r23
    2554:	69 f4       	brne	.+26     	; 0x2570 <f_write+0x1b0>
    2556:	c9 01       	movw	r24, r18
    2558:	0e 94 36 03 	call	0x66c	; 0x66c <sync_window>
    255c:	88 23       	and	r24, r24
    255e:	41 f0       	breq	.+16     	; 0x2570 <f_write+0x1b0>
				ABORT(fp->fs, FR_DISK_ERR);
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	ab 81       	ldd	r26, Y+3	; 0x03
    2564:	bc 81       	ldd	r27, Y+4	; 0x04
    2566:	15 96       	adiw	r26, 0x05	; 5
    2568:	8c 93       	st	X, r24
    256a:	33 24       	eor	r3, r3
    256c:	33 94       	inc	r3
    256e:	1f c1       	rjmp	.+574    	; 0x27ae <f_write+0x3ee>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2570:	eb 81       	ldd	r30, Y+3	; 0x03
    2572:	fc 81       	ldd	r31, Y+4	; 0x04
    2574:	01 90       	ld	r0, Z+
    2576:	f0 81       	ld	r31, Z
    2578:	e0 2d       	mov	r30, r0
    257a:	fa 83       	std	Y+2, r31	; 0x02
    257c:	e9 83       	std	Y+1, r30	; 0x01
    257e:	ab 81       	ldd	r26, Y+3	; 0x03
    2580:	bc 81       	ldd	r27, Y+4	; 0x04
    2582:	52 96       	adiw	r26, 0x12	; 18
    2584:	4d 91       	ld	r20, X+
    2586:	5d 91       	ld	r21, X+
    2588:	6d 91       	ld	r22, X+
    258a:	7c 91       	ld	r23, X
    258c:	55 97       	sbiw	r26, 0x15	; 21
    258e:	cf 01       	movw	r24, r30
    2590:	0e 94 53 07 	call	0xea6	; 0xea6 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2594:	61 15       	cp	r22, r1
    2596:	71 05       	cpc	r23, r1
    2598:	81 05       	cpc	r24, r1
    259a:	91 05       	cpc	r25, r1
    259c:	41 f4       	brne	.+16     	; 0x25ae <f_write+0x1ee>
    259e:	82 e0       	ldi	r24, 0x02	; 2
    25a0:	eb 81       	ldd	r30, Y+3	; 0x03
    25a2:	fc 81       	ldd	r31, Y+4	; 0x04
    25a4:	85 83       	std	Z+5, r24	; 0x05
    25a6:	68 94       	set
    25a8:	33 24       	eor	r3, r3
    25aa:	31 f8       	bld	r3, 1
    25ac:	00 c1       	rjmp	.+512    	; 0x27ae <f_write+0x3ee>
			sect += csect;
    25ae:	2b 01       	movw	r4, r22
    25b0:	3c 01       	movw	r6, r24
    25b2:	41 0e       	add	r4, r17
    25b4:	51 1c       	adc	r5, r1
    25b6:	61 1c       	adc	r6, r1
    25b8:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    25ba:	47 01       	movw	r8, r14
    25bc:	89 2c       	mov	r8, r9
    25be:	99 24       	eor	r9, r9
    25c0:	86 94       	lsr	r8
			if (cc) {						/* Write maximum contiguous sectors directly */
    25c2:	81 14       	cp	r8, r1
    25c4:	91 04       	cpc	r9, r1
    25c6:	09 f4       	brne	.+2      	; 0x25ca <f_write+0x20a>
    25c8:	4b c0       	rjmp	.+150    	; 0x2660 <f_write+0x2a0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    25ca:	a9 81       	ldd	r26, Y+1	; 0x01
    25cc:	ba 81       	ldd	r27, Y+2	; 0x02
    25ce:	12 96       	adiw	r26, 0x02	; 2
    25d0:	4c 91       	ld	r20, X
    25d2:	94 01       	movw	r18, r8
    25d4:	21 0f       	add	r18, r17
    25d6:	31 1d       	adc	r19, r1
    25d8:	84 2f       	mov	r24, r20
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	82 17       	cp	r24, r18
    25de:	93 07       	cpc	r25, r19
    25e0:	18 f4       	brcc	.+6      	; 0x25e8 <f_write+0x228>
					cc = fp->fs->csize - csect;
    25e2:	4c 01       	movw	r8, r24
    25e4:	81 1a       	sub	r8, r17
    25e6:	91 08       	sbc	r9, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc))
    25e8:	84 01       	movw	r16, r8
    25ea:	a3 01       	movw	r20, r6
    25ec:	92 01       	movw	r18, r4
    25ee:	b5 01       	movw	r22, r10
    25f0:	e9 81       	ldd	r30, Y+1	; 0x01
    25f2:	fa 81       	ldd	r31, Y+2	; 0x02
    25f4:	81 81       	ldd	r24, Z+1	; 0x01
    25f6:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <disk_write>
    25fa:	88 23       	and	r24, r24
    25fc:	41 f0       	breq	.+16     	; 0x260e <f_write+0x24e>
					ABORT(fp->fs, FR_DISK_ERR);
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	ab 81       	ldd	r26, Y+3	; 0x03
    2602:	bc 81       	ldd	r27, Y+4	; 0x04
    2604:	15 96       	adiw	r26, 0x05	; 5
    2606:	8c 93       	st	X, r24
    2608:	33 24       	eor	r3, r3
    260a:	33 94       	inc	r3
    260c:	d0 c0       	rjmp	.+416    	; 0x27ae <f_write+0x3ee>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    260e:	ab 81       	ldd	r26, Y+3	; 0x03
    2610:	bc 81       	ldd	r27, Y+4	; 0x04
    2612:	ed 91       	ld	r30, X+
    2614:	fc 91       	ld	r31, X
    2616:	42 a5       	ldd	r20, Z+42	; 0x2a
    2618:	53 a5       	ldd	r21, Z+43	; 0x2b
    261a:	64 a5       	ldd	r22, Z+44	; 0x2c
    261c:	75 a5       	ldd	r23, Z+45	; 0x2d
    261e:	44 19       	sub	r20, r4
    2620:	55 09       	sbc	r21, r5
    2622:	66 09       	sbc	r22, r6
    2624:	77 09       	sbc	r23, r7
    2626:	c4 01       	movw	r24, r8
    2628:	a0 e0       	ldi	r26, 0x00	; 0
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	48 17       	cp	r20, r24
    262e:	59 07       	cpc	r21, r25
    2630:	6a 07       	cpc	r22, r26
    2632:	7b 07       	cpc	r23, r27
    2634:	88 f4       	brcc	.+34     	; 0x2658 <f_write+0x298>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    2636:	54 2f       	mov	r21, r20
    2638:	44 27       	eor	r20, r20
    263a:	55 0f       	add	r21, r21
    263c:	b5 01       	movw	r22, r10
    263e:	64 0f       	add	r22, r20
    2640:	75 1f       	adc	r23, r21
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	52 e0       	ldi	r21, 0x02	; 2
    2646:	cf 01       	movw	r24, r30
    2648:	8e 96       	adiw	r24, 0x2e	; 46
    264a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <mem_cpy>
					fp->fs->wflag = 0;
    264e:	ab 81       	ldd	r26, Y+3	; 0x03
    2650:	bc 81       	ldd	r27, Y+4	; 0x04
    2652:	ed 91       	ld	r30, X+
    2654:	fc 91       	ld	r31, X
    2656:	14 82       	std	Z+4, r1	; 0x04
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    2658:	98 2c       	mov	r9, r8
    265a:	88 24       	eor	r8, r8
    265c:	99 0c       	add	r9, r9
				continue;
    265e:	69 c0       	rjmp	.+210    	; 0x2732 <f_write+0x372>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    2660:	eb 81       	ldd	r30, Y+3	; 0x03
    2662:	fc 81       	ldd	r31, Y+4	; 0x04
    2664:	46 81       	ldd	r20, Z+6	; 0x06
    2666:	57 81       	ldd	r21, Z+7	; 0x07
    2668:	60 85       	ldd	r22, Z+8	; 0x08
    266a:	71 85       	ldd	r23, Z+9	; 0x09
    266c:	82 85       	ldd	r24, Z+10	; 0x0a
    266e:	93 85       	ldd	r25, Z+11	; 0x0b
    2670:	a4 85       	ldd	r26, Z+12	; 0x0c
    2672:	b5 85       	ldd	r27, Z+13	; 0x0d
    2674:	48 17       	cp	r20, r24
    2676:	59 07       	cpc	r21, r25
    2678:	6a 07       	cpc	r22, r26
    267a:	7b 07       	cpc	r23, r27
    267c:	b0 f0       	brcs	.+44     	; 0x26aa <f_write+0x2ea>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	0e 94 36 03 	call	0x66c	; 0x66c <sync_window>
    2686:	88 23       	and	r24, r24
    2688:	41 f0       	breq	.+16     	; 0x269a <f_write+0x2da>
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	ab 81       	ldd	r26, Y+3	; 0x03
    268e:	bc 81       	ldd	r27, Y+4	; 0x04
    2690:	15 96       	adiw	r26, 0x05	; 5
    2692:	8c 93       	st	X, r24
    2694:	33 24       	eor	r3, r3
    2696:	33 94       	inc	r3
    2698:	8a c0       	rjmp	.+276    	; 0x27ae <f_write+0x3ee>
				fp->fs->winsect = sect;
    269a:	ab 81       	ldd	r26, Y+3	; 0x03
    269c:	bc 81       	ldd	r27, Y+4	; 0x04
    269e:	ed 91       	ld	r30, X+
    26a0:	fc 91       	ld	r31, X
    26a2:	42 a6       	std	Z+42, r4	; 0x2a
    26a4:	53 a6       	std	Z+43, r5	; 0x2b
    26a6:	64 a6       	std	Z+44, r6	; 0x2c
    26a8:	75 a6       	std	Z+45, r7	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1))
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    26aa:	eb 81       	ldd	r30, Y+3	; 0x03
    26ac:	fc 81       	ldd	r31, Y+4	; 0x04
    26ae:	46 8a       	std	Z+22, r4	; 0x16
    26b0:	57 8a       	std	Z+23, r5	; 0x17
    26b2:	60 8e       	std	Z+24, r6	; 0x18
    26b4:	71 8e       	std	Z+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    26b6:	eb 81       	ldd	r30, Y+3	; 0x03
    26b8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ba:	86 81       	ldd	r24, Z+6	; 0x06
    26bc:	97 81       	ldd	r25, Z+7	; 0x07
    26be:	a0 85       	ldd	r26, Z+8	; 0x08
    26c0:	b1 85       	ldd	r27, Z+9	; 0x09
    26c2:	91 70       	andi	r25, 0x01	; 1
    26c4:	aa 27       	eor	r26, r26
    26c6:	bb 27       	eor	r27, r27
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	32 e0       	ldi	r19, 0x02	; 2
    26cc:	28 1b       	sub	r18, r24
    26ce:	39 0b       	sbc	r19, r25
    26d0:	47 01       	movw	r8, r14
    26d2:	2e 15       	cp	r18, r14
    26d4:	3f 05       	cpc	r19, r15
    26d6:	08 f4       	brcc	.+2      	; 0x26da <f_write+0x31a>
    26d8:	49 01       	movw	r8, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    26da:	ab 81       	ldd	r26, Y+3	; 0x03
    26dc:	bc 81       	ldd	r27, Y+4	; 0x04
    26de:	56 96       	adiw	r26, 0x16	; 22
    26e0:	4d 91       	ld	r20, X+
    26e2:	5d 91       	ld	r21, X+
    26e4:	6d 91       	ld	r22, X+
    26e6:	7c 91       	ld	r23, X
    26e8:	59 97       	sbiw	r26, 0x19	; 25
    26ea:	8d 91       	ld	r24, X+
    26ec:	9c 91       	ld	r25, X
    26ee:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
    26f2:	88 23       	and	r24, r24
    26f4:	39 f0       	breq	.+14     	; 0x2704 <f_write+0x344>
			ABORT(fp->fs, FR_DISK_ERR);
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	eb 81       	ldd	r30, Y+3	; 0x03
    26fa:	fc 81       	ldd	r31, Y+4	; 0x04
    26fc:	85 83       	std	Z+5, r24	; 0x05
    26fe:	33 24       	eor	r3, r3
    2700:	33 94       	inc	r3
    2702:	55 c0       	rjmp	.+170    	; 0x27ae <f_write+0x3ee>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2704:	eb 81       	ldd	r30, Y+3	; 0x03
    2706:	fc 81       	ldd	r31, Y+4	; 0x04
    2708:	86 81       	ldd	r24, Z+6	; 0x06
    270a:	97 81       	ldd	r25, Z+7	; 0x07
    270c:	a0 85       	ldd	r26, Z+8	; 0x08
    270e:	b1 85       	ldd	r27, Z+9	; 0x09
    2710:	91 70       	andi	r25, 0x01	; 1
    2712:	aa 27       	eor	r26, r26
    2714:	bb 27       	eor	r27, r27
    2716:	8e 96       	adiw	r24, 0x2e	; 46
    2718:	20 81       	ld	r18, Z
    271a:	31 81       	ldd	r19, Z+1	; 0x01
    271c:	a4 01       	movw	r20, r8
    271e:	b5 01       	movw	r22, r10
    2720:	82 0f       	add	r24, r18
    2722:	93 1f       	adc	r25, r19
    2724:	0e 94 74 02 	call	0x4e8	; 0x4e8 <mem_cpy>
		fp->fs->wflag = 1;
    2728:	ab 81       	ldd	r26, Y+3	; 0x03
    272a:	bc 81       	ldd	r27, Y+4	; 0x04
    272c:	ed 91       	ld	r30, X+
    272e:	fc 91       	ld	r31, X
    2730:	24 82       	std	Z+4, r2	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2732:	a8 0c       	add	r10, r8
    2734:	b9 1c       	adc	r11, r9
    2736:	eb 81       	ldd	r30, Y+3	; 0x03
    2738:	fc 81       	ldd	r31, Y+4	; 0x04
    273a:	86 81       	ldd	r24, Z+6	; 0x06
    273c:	97 81       	ldd	r25, Z+7	; 0x07
    273e:	a0 85       	ldd	r26, Z+8	; 0x08
    2740:	b1 85       	ldd	r27, Z+9	; 0x09
    2742:	88 0d       	add	r24, r8
    2744:	99 1d       	adc	r25, r9
    2746:	a1 1d       	adc	r26, r1
    2748:	b1 1d       	adc	r27, r1
    274a:	86 83       	std	Z+6, r24	; 0x06
    274c:	97 83       	std	Z+7, r25	; 0x07
    274e:	a0 87       	std	Z+8, r26	; 0x08
    2750:	b1 87       	std	Z+9, r27	; 0x09
    2752:	d6 01       	movw	r26, r12
    2754:	8d 91       	ld	r24, X+
    2756:	9c 91       	ld	r25, X
    2758:	11 97       	sbiw	r26, 0x01	; 1
    275a:	88 0d       	add	r24, r8
    275c:	99 1d       	adc	r25, r9
    275e:	8d 93       	st	X+, r24
    2760:	9c 93       	st	X, r25
    2762:	e8 18       	sub	r14, r8
    2764:	f9 08       	sbc	r15, r9
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2766:	09 f0       	breq	.+2      	; 0x276a <f_write+0x3aa>
    2768:	6f ce       	rjmp	.-802    	; 0x2448 <f_write+0x88>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    276a:	eb 81       	ldd	r30, Y+3	; 0x03
    276c:	fc 81       	ldd	r31, Y+4	; 0x04
    276e:	86 81       	ldd	r24, Z+6	; 0x06
    2770:	97 81       	ldd	r25, Z+7	; 0x07
    2772:	a0 85       	ldd	r26, Z+8	; 0x08
    2774:	b1 85       	ldd	r27, Z+9	; 0x09
    2776:	42 85       	ldd	r20, Z+10	; 0x0a
    2778:	53 85       	ldd	r21, Z+11	; 0x0b
    277a:	64 85       	ldd	r22, Z+12	; 0x0c
    277c:	75 85       	ldd	r23, Z+13	; 0x0d
    277e:	48 17       	cp	r20, r24
    2780:	59 07       	cpc	r21, r25
    2782:	6a 07       	cpc	r22, r26
    2784:	7b 07       	cpc	r23, r27
    2786:	20 f4       	brcc	.+8      	; 0x2790 <f_write+0x3d0>
    2788:	82 87       	std	Z+10, r24	; 0x0a
    278a:	93 87       	std	Z+11, r25	; 0x0b
    278c:	a4 87       	std	Z+12, r26	; 0x0c
    278e:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2790:	ab 81       	ldd	r26, Y+3	; 0x03
    2792:	bc 81       	ldd	r27, Y+4	; 0x04
    2794:	14 96       	adiw	r26, 0x04	; 4
    2796:	8c 91       	ld	r24, X
    2798:	14 97       	sbiw	r26, 0x04	; 4
    279a:	80 62       	ori	r24, 0x20	; 32
    279c:	14 96       	adiw	r26, 0x04	; 4
    279e:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
    27a0:	06 c0       	rjmp	.+12     	; 0x27ae <f_write+0x3ee>
	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    27a2:	38 2e       	mov	r3, r24
    27a4:	04 c0       	rjmp	.+8      	; 0x27ae <f_write+0x3ee>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    27a6:	0f 2e       	mov	r0, r31
    27a8:	f7 e0       	ldi	r31, 0x07	; 7
    27aa:	3f 2e       	mov	r3, r31
    27ac:	f0 2d       	mov	r31, r0

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    27ae:	83 2d       	mov	r24, r3
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	ff 90       	pop	r15
    27c2:	ef 90       	pop	r14
    27c4:	df 90       	pop	r13
    27c6:	cf 90       	pop	r12
    27c8:	bf 90       	pop	r11
    27ca:	af 90       	pop	r10
    27cc:	9f 90       	pop	r9
    27ce:	8f 90       	pop	r8
    27d0:	7f 90       	pop	r7
    27d2:	6f 90       	pop	r6
    27d4:	5f 90       	pop	r5
    27d6:	4f 90       	pop	r4
    27d8:	3f 90       	pop	r3
    27da:	2f 90       	pop	r2
    27dc:	08 95       	ret

000027de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    27e8:	0e 94 11 03 	call	0x622	; 0x622 <validate>
	if (res == FR_OK) {
    27ec:	81 11       	cpse	r24, r1
    27ee:	36 c0       	rjmp	.+108    	; 0x285c <f_sync+0x7e>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    27f0:	9c 81       	ldd	r25, Y+4	; 0x04
    27f2:	95 ff       	sbrs	r25, 5
    27f4:	33 c0       	rjmp	.+102    	; 0x285c <f_sync+0x7e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    27f6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    27f8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    27fa:	6c 8d       	ldd	r22, Y+28	; 0x1c
    27fc:	7d 8d       	ldd	r23, Y+29	; 0x1d
    27fe:	88 81       	ld	r24, Y
    2800:	99 81       	ldd	r25, Y+1	; 0x01
    2802:	0e 94 a0 03 	call	0x740	; 0x740 <move_window>
			if (res == FR_OK) {
    2806:	81 11       	cpse	r24, r1
    2808:	29 c0       	rjmp	.+82     	; 0x285c <f_sync+0x7e>
				dir = fp->dir_ptr;
    280a:	0e 8d       	ldd	r16, Y+30	; 0x1e
    280c:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    280e:	f8 01       	movw	r30, r16
    2810:	83 85       	ldd	r24, Z+11	; 0x0b
    2812:	80 62       	ori	r24, 0x20	; 32
    2814:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2816:	8a 85       	ldd	r24, Y+10	; 0x0a
    2818:	9b 85       	ldd	r25, Y+11	; 0x0b
    281a:	ac 85       	ldd	r26, Y+12	; 0x0c
    281c:	bd 85       	ldd	r27, Y+13	; 0x0d
    281e:	84 8f       	std	Z+28, r24	; 0x1c
    2820:	95 8f       	std	Z+29, r25	; 0x1d
    2822:	a6 8f       	std	Z+30, r26	; 0x1e
    2824:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    2826:	4e 85       	ldd	r20, Y+14	; 0x0e
    2828:	5f 85       	ldd	r21, Y+15	; 0x0f
    282a:	68 89       	ldd	r22, Y+16	; 0x10
    282c:	79 89       	ldd	r23, Y+17	; 0x11
    282e:	c8 01       	movw	r24, r16
    2830:	0e 94 cd 02 	call	0x59a	; 0x59a <st_clust>
				tm = get_fattime();							/* Update updated time */
    2834:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tm);
    2838:	f8 01       	movw	r30, r16
    283a:	66 8b       	std	Z+22, r22	; 0x16
    283c:	77 8b       	std	Z+23, r23	; 0x17
    283e:	80 8f       	std	Z+24, r24	; 0x18
    2840:	91 8f       	std	Z+25, r25	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    2842:	13 8a       	std	Z+19, r1	; 0x13
    2844:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    2846:	8c 81       	ldd	r24, Y+4	; 0x04
    2848:	8f 7d       	andi	r24, 0xDF	; 223
    284a:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    284c:	e8 81       	ld	r30, Y
    284e:	f9 81       	ldd	r31, Y+1	; 0x01
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    2854:	88 81       	ld	r24, Y
    2856:	99 81       	ldd	r25, Y+1	; 0x01
    2858:	0e 94 dd 06 	call	0xdba	; 0xdba <sync_fs>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	08 95       	ret

00002866 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    286c:	0e 94 ef 13 	call	0x27de	; 0x27de <f_sync>
	if (res == FR_OK)
    2870:	81 11       	cpse	r24, r1
    2872:	07 c0       	rjmp	.+14     	; 0x2882 <f_close+0x1c>
#endif
	{
		res = validate(fp);				/* Lock volume */
    2874:	ce 01       	movw	r24, r28
    2876:	0e 94 11 03 	call	0x622	; 0x622 <validate>
		if (res == FR_OK) {
    287a:	81 11       	cpse	r24, r1
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <f_close+0x1c>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    287e:	19 82       	std	Y+1, r1	; 0x01
    2880:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	08 95       	ret

00002888 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2888:	2f 92       	push	r2
    288a:	3f 92       	push	r3
    288c:	4f 92       	push	r4
    288e:	5f 92       	push	r5
    2890:	6f 92       	push	r6
    2892:	7f 92       	push	r7
    2894:	8f 92       	push	r8
    2896:	9f 92       	push	r9
    2898:	af 92       	push	r10
    289a:	bf 92       	push	r11
    289c:	cf 92       	push	r12
    289e:	df 92       	push	r13
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	1f 93       	push	r17
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <f_lseek+0x24>
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <f_lseek+0x26>
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <f_lseek+0x28>
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	9e 83       	std	Y+6, r25	; 0x06
    28b6:	8d 83       	std	Y+5, r24	; 0x05
    28b8:	6a 01       	movw	r12, r20
    28ba:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    28bc:	0e 94 11 03 	call	0x622	; 0x622 <validate>
    28c0:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    28c2:	81 11       	cpse	r24, r1
    28c4:	a7 c1       	rjmp	.+846    	; 0x2c14 <f_lseek+0x38c>
	if (fp->err)						/* Check error */
    28c6:	ad 81       	ldd	r26, Y+5	; 0x05
    28c8:	be 81       	ldd	r27, Y+6	; 0x06
    28ca:	15 96       	adiw	r26, 0x05	; 5
    28cc:	8c 91       	ld	r24, X
    28ce:	15 97       	sbiw	r26, 0x05	; 5
    28d0:	81 11       	cpse	r24, r1
    28d2:	9f c1       	rjmp	.+830    	; 0x2c12 <f_lseek+0x38a>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    28d4:	1a 96       	adiw	r26, 0x0a	; 10
    28d6:	8d 91       	ld	r24, X+
    28d8:	9d 91       	ld	r25, X+
    28da:	0d 90       	ld	r0, X+
    28dc:	bc 91       	ld	r27, X
    28de:	a0 2d       	mov	r26, r0
    28e0:	8c 15       	cp	r24, r12
    28e2:	9d 05       	cpc	r25, r13
    28e4:	ae 05       	cpc	r26, r14
    28e6:	bf 05       	cpc	r27, r15
    28e8:	38 f4       	brcc	.+14     	; 0x28f8 <f_lseek+0x70>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    28ea:	ed 81       	ldd	r30, Y+5	; 0x05
    28ec:	fe 81       	ldd	r31, Y+6	; 0x06
    28ee:	24 81       	ldd	r18, Z+4	; 0x04
    28f0:	21 fd       	sbrc	r18, 1
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <f_lseek+0x70>
#endif
			) ofs = fp->fsize;
    28f4:	6c 01       	movw	r12, r24
    28f6:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    28f8:	ad 81       	ldd	r26, Y+5	; 0x05
    28fa:	be 81       	ldd	r27, Y+6	; 0x06
    28fc:	16 96       	adiw	r26, 0x06	; 6
    28fe:	8d 90       	ld	r8, X+
    2900:	9d 90       	ld	r9, X+
    2902:	ad 90       	ld	r10, X+
    2904:	bc 90       	ld	r11, X
    2906:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    2908:	fd 01       	movw	r30, r26
    290a:	16 82       	std	Z+6, r1	; 0x06
    290c:	17 82       	std	Z+7, r1	; 0x07
    290e:	10 86       	std	Z+8, r1	; 0x08
    2910:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2912:	c1 14       	cp	r12, r1
    2914:	d1 04       	cpc	r13, r1
    2916:	e1 04       	cpc	r14, r1
    2918:	f1 04       	cpc	r15, r1
    291a:	09 f4       	brne	.+2      	; 0x291e <f_lseek+0x96>
    291c:	7b c1       	rjmp	.+758    	; 0x2c14 <f_lseek+0x38c>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    291e:	20 80       	ld	r2, Z
    2920:	31 80       	ldd	r3, Z+1	; 0x01
    2922:	d1 01       	movw	r26, r2
    2924:	12 96       	adiw	r26, 0x02	; 2
    2926:	8c 91       	ld	r24, X
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a0 e0       	ldi	r26, 0x00	; 0
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	2c 01       	movw	r4, r24
    2930:	3d 01       	movw	r6, r26
    2932:	03 2e       	mov	r0, r19
    2934:	39 e0       	ldi	r19, 0x09	; 9
    2936:	44 0c       	add	r4, r4
    2938:	55 1c       	adc	r5, r5
    293a:	66 1c       	adc	r6, r6
    293c:	77 1c       	adc	r7, r7
    293e:	3a 95       	dec	r19
    2940:	d1 f7       	brne	.-12     	; 0x2936 <f_lseek+0xae>
    2942:	30 2d       	mov	r19, r0
			if (ifptr > 0 &&
    2944:	81 14       	cp	r8, r1
    2946:	91 04       	cpc	r9, r1
    2948:	a1 04       	cpc	r10, r1
    294a:	b1 04       	cpc	r11, r1
    294c:	09 f4       	brne	.+2      	; 0x2950 <f_lseek+0xc8>
    294e:	40 c0       	rjmp	.+128    	; 0x29d0 <f_lseek+0x148>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2950:	b1 e0       	ldi	r27, 0x01	; 1
    2952:	8b 1a       	sub	r8, r27
    2954:	91 08       	sbc	r9, r1
    2956:	a1 08       	sbc	r10, r1
    2958:	b1 08       	sbc	r11, r1
    295a:	c7 01       	movw	r24, r14
    295c:	b6 01       	movw	r22, r12
    295e:	61 50       	subi	r22, 0x01	; 1
    2960:	71 09       	sbc	r23, r1
    2962:	81 09       	sbc	r24, r1
    2964:	91 09       	sbc	r25, r1
    2966:	a3 01       	movw	r20, r6
    2968:	92 01       	movw	r18, r4
    296a:	0e 94 c4 22 	call	0x4588	; 0x4588 <__udivmodsi4>
    296e:	29 83       	std	Y+1, r18	; 0x01
    2970:	3a 83       	std	Y+2, r19	; 0x02
    2972:	4b 83       	std	Y+3, r20	; 0x03
    2974:	5c 83       	std	Y+4, r21	; 0x04
    2976:	c5 01       	movw	r24, r10
    2978:	b4 01       	movw	r22, r8
    297a:	a3 01       	movw	r20, r6
    297c:	92 01       	movw	r18, r4
    297e:	0e 94 c4 22 	call	0x4588	; 0x4588 <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	9a 81       	ldd	r25, Y+2	; 0x02
    2986:	ab 81       	ldd	r26, Y+3	; 0x03
    2988:	bc 81       	ldd	r27, Y+4	; 0x04
    298a:	82 17       	cp	r24, r18
    298c:	93 07       	cpc	r25, r19
    298e:	a4 07       	cpc	r26, r20
    2990:	b5 07       	cpc	r27, r21
    2992:	f0 f0       	brcs	.+60     	; 0x29d0 <f_lseek+0x148>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2994:	88 27       	eor	r24, r24
    2996:	99 27       	eor	r25, r25
    2998:	dc 01       	movw	r26, r24
    299a:	84 19       	sub	r24, r4
    299c:	95 09       	sbc	r25, r5
    299e:	a6 09       	sbc	r26, r6
    29a0:	b7 09       	sbc	r27, r7
    29a2:	88 22       	and	r8, r24
    29a4:	99 22       	and	r9, r25
    29a6:	aa 22       	and	r10, r26
    29a8:	bb 22       	and	r11, r27
    29aa:	ad 81       	ldd	r26, Y+5	; 0x05
    29ac:	be 81       	ldd	r27, Y+6	; 0x06
    29ae:	16 96       	adiw	r26, 0x06	; 6
    29b0:	8d 92       	st	X+, r8
    29b2:	9d 92       	st	X+, r9
    29b4:	ad 92       	st	X+, r10
    29b6:	bc 92       	st	X, r11
    29b8:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    29ba:	c8 18       	sub	r12, r8
    29bc:	d9 08       	sbc	r13, r9
    29be:	ea 08       	sbc	r14, r10
    29c0:	fb 08       	sbc	r15, r11
				clst = fp->clust;
    29c2:	52 96       	adiw	r26, 0x12	; 18
    29c4:	6d 91       	ld	r22, X+
    29c6:	7d 91       	ld	r23, X+
    29c8:	8d 91       	ld	r24, X+
    29ca:	9c 91       	ld	r25, X
    29cc:	55 97       	sbiw	r26, 0x15	; 21
    29ce:	37 c0       	rjmp	.+110    	; 0x2a3e <f_lseek+0x1b6>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    29d0:	ed 81       	ldd	r30, Y+5	; 0x05
    29d2:	fe 81       	ldd	r31, Y+6	; 0x06
    29d4:	66 85       	ldd	r22, Z+14	; 0x0e
    29d6:	77 85       	ldd	r23, Z+15	; 0x0f
    29d8:	80 89       	ldd	r24, Z+16	; 0x10
    29da:	91 89       	ldd	r25, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    29dc:	61 15       	cp	r22, r1
    29de:	71 05       	cpc	r23, r1
    29e0:	81 05       	cpc	r24, r1
    29e2:	91 05       	cpc	r25, r1
    29e4:	31 f5       	brne	.+76     	; 0x2a32 <f_lseek+0x1aa>
					clst = create_chain(fp->fs, 0);
    29e6:	40 e0       	ldi	r20, 0x00	; 0
    29e8:	50 e0       	ldi	r21, 0x00	; 0
    29ea:	ba 01       	movw	r22, r20
    29ec:	c1 01       	movw	r24, r2
    29ee:	0e 94 30 0a 	call	0x1460	; 0x1460 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    29f2:	61 30       	cpi	r22, 0x01	; 1
    29f4:	71 05       	cpc	r23, r1
    29f6:	81 05       	cpc	r24, r1
    29f8:	91 05       	cpc	r25, r1
    29fa:	39 f4       	brne	.+14     	; 0x2a0a <f_lseek+0x182>
    29fc:	82 e0       	ldi	r24, 0x02	; 2
    29fe:	ad 81       	ldd	r26, Y+5	; 0x05
    2a00:	be 81       	ldd	r27, Y+6	; 0x06
    2a02:	15 96       	adiw	r26, 0x05	; 5
    2a04:	8c 93       	st	X, r24
    2a06:	12 e0       	ldi	r17, 0x02	; 2
    2a08:	05 c1       	rjmp	.+522    	; 0x2c14 <f_lseek+0x38c>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2a0a:	6f 3f       	cpi	r22, 0xFF	; 255
    2a0c:	bf ef       	ldi	r27, 0xFF	; 255
    2a0e:	7b 07       	cpc	r23, r27
    2a10:	8b 07       	cpc	r24, r27
    2a12:	9b 07       	cpc	r25, r27
    2a14:	31 f4       	brne	.+12     	; 0x2a22 <f_lseek+0x19a>
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	ed 81       	ldd	r30, Y+5	; 0x05
    2a1a:	fe 81       	ldd	r31, Y+6	; 0x06
    2a1c:	85 83       	std	Z+5, r24	; 0x05
    2a1e:	11 e0       	ldi	r17, 0x01	; 1
    2a20:	f9 c0       	rjmp	.+498    	; 0x2c14 <f_lseek+0x38c>
					fp->sclust = clst;
    2a22:	ad 81       	ldd	r26, Y+5	; 0x05
    2a24:	be 81       	ldd	r27, Y+6	; 0x06
    2a26:	1e 96       	adiw	r26, 0x0e	; 14
    2a28:	6d 93       	st	X+, r22
    2a2a:	7d 93       	st	X+, r23
    2a2c:	8d 93       	st	X+, r24
    2a2e:	9c 93       	st	X, r25
    2a30:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->clust = clst;
    2a32:	ed 81       	ldd	r30, Y+5	; 0x05
    2a34:	fe 81       	ldd	r31, Y+6	; 0x06
    2a36:	62 8b       	std	Z+18, r22	; 0x12
    2a38:	73 8b       	std	Z+19, r23	; 0x13
    2a3a:	84 8b       	std	Z+20, r24	; 0x14
    2a3c:	95 8b       	std	Z+21, r25	; 0x15
			}
			if (clst != 0) {
    2a3e:	61 15       	cp	r22, r1
    2a40:	71 05       	cpc	r23, r1
    2a42:	81 05       	cpc	r24, r1
    2a44:	91 05       	cpc	r25, r1
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <f_lseek+0x1c2>
    2a48:	ae c0       	rjmp	.+348    	; 0x2ba6 <f_lseek+0x31e>
				while (ofs > bcs) {						/* Cluster following loop */
    2a4a:	4c 14       	cp	r4, r12
    2a4c:	5d 04       	cpc	r5, r13
    2a4e:	6e 04       	cpc	r6, r14
    2a50:	7f 04       	cpc	r7, r15
    2a52:	08 f0       	brcs	.+2      	; 0x2a56 <f_lseek+0x1ce>
    2a54:	6a c0       	rjmp	.+212    	; 0x2b2a <f_lseek+0x2a2>
    2a56:	ab 01       	movw	r20, r22
    2a58:	bc 01       	movw	r22, r24
    2a5a:	2d 80       	ldd	r2, Y+5	; 0x05
    2a5c:	3e 80       	ldd	r3, Y+6	; 0x06
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2a5e:	d1 01       	movw	r26, r2
    2a60:	14 96       	adiw	r26, 0x04	; 4
    2a62:	2c 91       	ld	r18, X
    2a64:	14 97       	sbiw	r26, 0x04	; 4
    2a66:	21 ff       	sbrs	r18, 1
    2a68:	0c c0       	rjmp	.+24     	; 0x2a82 <f_lseek+0x1fa>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2a6a:	8d 91       	ld	r24, X+
    2a6c:	9c 91       	ld	r25, X
    2a6e:	0e 94 30 0a 	call	0x1460	; 0x1460 <create_chain>
    2a72:	ab 01       	movw	r20, r22
    2a74:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    2a76:	41 15       	cp	r20, r1
    2a78:	51 05       	cpc	r21, r1
    2a7a:	61 05       	cpc	r22, r1
    2a7c:	71 05       	cpc	r23, r1
    2a7e:	41 f4       	brne	.+16     	; 0x2a90 <f_lseek+0x208>
    2a80:	4e c0       	rjmp	.+156    	; 0x2b1e <f_lseek+0x296>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2a82:	f1 01       	movw	r30, r2
    2a84:	80 81       	ld	r24, Z
    2a86:	91 81       	ldd	r25, Z+1	; 0x01
    2a88:	0e 94 89 07 	call	0xf12	; 0xf12 <get_fat>
    2a8c:	ab 01       	movw	r20, r22
    2a8e:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2a90:	4f 3f       	cpi	r20, 0xFF	; 255
    2a92:	ff ef       	ldi	r31, 0xFF	; 255
    2a94:	5f 07       	cpc	r21, r31
    2a96:	6f 07       	cpc	r22, r31
    2a98:	7f 07       	cpc	r23, r31
    2a9a:	31 f4       	brne	.+12     	; 0x2aa8 <f_lseek+0x220>
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	d1 01       	movw	r26, r2
    2aa0:	15 96       	adiw	r26, 0x05	; 5
    2aa2:	8c 93       	st	X, r24
    2aa4:	11 e0       	ldi	r17, 0x01	; 1
    2aa6:	b6 c0       	rjmp	.+364    	; 0x2c14 <f_lseek+0x38c>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2aa8:	42 30       	cpi	r20, 0x02	; 2
    2aaa:	51 05       	cpc	r21, r1
    2aac:	61 05       	cpc	r22, r1
    2aae:	71 05       	cpc	r23, r1
    2ab0:	60 f0       	brcs	.+24     	; 0x2aca <f_lseek+0x242>
    2ab2:	d1 01       	movw	r26, r2
    2ab4:	ed 91       	ld	r30, X+
    2ab6:	fc 91       	ld	r31, X
    2ab8:	82 88       	ldd	r8, Z+18	; 0x12
    2aba:	93 88       	ldd	r9, Z+19	; 0x13
    2abc:	a4 88       	ldd	r10, Z+20	; 0x14
    2abe:	b5 88       	ldd	r11, Z+21	; 0x15
    2ac0:	48 15       	cp	r20, r8
    2ac2:	59 05       	cpc	r21, r9
    2ac4:	6a 05       	cpc	r22, r10
    2ac6:	7b 05       	cpc	r23, r11
    2ac8:	28 f0       	brcs	.+10     	; 0x2ad4 <f_lseek+0x24c>
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	f1 01       	movw	r30, r2
    2ace:	85 83       	std	Z+5, r24	; 0x05
    2ad0:	12 e0       	ldi	r17, 0x02	; 2
    2ad2:	a0 c0       	rjmp	.+320    	; 0x2c14 <f_lseek+0x38c>
					fp->clust = clst;
    2ad4:	d1 01       	movw	r26, r2
    2ad6:	52 96       	adiw	r26, 0x12	; 18
    2ad8:	4d 93       	st	X+, r20
    2ada:	5d 93       	st	X+, r21
    2adc:	6d 93       	st	X+, r22
    2ade:	7c 93       	st	X, r23
    2ae0:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2ae2:	16 96       	adiw	r26, 0x06	; 6
    2ae4:	8d 90       	ld	r8, X+
    2ae6:	9d 90       	ld	r9, X+
    2ae8:	ad 90       	ld	r10, X+
    2aea:	bc 90       	ld	r11, X
    2aec:	19 97       	sbiw	r26, 0x09	; 9
    2aee:	84 0c       	add	r8, r4
    2af0:	95 1c       	adc	r9, r5
    2af2:	a6 1c       	adc	r10, r6
    2af4:	b7 1c       	adc	r11, r7
    2af6:	f1 01       	movw	r30, r2
    2af8:	86 82       	std	Z+6, r8	; 0x06
    2afa:	97 82       	std	Z+7, r9	; 0x07
    2afc:	a0 86       	std	Z+8, r10	; 0x08
    2afe:	b1 86       	std	Z+9, r11	; 0x09
					ofs -= bcs;
    2b00:	c4 18       	sub	r12, r4
    2b02:	d5 08       	sbc	r13, r5
    2b04:	e6 08       	sbc	r14, r6
    2b06:	f7 08       	sbc	r15, r7
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2b08:	4c 14       	cp	r4, r12
    2b0a:	5d 04       	cpc	r5, r13
    2b0c:	6e 04       	cpc	r6, r14
    2b0e:	7f 04       	cpc	r7, r15
    2b10:	08 f4       	brcc	.+2      	; 0x2b14 <f_lseek+0x28c>
    2b12:	a5 cf       	rjmp	.-182    	; 0x2a5e <f_lseek+0x1d6>
    2b14:	cb 01       	movw	r24, r22
    2b16:	ba 01       	movw	r22, r20
    2b18:	3e 82       	std	Y+6, r3	; 0x06
    2b1a:	2d 82       	std	Y+5, r2	; 0x05
    2b1c:	06 c0       	rjmp	.+12     	; 0x2b2a <f_lseek+0x2a2>
    2b1e:	cb 01       	movw	r24, r22
    2b20:	ba 01       	movw	r22, r20
    2b22:	3e 82       	std	Y+6, r3	; 0x06
    2b24:	2d 82       	std	Y+5, r2	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    2b26:	73 01       	movw	r14, r6
    2b28:	62 01       	movw	r12, r4
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2b2a:	ad 81       	ldd	r26, Y+5	; 0x05
    2b2c:	be 81       	ldd	r27, Y+6	; 0x06
    2b2e:	16 96       	adiw	r26, 0x06	; 6
    2b30:	8d 90       	ld	r8, X+
    2b32:	9d 90       	ld	r9, X+
    2b34:	ad 90       	ld	r10, X+
    2b36:	bc 90       	ld	r11, X
    2b38:	19 97       	sbiw	r26, 0x09	; 9
    2b3a:	8c 0c       	add	r8, r12
    2b3c:	9d 1c       	adc	r9, r13
    2b3e:	ae 1c       	adc	r10, r14
    2b40:	bf 1c       	adc	r11, r15
    2b42:	fd 01       	movw	r30, r26
    2b44:	86 82       	std	Z+6, r8	; 0x06
    2b46:	97 82       	std	Z+7, r9	; 0x07
    2b48:	a0 86       	std	Z+8, r10	; 0x08
    2b4a:	b1 86       	std	Z+9, r11	; 0x09
				if (ofs % SS(fp->fs)) {
    2b4c:	81 2c       	mov	r8, r1
    2b4e:	91 2c       	mov	r9, r1
    2b50:	54 01       	movw	r10, r8
    2b52:	8a 94       	dec	r8
    2b54:	93 94       	inc	r9
    2b56:	8c 20       	and	r8, r12
    2b58:	9d 20       	and	r9, r13
    2b5a:	ae 20       	and	r10, r14
    2b5c:	bf 20       	and	r11, r15
    2b5e:	89 28       	or	r8, r9
    2b60:	8a 28       	or	r8, r10
    2b62:	8b 28       	or	r8, r11
    2b64:	21 f1       	breq	.+72     	; 0x2bae <f_lseek+0x326>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2b66:	ab 01       	movw	r20, r22
    2b68:	bc 01       	movw	r22, r24
    2b6a:	80 81       	ld	r24, Z
    2b6c:	91 81       	ldd	r25, Z+1	; 0x01
    2b6e:	0e 94 53 07 	call	0xea6	; 0xea6 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2b72:	61 15       	cp	r22, r1
    2b74:	71 05       	cpc	r23, r1
    2b76:	81 05       	cpc	r24, r1
    2b78:	91 05       	cpc	r25, r1
    2b7a:	39 f4       	brne	.+14     	; 0x2b8a <f_lseek+0x302>
    2b7c:	82 e0       	ldi	r24, 0x02	; 2
    2b7e:	ad 81       	ldd	r26, Y+5	; 0x05
    2b80:	be 81       	ldd	r27, Y+6	; 0x06
    2b82:	15 96       	adiw	r26, 0x05	; 5
    2b84:	8c 93       	st	X, r24
    2b86:	12 e0       	ldi	r17, 0x02	; 2
    2b88:	45 c0       	rjmp	.+138    	; 0x2c14 <f_lseek+0x38c>
					nsect += ofs / SS(fp->fs);
    2b8a:	0b 2e       	mov	r0, r27
    2b8c:	b9 e0       	ldi	r27, 0x09	; 9
    2b8e:	f6 94       	lsr	r15
    2b90:	e7 94       	ror	r14
    2b92:	d7 94       	ror	r13
    2b94:	c7 94       	ror	r12
    2b96:	ba 95       	dec	r27
    2b98:	d1 f7       	brne	.-12     	; 0x2b8e <f_lseek+0x306>
    2b9a:	b0 2d       	mov	r27, r0
    2b9c:	c6 0e       	add	r12, r22
    2b9e:	d7 1e       	adc	r13, r23
    2ba0:	e8 1e       	adc	r14, r24
    2ba2:	f9 1e       	adc	r15, r25
    2ba4:	07 c0       	rjmp	.+14     	; 0x2bb4 <f_lseek+0x32c>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2ba6:	c1 2c       	mov	r12, r1
    2ba8:	d1 2c       	mov	r13, r1
    2baa:	76 01       	movw	r14, r12
    2bac:	03 c0       	rjmp	.+6      	; 0x2bb4 <f_lseek+0x32c>
    2bae:	c1 2c       	mov	r12, r1
    2bb0:	d1 2c       	mov	r13, r1
    2bb2:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    2bb4:	ed 81       	ldd	r30, Y+5	; 0x05
    2bb6:	fe 81       	ldd	r31, Y+6	; 0x06
    2bb8:	86 81       	ldd	r24, Z+6	; 0x06
    2bba:	97 81       	ldd	r25, Z+7	; 0x07
    2bbc:	a0 85       	ldd	r26, Z+8	; 0x08
    2bbe:	b1 85       	ldd	r27, Z+9	; 0x09
    2bc0:	ac 01       	movw	r20, r24
    2bc2:	bd 01       	movw	r22, r26
    2bc4:	51 70       	andi	r21, 0x01	; 1
    2bc6:	66 27       	eor	r22, r22
    2bc8:	77 27       	eor	r23, r23
    2bca:	45 2b       	or	r20, r21
    2bcc:	46 2b       	or	r20, r22
    2bce:	47 2b       	or	r20, r23
    2bd0:	69 f0       	breq	.+26     	; 0x2bec <f_lseek+0x364>
    2bd2:	46 89       	ldd	r20, Z+22	; 0x16
    2bd4:	57 89       	ldd	r21, Z+23	; 0x17
    2bd6:	60 8d       	ldd	r22, Z+24	; 0x18
    2bd8:	71 8d       	ldd	r23, Z+25	; 0x19
    2bda:	4c 15       	cp	r20, r12
    2bdc:	5d 05       	cpc	r21, r13
    2bde:	6e 05       	cpc	r22, r14
    2be0:	7f 05       	cpc	r23, r15
    2be2:	21 f0       	breq	.+8      	; 0x2bec <f_lseek+0x364>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1))	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2be4:	c6 8a       	std	Z+22, r12	; 0x16
    2be6:	d7 8a       	std	Z+23, r13	; 0x17
    2be8:	e0 8e       	std	Z+24, r14	; 0x18
    2bea:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    2bec:	ed 81       	ldd	r30, Y+5	; 0x05
    2bee:	fe 81       	ldd	r31, Y+6	; 0x06
    2bf0:	42 85       	ldd	r20, Z+10	; 0x0a
    2bf2:	53 85       	ldd	r21, Z+11	; 0x0b
    2bf4:	64 85       	ldd	r22, Z+12	; 0x0c
    2bf6:	75 85       	ldd	r23, Z+13	; 0x0d
    2bf8:	48 17       	cp	r20, r24
    2bfa:	59 07       	cpc	r21, r25
    2bfc:	6a 07       	cpc	r22, r26
    2bfe:	7b 07       	cpc	r23, r27
    2c00:	48 f4       	brcc	.+18     	; 0x2c14 <f_lseek+0x38c>
			fp->fsize = fp->fptr;
    2c02:	82 87       	std	Z+10, r24	; 0x0a
    2c04:	93 87       	std	Z+11, r25	; 0x0b
    2c06:	a4 87       	std	Z+12, r26	; 0x0c
    2c08:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    2c0a:	84 81       	ldd	r24, Z+4	; 0x04
    2c0c:	80 62       	ori	r24, 0x20	; 32
    2c0e:	84 83       	std	Z+4, r24	; 0x04
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <f_lseek+0x38c>


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)						/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    2c12:	18 2f       	mov	r17, r24
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    2c14:	81 2f       	mov	r24, r17
    2c16:	26 96       	adiw	r28, 0x06	; 6
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	df 91       	pop	r29
    2c24:	cf 91       	pop	r28
    2c26:	1f 91       	pop	r17
    2c28:	ff 90       	pop	r15
    2c2a:	ef 90       	pop	r14
    2c2c:	df 90       	pop	r13
    2c2e:	cf 90       	pop	r12
    2c30:	bf 90       	pop	r11
    2c32:	af 90       	pop	r10
    2c34:	9f 90       	pop	r9
    2c36:	8f 90       	pop	r8
    2c38:	7f 90       	pop	r7
    2c3a:	6f 90       	pop	r6
    2c3c:	5f 90       	pop	r5
    2c3e:	4f 90       	pop	r4
    2c40:	3f 90       	pop	r3
    2c42:	2f 90       	pop	r2
    2c44:	08 95       	ret

00002c46 <hexCharToInt>:
}

uint8_t hexCharToInt(char pChar) {
    // If character is lowercase (i.e. ASCII value greater or equal 97), "convert"
    // it to uppercase
    if (pChar >= 97) {
    2c46:	81 36       	cpi	r24, 0x61	; 97
    2c48:	08 f0       	brcs	.+2      	; 0x2c4c <hexCharToInt+0x6>
        pChar -= 32;
    2c4a:	80 52       	subi	r24, 0x20	; 32
    }
    
    // If character is a letter (i.e. ASCII value greater or equal 65), substract
    // a certain amount so that 'A' would be mapped to 10
    if (pChar >= 65) {
    2c4c:	81 34       	cpi	r24, 0x41	; 65
    2c4e:	28 f0       	brcs	.+10     	; 0x2c5a <hexCharToInt+0x14>
        pChar -= 55;
    2c50:	87 53       	subi	r24, 0x37	; 55
        return pChar < 16 ? pChar : 0;
    2c52:	80 31       	cpi	r24, 0x10	; 16
    2c54:	30 f0       	brcs	.+12     	; 0x2c62 <hexCharToInt+0x1c>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	08 95       	ret
    } else {
        // Otherwise map '0' to 0
        pChar -= 48;
    2c5a:	80 53       	subi	r24, 0x30	; 48
        return pChar < 10 ? pChar : 0;
    2c5c:	8a 30       	cpi	r24, 0x0A	; 10
    2c5e:	08 f0       	brcs	.+2      	; 0x2c62 <hexCharToInt+0x1c>
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    }
        
    return 0;
    2c62:	08 95       	ret

00002c64 <gps_calculateCS>:
}

// Function to calculate the checksum of the message sent
unsigned char gps_calculateCS(const unsigned char* pPayload, uint16_t pLength) {
    unsigned char checkSum = 0;
    for(uint8_t i = 0; i < pLength; i++) {
    2c64:	61 15       	cp	r22, r1
    2c66:	71 05       	cpc	r23, r1
    2c68:	81 f0       	breq	.+32     	; 0x2c8a <gps_calculateCS+0x26>
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e0       	ldi	r20, 0x00	; 0
    _delay_ms(50);
}

// Function to calculate the checksum of the message sent
unsigned char gps_calculateCS(const unsigned char* pPayload, uint16_t pLength) {
    unsigned char checkSum = 0;
    2c70:	50 e0       	ldi	r21, 0x00	; 0
    for(uint8_t i = 0; i < pLength; i++) {
        checkSum ^= pPayload[i];
    2c72:	fc 01       	movw	r30, r24
    2c74:	e2 0f       	add	r30, r18
    2c76:	f3 1f       	adc	r31, r19
    2c78:	20 81       	ld	r18, Z
    2c7a:	52 27       	eor	r21, r18
}

// Function to calculate the checksum of the message sent
unsigned char gps_calculateCS(const unsigned char* pPayload, uint16_t pLength) {
    unsigned char checkSum = 0;
    for(uint8_t i = 0; i < pLength; i++) {
    2c7c:	4f 5f       	subi	r20, 0xFF	; 255
    2c7e:	24 2f       	mov	r18, r20
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	26 17       	cp	r18, r22
    2c84:	37 07       	cpc	r19, r23
    2c86:	a8 f3       	brcs	.-22     	; 0x2c72 <gps_calculateCS+0xe>
    2c88:	01 c0       	rjmp	.+2      	; 0x2c8c <gps_calculateCS+0x28>
    _delay_ms(50);
}

// Function to calculate the checksum of the message sent
unsigned char gps_calculateCS(const unsigned char* pPayload, uint16_t pLength) {
    unsigned char checkSum = 0;
    2c8a:	50 e0       	ldi	r21, 0x00	; 0
    for(uint8_t i = 0; i < pLength; i++) {
        checkSum ^= pPayload[i];
    }
    return checkSum;
}
    2c8c:	85 2f       	mov	r24, r21
    2c8e:	08 95       	ret

00002c90 <gps_setParam>:

unsigned char gps_setParam(unsigned char pCommand, unsigned char* pData, uint16_t pLength) {
    2c90:	ef 92       	push	r14
    2c92:	ff 92       	push	r15
    2c94:	0f 93       	push	r16
    2c96:	1f 93       	push	r17
    2c98:	cf 93       	push	r28
    2c9a:	df 93       	push	r29
    2c9c:	e8 2e       	mov	r14, r24
    2c9e:	8b 01       	movw	r16, r22
    2ca0:	ea 01       	movw	r28, r20
    // start sequence (2 byte)
    uart_transmitChar(0xA0);
    2ca2:	80 ea       	ldi	r24, 0xA0	; 160
    2ca4:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <uart_transmitChar>
    uart_transmitChar(0xA1);
    2ca8:	81 ea       	ldi	r24, 0xA1	; 161
    2caa:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <uart_transmitChar>

    // payload length (2 byte) == pLength + 1 because of message ID byte
    uart_transmitChar(((pLength+1) & 0xFF00) >> 8);
    2cae:	9e 01       	movw	r18, r28
    2cb0:	2f 5f       	subi	r18, 0xFF	; 255
    2cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb4:	83 2f       	mov	r24, r19
    2cb6:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <uart_transmitChar>
    uart_transmitChar((pLength+1) & 0x00FF);
    2cba:	8c 2f       	mov	r24, r28
    2cbc:	8f 5f       	subi	r24, 0xFF	; 255
    2cbe:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <uart_transmitChar>

    // payload

    // message ID (1 byte)
    uart_transmitChar(pCommand);
    2cc2:	8e 2d       	mov	r24, r14
    2cc4:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <uart_transmitChar>

    // data (pLength byte)
    for(uint8_t i = 0; i < pLength; i++) {
    2cc8:	20 97       	sbiw	r28, 0x00	; 0
    2cca:	79 f0       	breq	.+30     	; 0x2cea <gps_setParam+0x5a>
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	f1 2c       	mov	r15, r1
        uart_transmitChar(pData[i]);
    2cd2:	f8 01       	movw	r30, r16
    2cd4:	e2 0f       	add	r30, r18
    2cd6:	f3 1f       	adc	r31, r19
    2cd8:	80 81       	ld	r24, Z
    2cda:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <uart_transmitChar>

    // message ID (1 byte)
    uart_transmitChar(pCommand);

    // data (pLength byte)
    for(uint8_t i = 0; i < pLength; i++) {
    2cde:	f3 94       	inc	r15
    2ce0:	2f 2d       	mov	r18, r15
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	2c 17       	cp	r18, r28
    2ce6:	3d 07       	cpc	r19, r29
    2ce8:	a0 f3       	brcs	.-24     	; 0x2cd2 <gps_setParam+0x42>
        uart_transmitChar(pData[i]);
    }

    // checksum (1 byte)
    uart_transmitChar(gps_calculateCS(pData, pLength) ^ pCommand);
    2cea:	be 01       	movw	r22, r28
    2cec:	c8 01       	movw	r24, r16
    2cee:	0e 94 32 16 	call	0x2c64	; 0x2c64 <gps_calculateCS>
    2cf2:	8e 25       	eor	r24, r14
    2cf4:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <uart_transmitChar>

    // stop sequence (2 byte)
    uart_transmitChar(CR);
    2cf8:	8d e0       	ldi	r24, 0x0D	; 13
    2cfa:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <uart_transmitChar>
    uart_transmitChar(LF);
    2cfe:	8a e0       	ldi	r24, 0x0A	; 10
    2d00:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <uart_transmitChar>

    return GPS_ACK;
}
    2d04:	83 e8       	ldi	r24, 0x83	; 131
    2d06:	df 91       	pop	r29
    2d08:	cf 91       	pop	r28
    2d0a:	1f 91       	pop	r17
    2d0c:	0f 91       	pop	r16
    2d0e:	ff 90       	pop	r15
    2d10:	ef 90       	pop	r14
    2d12:	08 95       	ret

00002d14 <gps_init>:

#include "gps.h"
#include "global.h"
#include "uart.h"

void gps_init(uint8_t pFrequency, uint8_t pMessages) {
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	2a 97       	sbiw	r28, 0x0a	; 10
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	08 2f       	mov	r16, r24
    2d2e:	16 2f       	mov	r17, r22

    // initializes UART interface
    uart_init(UART_CALCULATE_BAUD(F_CPU, GPS_BAUDRATE));
    2d30:	8f e2       	ldi	r24, 0x2F	; 47
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <uart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2d38:	2f ef       	ldi	r18, 0xFF	; 255
    2d3a:	8f e3       	ldi	r24, 0x3F	; 63
    2d3c:	92 e0       	ldi	r25, 0x02	; 2
    2d3e:	21 50       	subi	r18, 0x01	; 1
    2d40:	80 40       	sbci	r24, 0x00	; 0
    2d42:	90 40       	sbci	r25, 0x00	; 0
    2d44:	e1 f7       	brne	.-8      	; 0x2d3e <gps_init+0x2a>
    2d46:	00 c0       	rjmp	.+0      	; 0x2d48 <gps_init+0x34>
    2d48:	00 00       	nop

    _delay_ms(100);

    // perform basic configuration using the given parameters
    unsigned char commands[8] = {
        pMessages & GPS_NMEA_GGA ? 1 : 0,
    2d4a:	11 fb       	bst	r17, 1
    2d4c:	88 27       	eor	r24, r24
    2d4e:	80 f9       	bld	r24, 0
    uart_init(UART_CALCULATE_BAUD(F_CPU, GPS_BAUDRATE));

    _delay_ms(100);

    // perform basic configuration using the given parameters
    unsigned char commands[8] = {
    2d50:	89 83       	std	Y+1, r24	; 0x01
        pMessages & GPS_NMEA_GGA ? 1 : 0,
        pMessages & GPS_NMEA_GSA ? 1 : 0,
    2d52:	12 fb       	bst	r17, 2
    2d54:	88 27       	eor	r24, r24
    2d56:	80 f9       	bld	r24, 0
    uart_init(UART_CALCULATE_BAUD(F_CPU, GPS_BAUDRATE));

    _delay_ms(100);

    // perform basic configuration using the given parameters
    unsigned char commands[8] = {
    2d58:	8a 83       	std	Y+2, r24	; 0x02
        pMessages & GPS_NMEA_GGA ? 1 : 0,
        pMessages & GPS_NMEA_GSA ? 1 : 0,
        pMessages & GPS_NMEA_GSV ? 1 : 0,
    2d5a:	13 fb       	bst	r17, 3
    2d5c:	88 27       	eor	r24, r24
    2d5e:	80 f9       	bld	r24, 0
    uart_init(UART_CALCULATE_BAUD(F_CPU, GPS_BAUDRATE));

    _delay_ms(100);

    // perform basic configuration using the given parameters
    unsigned char commands[8] = {
    2d60:	8b 83       	std	Y+3, r24	; 0x03
        pMessages & GPS_NMEA_GGA ? 1 : 0,
        pMessages & GPS_NMEA_GSA ? 1 : 0,
        pMessages & GPS_NMEA_GSV ? 1 : 0,
        pMessages & GPS_NMEA_GLL ? 1 : 0,
    2d62:	14 fb       	bst	r17, 4
    2d64:	88 27       	eor	r24, r24
    2d66:	80 f9       	bld	r24, 0
    uart_init(UART_CALCULATE_BAUD(F_CPU, GPS_BAUDRATE));

    _delay_ms(100);

    // perform basic configuration using the given parameters
    unsigned char commands[8] = {
    2d68:	8c 83       	std	Y+4, r24	; 0x04
        pMessages & GPS_NMEA_GGA ? 1 : 0,
        pMessages & GPS_NMEA_GSA ? 1 : 0,
        pMessages & GPS_NMEA_GSV ? 1 : 0,
        pMessages & GPS_NMEA_GLL ? 1 : 0,
        pMessages & GPS_NMEA_RMC ? 1 : 0,
    2d6a:	15 fb       	bst	r17, 5
    2d6c:	88 27       	eor	r24, r24
    2d6e:	80 f9       	bld	r24, 0
    uart_init(UART_CALCULATE_BAUD(F_CPU, GPS_BAUDRATE));

    _delay_ms(100);

    // perform basic configuration using the given parameters
    unsigned char commands[8] = {
    2d70:	8d 83       	std	Y+5, r24	; 0x05
        pMessages & GPS_NMEA_GGA ? 1 : 0,
        pMessages & GPS_NMEA_GSA ? 1 : 0,
        pMessages & GPS_NMEA_GSV ? 1 : 0,
        pMessages & GPS_NMEA_GLL ? 1 : 0,
        pMessages & GPS_NMEA_RMC ? 1 : 0,
        pMessages & GPS_NMEA_VTG ? 1 : 0,
    2d72:	16 fb       	bst	r17, 6
    2d74:	88 27       	eor	r24, r24
    2d76:	80 f9       	bld	r24, 0
    uart_init(UART_CALCULATE_BAUD(F_CPU, GPS_BAUDRATE));

    _delay_ms(100);

    // perform basic configuration using the given parameters
    unsigned char commands[8] = {
    2d78:	8e 83       	std	Y+6, r24	; 0x06
        pMessages & GPS_NMEA_GSA ? 1 : 0,
        pMessages & GPS_NMEA_GSV ? 1 : 0,
        pMessages & GPS_NMEA_GLL ? 1 : 0,
        pMessages & GPS_NMEA_RMC ? 1 : 0,
        pMessages & GPS_NMEA_VTG ? 1 : 0,
        pMessages & GPS_NMEA_ZDA ? 1 : 0,
    2d7a:	11 1f       	adc	r17, r17
    2d7c:	11 27       	eor	r17, r17
    2d7e:	11 1f       	adc	r17, r17
    uart_init(UART_CALCULATE_BAUD(F_CPU, GPS_BAUDRATE));

    _delay_ms(100);

    // perform basic configuration using the given parameters
    unsigned char commands[8] = {
    2d80:	1f 83       	std	Y+7, r17	; 0x07
    2d82:	18 86       	std	Y+8, r1	; 0x08
        pMessages & GPS_NMEA_RMC ? 1 : 0,
        pMessages & GPS_NMEA_VTG ? 1 : 0,
        pMessages & GPS_NMEA_ZDA ? 1 : 0,
        0x00}; // in SRAM

    gps_setParam(GPS_SET_NMEA, commands, 8);
    2d84:	48 e0       	ldi	r20, 0x08	; 8
    2d86:	50 e0       	ldi	r21, 0x00	; 0
    2d88:	be 01       	movw	r22, r28
    2d8a:	6f 5f       	subi	r22, 0xFF	; 255
    2d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8e:	88 e0       	ldi	r24, 0x08	; 8
    2d90:	0e 94 48 16 	call	0x2c90	; 0x2c90 <gps_setParam>
    2d94:	2f ef       	ldi	r18, 0xFF	; 255
    2d96:	8f e1       	ldi	r24, 0x1F	; 31
    2d98:	91 e0       	ldi	r25, 0x01	; 1
    2d9a:	21 50       	subi	r18, 0x01	; 1
    2d9c:	80 40       	sbci	r24, 0x00	; 0
    2d9e:	90 40       	sbci	r25, 0x00	; 0
    2da0:	e1 f7       	brne	.-8      	; 0x2d9a <gps_init+0x86>
    2da2:	00 c0       	rjmp	.+0      	; 0x2da4 <gps_init+0x90>
    2da4:	00 00       	nop

    _delay_ms(50);

    unsigned char rate[2] = {
    2da6:	09 87       	std	Y+9, r16	; 0x09
    2da8:	1a 86       	std	Y+10, r1	; 0x0a
        pFrequency, // pFrequency Hertz
        0x00}; // In SRAM

    gps_setParam(GPS_SET_UPDATE_RATE, rate, 2);
    2daa:	42 e0       	ldi	r20, 0x02	; 2
    2dac:	50 e0       	ldi	r21, 0x00	; 0
    2dae:	be 01       	movw	r22, r28
    2db0:	67 5f       	subi	r22, 0xF7	; 247
    2db2:	7f 4f       	sbci	r23, 0xFF	; 255
    2db4:	8e e0       	ldi	r24, 0x0E	; 14
    2db6:	0e 94 48 16 	call	0x2c90	; 0x2c90 <gps_setParam>
    2dba:	2f ef       	ldi	r18, 0xFF	; 255
    2dbc:	8f e1       	ldi	r24, 0x1F	; 31
    2dbe:	91 e0       	ldi	r25, 0x01	; 1
    2dc0:	21 50       	subi	r18, 0x01	; 1
    2dc2:	80 40       	sbci	r24, 0x00	; 0
    2dc4:	90 40       	sbci	r25, 0x00	; 0
    2dc6:	e1 f7       	brne	.-8      	; 0x2dc0 <gps_init+0xac>
    2dc8:	00 c0       	rjmp	.+0      	; 0x2dca <gps_init+0xb6>
    2dca:	00 00       	nop

    _delay_ms(50);
}
    2dcc:	2a 96       	adiw	r28, 0x0a	; 10
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	1f 91       	pop	r17
    2dde:	0f 91       	pop	r16
    2de0:	08 95       	ret

00002de2 <gps_checkNMEA>:

    return GPS_ACK;
}

uint8_t gps_checkNMEA(const char* pSentence, uint8_t pMessageType, char* pPrefix,
    uint8_t pValidityToken, char* pValidityCheck, uint8_t pCheckEquality) {
    2de2:	bf 92       	push	r11
    2de4:	cf 92       	push	r12
    2de6:	df 92       	push	r13
    2de8:	ef 92       	push	r14
    2dea:	ff 92       	push	r15
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	c6 2f       	mov	r28, r22
    2df6:	a1 e0       	ldi	r26, 0x01	; 1
    
    // Checksum is calculated by XORing every character between the '$' and '*'
    // We set its initial value to '$' so that the loop does not have to
    // differentiate between the first and other characters (initial '$' xor
    // first character '$' == 0).
    char checksum = '$';
    2df8:	34 e2       	ldi	r19, 0x24	; 36
    // Counter to count the current token (only used when validityToken is set)
    uint8_t tokenCounter = 0;
    
    // Variable which will contain the validity state of the sentence, defaults
    // to VALID
    uint8_t messageValidity = GPS_NMEA_VALID;
    2dfa:	d1 e0       	ldi	r29, 0x01	; 1
    uint8_t sentenceCounter = 0;
    uint8_t prefixCounter = 0;
    uint8_t validityCounter = 0;
    
    // Counter to count the current token (only used when validityToken is set)
    uint8_t tokenCounter = 0;
    2dfc:	b1 2c       	mov	r11, r1
    uint8_t pValidityToken, char* pValidityCheck, uint8_t pCheckEquality) {

    // Counter variables for the different strings which have to be checked
    uint8_t sentenceCounter = 0;
    uint8_t prefixCounter = 0;
    uint8_t validityCounter = 0;
    2dfe:	f1 2c       	mov	r15, r1
uint8_t gps_checkNMEA(const char* pSentence, uint8_t pMessageType, char* pPrefix,
    uint8_t pValidityToken, char* pValidityCheck, uint8_t pCheckEquality) {

    // Counter variables for the different strings which have to be checked
    uint8_t sentenceCounter = 0;
    uint8_t prefixCounter = 0;
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
            if (pSentence[sentenceCounter] == ',') {
                tokenCounter++;
            } else { // check non-comma characters only
                if (tokenCounter == pValidityToken) {
                    // Catch if token is too long
                    if (pValidityCheck[validityCounter] == '\0') {
    2e02:	d2 2e       	mov	r13, r18
                        messageValidity = GPS_NMEA_INVALID;
    2e04:	c1 2c       	mov	r12, r1
    2e06:	01 c0       	rjmp	.+2      	; 0x2e0a <gps_checkNMEA+0x28>
    2e08:	af 5f       	subi	r26, 0xFF	; 255
    2e0a:	7a 2f       	mov	r23, r26
    2e0c:	71 50       	subi	r23, 0x01	; 1
    char checksum = '$';
    
    do {
        // Prefix check is done if the prefixCounter points to the end of the
        // given prefix
        if (pPrefix[prefixCounter] != '\0') {
    2e0e:	fa 01       	movw	r30, r20
    2e10:	eb 0f       	add	r30, r27
    2e12:	f1 1d       	adc	r31, r1
    2e14:	60 81       	ld	r22, Z
    2e16:	66 23       	and	r22, r22
    2e18:	39 f0       	breq	.+14     	; 0x2e28 <gps_checkNMEA+0x46>
            // return instantly if the prefixes do not match
            if (pSentence[sentenceCounter] != pPrefix[prefixCounter]) {
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	e7 0f       	add	r30, r23
    2e1e:	f1 1d       	adc	r31, r1
    2e20:	e0 81       	ld	r30, Z
    2e22:	6e 13       	cpse	r22, r30
    2e24:	51 c0       	rjmp	.+162    	; 0x2ec8 <gps_checkNMEA+0xe6>
                return GPS_NMEA_UNKNOWN;
            }
            
            prefixCounter++;
    2e26:	bf 5f       	subi	r27, 0xFF	; 255
        }
        
        // Calculate checksum
        checksum ^= pSentence[sentenceCounter];
    2e28:	fc 01       	movw	r30, r24
    2e2a:	e7 0f       	add	r30, r23
    2e2c:	f1 1d       	adc	r31, r1
    2e2e:	60 81       	ld	r22, Z
    2e30:	36 27       	eor	r19, r22
        
        // Perform a validity check only if a validityToken was specified
        if (pValidityToken) {
    2e32:	22 23       	and	r18, r18
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <gps_checkNMEA+0x56>
    2e36:	5a c0       	rjmp	.+180    	; 0x2eec <gps_checkNMEA+0x10a>
            if (pSentence[sentenceCounter] == ',') {
    2e38:	6c 32       	cpi	r22, 0x2C	; 44
    2e3a:	11 f4       	brne	.+4      	; 0x2e40 <gps_checkNMEA+0x5e>
                tokenCounter++;
    2e3c:	b3 94       	inc	r11
    2e3e:	4d c0       	rjmp	.+154    	; 0x2eda <gps_checkNMEA+0xf8>
            } else { // check non-comma characters only
                if (tokenCounter == pValidityToken) {
    2e40:	b2 12       	cpse	r11, r18
    2e42:	4b c0       	rjmp	.+150    	; 0x2eda <gps_checkNMEA+0xf8>
                    // Catch if token is too long
                    if (pValidityCheck[validityCounter] == '\0') {
    2e44:	f8 01       	movw	r30, r16
    2e46:	ef 0d       	add	r30, r15
    2e48:	f1 1d       	adc	r31, r1
    2e4a:	70 81       	ld	r23, Z
    2e4c:	77 23       	and	r23, r23
    2e4e:	09 f4       	brne	.+2      	; 0x2e52 <gps_checkNMEA+0x70>
    2e50:	3f c0       	rjmp	.+126    	; 0x2ed0 <gps_checkNMEA+0xee>
                        messageValidity = GPS_NMEA_INVALID;
                    } else {
                        // Check if tokens differ
                        if (pSentence[sentenceCounter] != pValidityCheck[validityCounter++]) {
    2e52:	f3 94       	inc	r15
    2e54:	67 13       	cpse	r22, r23
    2e56:	3f c0       	rjmp	.+126    	; 0x2ed6 <gps_checkNMEA+0xf4>
    2e58:	bd 2c       	mov	r11, r13
    2e5a:	3f c0       	rjmp	.+126    	; 0x2eda <gps_checkNMEA+0xf8>
    
    // If a validityToken was specified, perform some final checks
    if (pValidityToken != 0) {
        // Check if token was too short (i.e. validityCounter still points to a
        // not-null character)
        if (pValidityCheck[validityCounter] != '\0') {
    2e5c:	f8 01       	movw	r30, r16
    2e5e:	ef 0d       	add	r30, r15
    2e60:	f1 1d       	adc	r31, r1
    2e62:	20 81       	ld	r18, Z
    2e64:	21 11       	cpse	r18, r1
            messageValidity = GPS_NMEA_INVALID;
    2e66:	d0 e0       	ldi	r29, 0x00	; 0
            
        // If a validityToken was specified, messageValidity currently holds _VALID
        // if the token was equal to the given one and _INVALID otherwise. Check, if
        // checkEquality was set to FALSE. In this case, negate the messageValidity
        // variable
        if (pCheckEquality == FALSE) {
    2e68:	e1 10       	cpse	r14, r1
    2e6a:	05 c0       	rjmp	.+10     	; 0x2e76 <gps_checkNMEA+0x94>
            if (messageValidity == GPS_NMEA_VALID) {
    2e6c:	21 e0       	ldi	r18, 0x01	; 1
    2e6e:	d1 30       	cpi	r29, 0x01	; 1
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <gps_checkNMEA+0x92>
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	d2 2f       	mov	r29, r18
    }
    
    // If a checksum was given, xor the last three characters again (to remove
    // them from our calculation) and compare the calculation to the given
    // checksum
    if (pSentence[sentenceCounter - 3] == '*') {
    2e76:	fc 01       	movw	r30, r24
    2e78:	e6 0f       	add	r30, r22
    2e7a:	f7 1f       	adc	r31, r23
    2e7c:	33 97       	sbiw	r30, 0x03	; 3
    2e7e:	20 81       	ld	r18, Z
    2e80:	2a 32       	cpi	r18, 0x2A	; 42
    2e82:	f9 f4       	brne	.+62     	; 0x2ec2 <gps_checkNMEA+0xe0>
        checksum = checksum ^ '*' ^ pSentence[sentenceCounter - 2] ^ pSentence[sentenceCounter - 1];
    2e84:	fc 01       	movw	r30, r24
    2e86:	e6 0f       	add	r30, r22
    2e88:	f7 1f       	adc	r31, r23
    2e8a:	32 97       	sbiw	r30, 0x02	; 2
    2e8c:	20 81       	ld	r18, Z
    2e8e:	61 50       	subi	r22, 0x01	; 1
    2e90:	71 09       	sbc	r23, r1
    2e92:	8c 01       	movw	r16, r24
    2e94:	06 0f       	add	r16, r22
    2e96:	17 1f       	adc	r17, r23
    2e98:	8a e2       	ldi	r24, 0x2A	; 42
    2e9a:	f3 2e       	mov	r15, r19
    2e9c:	f8 26       	eor	r15, r24
    2e9e:	f2 26       	eor	r15, r18
    2ea0:	f8 01       	movw	r30, r16
    2ea2:	80 81       	ld	r24, Z
    2ea4:	f8 26       	eor	r15, r24
        
        // convert hex-string to uint8_t
        uint8_t givenChecksum = (hexCharToInt(pSentence[sentenceCounter - 2]) << 4)
    2ea6:	82 2f       	mov	r24, r18
    2ea8:	0e 94 23 16 	call	0x2c46	; 0x2c46 <hexCharToInt>
    2eac:	e8 2e       	mov	r14, r24
            + hexCharToInt(pSentence[sentenceCounter - 1]);
    2eae:	f8 01       	movw	r30, r16
    2eb0:	80 81       	ld	r24, Z
    2eb2:	0e 94 23 16 	call	0x2c46	; 0x2c46 <hexCharToInt>
    // checksum
    if (pSentence[sentenceCounter - 3] == '*') {
        checksum = checksum ^ '*' ^ pSentence[sentenceCounter - 2] ^ pSentence[sentenceCounter - 1];
        
        // convert hex-string to uint8_t
        uint8_t givenChecksum = (hexCharToInt(pSentence[sentenceCounter - 2]) << 4)
    2eb6:	f0 e1       	ldi	r31, 0x10	; 16
    2eb8:	ef 9e       	mul	r14, r31
    2eba:	80 0d       	add	r24, r0
    2ebc:	11 24       	eor	r1, r1
            + hexCharToInt(pSentence[sentenceCounter - 1]);
        
        // on checksum mismatch, the message is not only invalid, but completely
        // corrupt, therefore GPS_NMEA_UNKNOWN will be returned.
        if (checksum != givenChecksum) {
    2ebe:	f8 12       	cpse	r15, r24
    2ec0:	05 c0       	rjmp	.+10     	; 0x2ecc <gps_checkNMEA+0xea>
            return GPS_NMEA_UNKNOWN;
        }
    }
    
    return pMessageType | messageValidity;
    2ec2:	8d 2f       	mov	r24, r29
    2ec4:	8c 2b       	or	r24, r28
    2ec6:	1b c0       	rjmp	.+54     	; 0x2efe <gps_checkNMEA+0x11c>
        // Prefix check is done if the prefixCounter points to the end of the
        // given prefix
        if (pPrefix[prefixCounter] != '\0') {
            // return instantly if the prefixes do not match
            if (pSentence[sentenceCounter] != pPrefix[prefixCounter]) {
                return GPS_NMEA_UNKNOWN;
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	19 c0       	rjmp	.+50     	; 0x2efe <gps_checkNMEA+0x11c>
            + hexCharToInt(pSentence[sentenceCounter - 1]);
        
        // on checksum mismatch, the message is not only invalid, but completely
        // corrupt, therefore GPS_NMEA_UNKNOWN will be returned.
        if (checksum != givenChecksum) {
            return GPS_NMEA_UNKNOWN;
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	17 c0       	rjmp	.+46     	; 0x2efe <gps_checkNMEA+0x11c>
            if (pSentence[sentenceCounter] == ',') {
                tokenCounter++;
            } else { // check non-comma characters only
                if (tokenCounter == pValidityToken) {
                    // Catch if token is too long
                    if (pValidityCheck[validityCounter] == '\0') {
    2ed0:	bd 2c       	mov	r11, r13
                        messageValidity = GPS_NMEA_INVALID;
    2ed2:	dc 2d       	mov	r29, r12
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <gps_checkNMEA+0xf8>
                    } else {
                        // Check if tokens differ
                        if (pSentence[sentenceCounter] != pValidityCheck[validityCounter++]) {
    2ed6:	bd 2c       	mov	r11, r13
                            messageValidity = GPS_NMEA_INVALID;
    2ed8:	dc 2d       	mov	r29, r12
                        }
                    }
                }
            }
        }
    } while (pSentence[++sentenceCounter] != '\0');
    2eda:	6a 2f       	mov	r22, r26
    2edc:	70 e0       	ldi	r23, 0x00	; 0
    2ede:	fc 01       	movw	r30, r24
    2ee0:	e6 0f       	add	r30, r22
    2ee2:	f7 1f       	adc	r31, r23
    2ee4:	e0 81       	ld	r30, Z
    2ee6:	e1 11       	cpse	r30, r1
    2ee8:	8f cf       	rjmp	.-226    	; 0x2e08 <gps_checkNMEA+0x26>
    2eea:	b8 cf       	rjmp	.-144    	; 0x2e5c <gps_checkNMEA+0x7a>
    2eec:	6a 2f       	mov	r22, r26
    2eee:	70 e0       	ldi	r23, 0x00	; 0
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	e6 0f       	add	r30, r22
    2ef4:	f7 1f       	adc	r31, r23
    2ef6:	e0 81       	ld	r30, Z
    2ef8:	e1 11       	cpse	r30, r1
    2efa:	86 cf       	rjmp	.-244    	; 0x2e08 <gps_checkNMEA+0x26>
    2efc:	bc cf       	rjmp	.-136    	; 0x2e76 <gps_checkNMEA+0x94>
            return GPS_NMEA_UNKNOWN;
        }
    }
    
    return pMessageType | messageValidity;
}
    2efe:	df 91       	pop	r29
    2f00:	cf 91       	pop	r28
    2f02:	1f 91       	pop	r17
    2f04:	0f 91       	pop	r16
    2f06:	ff 90       	pop	r15
    2f08:	ef 90       	pop	r14
    2f0a:	df 90       	pop	r13
    2f0c:	cf 90       	pop	r12
    2f0e:	bf 90       	pop	r11
    2f10:	08 95       	ret

00002f12 <gps_getNMEA>:

uint8_t gps_getNMEA(char* pOutput, uint8_t pMaxLength) {
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	ec 01       	movw	r28, r24
    2f20:	06 2f       	mov	r16, r22
    // A dollar sign indicates the start of a NMEA sentence
    while(uart_receiveChar() != '$') {
    2f22:	04 c0       	rjmp	.+8      	; 0x2f2c <gps_getNMEA+0x1a>
    2f24:	83 e3       	ldi	r24, 0x33	; 51
    2f26:	97 e0       	ldi	r25, 0x07	; 7
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <gps_getNMEA+0x16>
    2f2c:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <uart_receiveChar>
    2f30:	84 32       	cpi	r24, 0x24	; 36
    2f32:	c1 f7       	brne	.-16     	; 0x2f24 <gps_getNMEA+0x12>
        _delay_ms(1);
    }
    
    // Copy data until LF
    uint8_t i = 0;
    pOutput[i++] = '$';
    2f34:	88 83       	st	Y, r24
    2f36:	ff 24       	eor	r15, r15
    2f38:	f3 94       	inc	r15
        }
        
        inChar = uart_receiveChar();

        pOutput[i++] = inChar;
    } while((inChar != LF) && (i < (pMaxLength-1)));
    2f3a:	10 e0       	ldi	r17, 0x00	; 0
    2f3c:	01 50       	subi	r16, 0x01	; 1
    2f3e:	11 09       	sbc	r17, r1
    pOutput[i++] = '$';

    char inChar;

    do {
        while(!uart_hasData()) {
    2f40:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <uart_hasData>
    2f44:	88 23       	and	r24, r24
    2f46:	e1 f3       	breq	.-8      	; 0x2f40 <gps_getNMEA+0x2e>
          // burn energy
        }
        
        inChar = uart_receiveChar();
    2f48:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <uart_receiveChar>

        pOutput[i++] = inChar;
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	ef 0d       	add	r30, r15
    2f50:	f1 1d       	adc	r31, r1
    2f52:	80 83       	st	Z, r24
    2f54:	f3 94       	inc	r15
    } while((inChar != LF) && (i < (pMaxLength-1)));
    2f56:	8a 30       	cpi	r24, 0x0A	; 10
    2f58:	29 f0       	breq	.+10     	; 0x2f64 <gps_getNMEA+0x52>
    2f5a:	2f 2d       	mov	r18, r15
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	20 17       	cp	r18, r16
    2f60:	31 07       	cpc	r19, r17
    2f62:	74 f3       	brlt	.-36     	; 0x2f40 <gps_getNMEA+0x2e>

    // Don't forget to terminate the string with a NUL character, otherwise
    // everything might crash and burn
    pOutput[i] = 0;
    2f64:	fe 01       	movw	r30, r28
    2f66:	ef 0d       	add	r30, r15
    2f68:	f1 1d       	adc	r31, r1
    2f6a:	10 82       	st	Z, r1

    // Determine the correct validity checker by checking characters 3-5 in a
    // "Trie"-like if-sentence tree, saves many cycles in comparison to full
    // prefix check for each possible message
    switch (pOutput[3]) {
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6e:	82 35       	cpi	r24, 0x52	; 82
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <gps_getNMEA+0x62>
    2f72:	44 c0       	rjmp	.+136    	; 0x2ffc <gps_getNMEA+0xea>
    2f74:	20 f4       	brcc	.+8      	; 0x2f7e <gps_getNMEA+0x6c>
    2f76:	87 34       	cpi	r24, 0x47	; 71
    2f78:	09 f0       	breq	.+2      	; 0x2f7c <gps_getNMEA+0x6a>
    2f7a:	62 c0       	rjmp	.+196    	; 0x3040 <gps_getNMEA+0x12e>
    2f7c:	07 c0       	rjmp	.+14     	; 0x2f8c <gps_getNMEA+0x7a>
    2f7e:	86 35       	cpi	r24, 0x56	; 86
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <gps_getNMEA+0x72>
    2f82:	48 c0       	rjmp	.+144    	; 0x3014 <gps_getNMEA+0x102>
    2f84:	8a 35       	cpi	r24, 0x5A	; 90
    2f86:	09 f0       	breq	.+2      	; 0x2f8a <gps_getNMEA+0x78>
    2f88:	5b c0       	rjmp	.+182    	; 0x3040 <gps_getNMEA+0x12e>
    2f8a:	4f c0       	rjmp	.+158    	; 0x302a <gps_getNMEA+0x118>
        case 'G': //GGA, GSA, GSV or GLL
            switch (pOutput[4]) {
    2f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8e:	8c 34       	cpi	r24, 0x4C	; 76
    2f90:	49 f1       	breq	.+82     	; 0x2fe4 <gps_getNMEA+0xd2>
    2f92:	83 35       	cpi	r24, 0x53	; 83
    2f94:	71 f0       	breq	.+28     	; 0x2fb2 <gps_getNMEA+0xa0>
    2f96:	87 34       	cpi	r24, 0x47	; 71
    2f98:	09 f0       	breq	.+2      	; 0x2f9c <gps_getNMEA+0x8a>
    2f9a:	54 c0       	rjmp	.+168    	; 0x3044 <gps_getNMEA+0x132>
                case 'G': //only GGA left
                    return gps_checkNMEA(pOutput, GPS_NMEA_GGA, "$GPGGA", 6, "0", FALSE);
    2f9c:	e1 2c       	mov	r14, r1
    2f9e:	05 e1       	ldi	r16, 0x15	; 21
    2fa0:	11 e0       	ldi	r17, 0x01	; 1
    2fa2:	26 e0       	ldi	r18, 0x06	; 6
    2fa4:	47 e1       	ldi	r20, 0x17	; 23
    2fa6:	51 e0       	ldi	r21, 0x01	; 1
    2fa8:	62 e0       	ldi	r22, 0x02	; 2
    2faa:	ce 01       	movw	r24, r28
    2fac:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <gps_checkNMEA>
    2fb0:	4a c0       	rjmp	.+148    	; 0x3046 <gps_getNMEA+0x134>
                case 'S': //GSA or GSV:
                    if (pOutput[5] == 'A') {
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	81 34       	cpi	r24, 0x41	; 65
    2fb6:	59 f4       	brne	.+22     	; 0x2fce <gps_getNMEA+0xbc>
                        return gps_checkNMEA(pOutput, GPS_NMEA_GSA, "$GPGSA", 2, "1", FALSE);
    2fb8:	e1 2c       	mov	r14, r1
    2fba:	0e e1       	ldi	r16, 0x1E	; 30
    2fbc:	11 e0       	ldi	r17, 0x01	; 1
    2fbe:	22 e0       	ldi	r18, 0x02	; 2
    2fc0:	40 e2       	ldi	r20, 0x20	; 32
    2fc2:	51 e0       	ldi	r21, 0x01	; 1
    2fc4:	64 e0       	ldi	r22, 0x04	; 4
    2fc6:	ce 01       	movw	r24, r28
    2fc8:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <gps_checkNMEA>
    2fcc:	3c c0       	rjmp	.+120    	; 0x3046 <gps_getNMEA+0x134>
                    } else {
                        return gps_checkNMEA(pOutput, GPS_NMEA_GSV, "$GPGSV", 0, "", FALSE);
    2fce:	e1 2c       	mov	r14, r1
    2fd0:	07 ed       	ldi	r16, 0xD7	; 215
    2fd2:	11 e0       	ldi	r17, 0x01	; 1
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	47 e2       	ldi	r20, 0x27	; 39
    2fd8:	51 e0       	ldi	r21, 0x01	; 1
    2fda:	68 e0       	ldi	r22, 0x08	; 8
    2fdc:	ce 01       	movw	r24, r28
    2fde:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <gps_checkNMEA>
    2fe2:	31 c0       	rjmp	.+98     	; 0x3046 <gps_getNMEA+0x134>
                    }
                case 'L': //only GLL left
                    return gps_checkNMEA(pOutput, GPS_NMEA_GLL, "$GPGLL", 6, "A", TRUE);
    2fe4:	ee 24       	eor	r14, r14
    2fe6:	e3 94       	inc	r14
    2fe8:	0a e4       	ldi	r16, 0x4A	; 74
    2fea:	11 e0       	ldi	r17, 0x01	; 1
    2fec:	26 e0       	ldi	r18, 0x06	; 6
    2fee:	4e e2       	ldi	r20, 0x2E	; 46
    2ff0:	51 e0       	ldi	r21, 0x01	; 1
    2ff2:	60 e1       	ldi	r22, 0x10	; 16
    2ff4:	ce 01       	movw	r24, r28
    2ff6:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <gps_checkNMEA>
    2ffa:	25 c0       	rjmp	.+74     	; 0x3046 <gps_getNMEA+0x134>
                default:
                    return GPS_NMEA_UNKNOWN;
            }//btw: no breaks are necessary as every case returns sth.
        case 'R': //only RMC left
            return gps_checkNMEA(pOutput, GPS_NMEA_RMC, "$GPRMC", 2, "A", TRUE);
    2ffc:	ee 24       	eor	r14, r14
    2ffe:	e3 94       	inc	r14
    3000:	0a e4       	ldi	r16, 0x4A	; 74
    3002:	11 e0       	ldi	r17, 0x01	; 1
    3004:	22 e0       	ldi	r18, 0x02	; 2
    3006:	45 e3       	ldi	r20, 0x35	; 53
    3008:	51 e0       	ldi	r21, 0x01	; 1
    300a:	60 e2       	ldi	r22, 0x20	; 32
    300c:	ce 01       	movw	r24, r28
    300e:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <gps_checkNMEA>
    3012:	19 c0       	rjmp	.+50     	; 0x3046 <gps_getNMEA+0x134>
        case 'V': //only VTG left
            return gps_checkNMEA(pOutput, GPS_NMEA_VTG, "$GPVTG", 9, "N", FALSE);
    3014:	e1 2c       	mov	r14, r1
    3016:	0c e3       	ldi	r16, 0x3C	; 60
    3018:	11 e0       	ldi	r17, 0x01	; 1
    301a:	29 e0       	ldi	r18, 0x09	; 9
    301c:	4e e3       	ldi	r20, 0x3E	; 62
    301e:	51 e0       	ldi	r21, 0x01	; 1
    3020:	60 e4       	ldi	r22, 0x40	; 64
    3022:	ce 01       	movw	r24, r28
    3024:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <gps_checkNMEA>
    3028:	0e c0       	rjmp	.+28     	; 0x3046 <gps_getNMEA+0x134>
        case 'Z': //only ZDA left
            return gps_checkNMEA(pOutput, GPS_NMEA_ZDA, "$GPZDA", 0, "", FALSE);
    302a:	e1 2c       	mov	r14, r1
    302c:	07 ed       	ldi	r16, 0xD7	; 215
    302e:	11 e0       	ldi	r17, 0x01	; 1
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	45 e4       	ldi	r20, 0x45	; 69
    3034:	51 e0       	ldi	r21, 0x01	; 1
    3036:	60 e8       	ldi	r22, 0x80	; 128
    3038:	ce 01       	movw	r24, r28
    303a:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <gps_checkNMEA>
    303e:	03 c0       	rjmp	.+6      	; 0x3046 <gps_getNMEA+0x134>
        default:
            return GPS_NMEA_UNKNOWN;
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	01 c0       	rjmp	.+2      	; 0x3046 <gps_getNMEA+0x134>
                        return gps_checkNMEA(pOutput, GPS_NMEA_GSV, "$GPGSV", 0, "", FALSE);
                    }
                case 'L': //only GLL left
                    return gps_checkNMEA(pOutput, GPS_NMEA_GLL, "$GPGLL", 6, "A", TRUE);
                default:
                    return GPS_NMEA_UNKNOWN;
    3044:	80 e0       	ldi	r24, 0x00	; 0
        case 'Z': //only ZDA left
            return gps_checkNMEA(pOutput, GPS_NMEA_ZDA, "$GPZDA", 0, "", FALSE);
        default:
            return GPS_NMEA_UNKNOWN;
    }
}
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	1f 91       	pop	r17
    304c:	0f 91       	pop	r16
    304e:	ff 90       	pop	r15
    3050:	ef 90       	pop	r14
    3052:	08 95       	ret

00003054 <toggle_e>:


#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void){
    lcd_e_high();
    3054:	16 9a       	sbi	0x02, 6	; 2
    lcd_e_delay();
    3056:	00 c0       	rjmp	.+0      	; 0x3058 <toggle_e+0x4>
    lcd_e_low();
    3058:	16 98       	cbi	0x02, 6	; 2
    305a:	08 95       	ret

0000305c <lcd_write>:
          rs     1: write data    
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs){
    305c:	cf 93       	push	r28
    305e:	df 93       	push	r29
    3060:	d8 2f       	mov	r29, r24
    unsigned char dataBits ;


    if (rs){   /* write data        (RS=1, RW=0) */
    3062:	66 23       	and	r22, r22
    3064:	11 f0       	breq	.+4      	; 0x306a <lcd_write+0xe>
       lcd_rs_high();
    3066:	14 9a       	sbi	0x02, 4	; 2
    3068:	01 c0       	rjmp	.+2      	; 0x306c <lcd_write+0x10>
    } else{    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    306a:	14 98       	cbi	0x02, 4	; 2
    }
    lcd_rw_low();
    306c:	15 98       	cbi	0x02, 5	; 2

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) ){
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
    306e:	81 b1       	in	r24, 0x01	; 1
    3070:	8f 60       	ori	r24, 0x0F	; 15
    3072:	81 b9       	out	0x01, r24	; 1

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
    3074:	c2 b1       	in	r28, 0x02	; 2
    3076:	c0 7f       	andi	r28, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
    3078:	8d 2f       	mov	r24, r29
    307a:	82 95       	swap	r24
    307c:	8f 70       	andi	r24, 0x0F	; 15
    307e:	8c 2b       	or	r24, r28
    3080:	82 b9       	out	0x02, r24	; 2
        lcd_e_toggle();
    3082:	0e 94 2a 18 	call	0x3054	; 0x3054 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
    3086:	df 70       	andi	r29, 0x0F	; 15
    3088:	dc 2b       	or	r29, r28
    308a:	d2 b9       	out	0x02, r29	; 2
        lcd_e_toggle();
    308c:	0e 94 2a 18 	call	0x3054	; 0x3054 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
    3090:	cf 60       	ori	r28, 0x0F	; 15
    3092:	c2 b9       	out	0x02, r28	; 2
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
    3094:	df 91       	pop	r29
    3096:	cf 91       	pop	r28
    3098:	08 95       	ret

0000309a <lcd_read>:
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs){
    uint8_t data;
    
    
    if (rs)
    309a:	88 23       	and	r24, r24
    309c:	11 f0       	breq	.+4      	; 0x30a2 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
    309e:	14 9a       	sbi	0x02, 4	; 2
    30a0:	01 c0       	rjmp	.+2      	; 0x30a4 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
    30a2:	14 98       	cbi	0x02, 4	; 2
    lcd_rw_high();                           /* RW=1  read mode      */
    30a4:	15 9a       	sbi	0x02, 5	; 2
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) ){
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
    30a6:	81 b1       	in	r24, 0x01	; 1
    30a8:	80 7f       	andi	r24, 0xF0	; 240
    30aa:	81 b9       	out	0x01, r24	; 1
        
        lcd_e_high();
    30ac:	16 9a       	sbi	0x02, 6	; 2
        lcd_e_delay();        
    30ae:	00 c0       	rjmp	.+0      	; 0x30b0 <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
    30b0:	90 b1       	in	r25, 0x00	; 0
        lcd_e_low();
    30b2:	16 98       	cbi	0x02, 6	; 2
        
        lcd_e_delay();                       /* Enable 500ns low       */
    30b4:	00 c0       	rjmp	.+0      	; 0x30b6 <lcd_read+0x1c>
        
        lcd_e_high();
    30b6:	16 9a       	sbi	0x02, 6	; 2
        lcd_e_delay();
    30b8:	00 c0       	rjmp	.+0      	; 0x30ba <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
    30ba:	80 b1       	in	r24, 0x00	; 0
        lcd_e_low();
    30bc:	16 98       	cbi	0x02, 6	; 2
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) ){
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
    30be:	92 95       	swap	r25
    30c0:	90 7f       	andi	r25, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
    30c2:	8f 70       	andi	r24, 0x0F	; 15
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
    30c4:	89 2b       	or	r24, r25
    30c6:	08 95       	ret

000030c8 <lcd_waitbusy>:
*************************************************************************/
static uint8_t lcd_waitbusy(void){
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	0e 94 4d 18 	call	0x309a	; 0x309a <lcd_read>
    30ce:	88 23       	and	r24, r24
    30d0:	dc f3       	brlt	.-10     	; 0x30c8 <lcd_waitbusy>
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count){
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    30d2:	83 e0       	ldi	r24, 0x03	; 3
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	f1 f7       	brne	.-4      	; 0x30d6 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	0e 94 4d 18 	call	0x309a	; 0x309a <lcd_read>
    
}/* lcd_waitbusy */
    30e0:	08 95       	ret

000030e2 <lcd_command>:
/*************************************************************************
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd){
    30e2:	cf 93       	push	r28
    30e4:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
    30e6:	0e 94 64 18 	call	0x30c8	; 0x30c8 <lcd_waitbusy>
    lcd_write(cmd,0);
    30ea:	60 e0       	ldi	r22, 0x00	; 0
    30ec:	8c 2f       	mov	r24, r28
    30ee:	0e 94 2e 18 	call	0x305c	; 0x305c <lcd_write>
}
    30f2:	cf 91       	pop	r28
    30f4:	08 95       	ret

000030f6 <lcd_gotoxy>:
			lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
		else
			lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
	#endif
	#if LCD_LINES==4
		if ( y==0 )
    30f6:	61 11       	cpse	r22, r1
    30f8:	04 c0       	rjmp	.+8      	; 0x3102 <lcd_gotoxy+0xc>
			lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    30fa:	80 58       	subi	r24, 0x80	; 128
    30fc:	0e 94 71 18 	call	0x30e2	; 0x30e2 <lcd_command>
    3100:	08 95       	ret
		else if ( y==1)
    3102:	61 30       	cpi	r22, 0x01	; 1
    3104:	21 f4       	brne	.+8      	; 0x310e <lcd_gotoxy+0x18>
			lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    3106:	80 54       	subi	r24, 0x40	; 64
    3108:	0e 94 71 18 	call	0x30e2	; 0x30e2 <lcd_command>
    310c:	08 95       	ret
		else if ( y==2)
    310e:	62 30       	cpi	r22, 0x02	; 2
    3110:	21 f4       	brne	.+8      	; 0x311a <lcd_gotoxy+0x24>
			lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    3112:	8c 56       	subi	r24, 0x6C	; 108
    3114:	0e 94 71 18 	call	0x30e2	; 0x30e2 <lcd_command>
    3118:	08 95       	ret
		else /* y==3 */
			lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
    311a:	8c 52       	subi	r24, 0x2C	; 44
    311c:	0e 94 71 18 	call	0x30e2	; 0x30e2 <lcd_command>
    3120:	08 95       	ret

00003122 <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void){
    lcd_command(1<<LCD_CLR);
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	0e 94 71 18 	call	0x30e2	; 0x30e2 <lcd_command>
    3128:	08 95       	ret

0000312a <lcd_home>:

/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void){
    lcd_command(1<<LCD_HOME);
    312a:	82 e0       	ldi	r24, 0x02	; 2
    312c:	0e 94 71 18 	call	0x30e2	; 0x30e2 <lcd_command>
    3130:	08 95       	ret

00003132 <lcd_putc>:
/*************************************************************************
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c){
    3132:	cf 93       	push	r28
    3134:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
    3136:	0e 94 64 18 	call	0x30c8	; 0x30c8 <lcd_waitbusy>
    if (c=='\n'){
    313a:	ca 30       	cpi	r28, 0x0A	; 10
    313c:	a1 f4       	brne	.+40     	; 0x3166 <lcd_putc+0x34>
		else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
			addressCounter = LCD_START_LINE4;
		else
			addressCounter = LCD_START_LINE1;
	#else
		if ( pos < LCD_START_LINE3 )
    313e:	84 31       	cpi	r24, 0x14	; 20
    3140:	48 f0       	brcs	.+18     	; 0x3154 <lcd_putc+0x22>
			addressCounter = LCD_START_LINE2;
		else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
    3142:	98 2f       	mov	r25, r24
    3144:	90 54       	subi	r25, 0x40	; 64
    3146:	94 31       	cpi	r25, 0x14	; 20
    3148:	38 f0       	brcs	.+14     	; 0x3158 <lcd_putc+0x26>
			addressCounter = LCD_START_LINE3;
		else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
    314a:	84 51       	subi	r24, 0x14	; 20
    314c:	8c 32       	cpi	r24, 0x2C	; 44
    314e:	30 f4       	brcc	.+12     	; 0x315c <lcd_putc+0x2a>
			addressCounter = LCD_START_LINE4;
    3150:	84 e5       	ldi	r24, 0x54	; 84
    3152:	05 c0       	rjmp	.+10     	; 0x315e <lcd_putc+0x2c>
			addressCounter = LCD_START_LINE4;
		else
			addressCounter = LCD_START_LINE1;
	#else
		if ( pos < LCD_START_LINE3 )
			addressCounter = LCD_START_LINE2;
    3154:	80 e4       	ldi	r24, 0x40	; 64
    3156:	03 c0       	rjmp	.+6      	; 0x315e <lcd_putc+0x2c>
		else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
			addressCounter = LCD_START_LINE3;
    3158:	84 e1       	ldi	r24, 0x14	; 20
    315a:	01 c0       	rjmp	.+2      	; 0x315e <lcd_putc+0x2c>
		else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
			addressCounter = LCD_START_LINE4;
		else
			addressCounter = LCD_START_LINE1;
    315c:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	#endif
		lcd_command((1<<LCD_DDRAM)+addressCounter);
    315e:	80 58       	subi	r24, 0x80	; 128
    3160:	0e 94 71 18 	call	0x30e2	; 0x30e2 <lcd_command>
    3164:	04 c0       	rjmp	.+8      	; 0x316e <lcd_putc+0x3c>
				lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
			}
		#endif
			lcd_waitbusy();
		#endif
			lcd_write(c, 1);
    3166:	61 e0       	ldi	r22, 0x01	; 1
    3168:	8c 2f       	mov	r24, r28
    316a:	0e 94 2e 18 	call	0x305c	; 0x305c <lcd_write>
    }

}/* lcd_putc */
    316e:	cf 91       	pop	r28
    3170:	08 95       	ret

00003172 <lcd_puts>:
/*************************************************************************
Display string without auto linefeed 
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s){ /* print string on lcd (no auto linefeed) */
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
    3176:	ec 01       	movw	r28, r24
    3178:	89 91       	ld	r24, Y+
    317a:	88 23       	and	r24, r24
    317c:	29 f0       	breq	.+10     	; 0x3188 <lcd_puts+0x16>
        lcd_putc(c);
    317e:	0e 94 99 18 	call	0x3132	; 0x3132 <lcd_putc>
Returns:  none
*************************************************************************/
void lcd_puts(const char *s){ /* print string on lcd (no auto linefeed) */
    register char c;

    while ( (c = *s++) ) {
    3182:	89 91       	ld	r24, Y+
    3184:	81 11       	cpse	r24, r1
    3186:	fb cf       	rjmp	.-10     	; 0x317e <lcd_puts+0xc>
        lcd_putc(c);
    }

}/* lcd_puts */
    3188:	df 91       	pop	r29
    318a:	cf 91       	pop	r28
    318c:	08 95       	ret

0000318e <lcd_init>:
                   LCD_DISP_ON             display on, cursor off
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr){
    318e:	1f 93       	push	r17
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
    3196:	81 b1       	in	r24, 0x01	; 1
    3198:	8f 67       	ori	r24, 0x7F	; 127
    319a:	81 b9       	out	0x01, r24	; 1
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count){
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    319c:	e0 e3       	ldi	r30, 0x30	; 48
    319e:	f3 e7       	ldi	r31, 0x73	; 115
    31a0:	31 97       	sbiw	r30, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
    31a4:	11 9a       	sbi	0x02, 1	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    31a6:	10 9a       	sbi	0x02, 0	; 2
    lcd_e_toggle();
    31a8:	0e 94 2a 18 	call	0x3054	; 0x3054 <toggle_e>
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count){
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    31ac:	e0 ef       	ldi	r30, 0xF0	; 240
    31ae:	f3 e2       	ldi	r31, 0x23	; 35
    31b0:	31 97       	sbiw	r30, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
    31b4:	0e 94 2a 18 	call	0x3054	; 0x3054 <toggle_e>
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count){
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    31b8:	c5 e7       	ldi	r28, 0x75	; 117
    31ba:	d0 e0       	ldi	r29, 0x00	; 0
    31bc:	fe 01       	movw	r30, r28
    31be:	31 97       	sbiw	r30, 0x01	; 1
    31c0:	f1 f7       	brne	.-4      	; 0x31be <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
    31c2:	0e 94 2a 18 	call	0x3054	; 0x3054 <toggle_e>
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count){
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    31c6:	fe 01       	movw	r30, r28
    31c8:	31 97       	sbiw	r30, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    31cc:	10 98       	cbi	0x02, 0	; 2
    lcd_e_toggle();
    31ce:	0e 94 2a 18 	call	0x3054	; 0x3054 <toggle_e>
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count){
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    31d2:	21 97       	sbiw	r28, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <lcd_init+0x44>
		/* Display with KS0073 controller requires special commands for enabling 4 line mode */
		lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
		lcd_command(KS0073_4LINES_MODE);
		lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
	#else
		lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    31d6:	88 e2       	ldi	r24, 0x28	; 40
    31d8:	0e 94 71 18 	call	0x30e2	; 0x30e2 <lcd_command>
	#endif
		lcd_command(LCD_DISP_OFF);              /* display off                  */
    31dc:	88 e0       	ldi	r24, 0x08	; 8
    31de:	0e 94 71 18 	call	0x30e2	; 0x30e2 <lcd_command>
		lcd_clrscr();                           /* display clear                */
    31e2:	0e 94 91 18 	call	0x3122	; 0x3122 <lcd_clrscr>
		lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    31e6:	86 e0       	ldi	r24, 0x06	; 6
    31e8:	0e 94 71 18 	call	0x30e2	; 0x30e2 <lcd_command>
		lcd_command(dispAttr);                  /* display/cursor control       */
    31ec:	81 2f       	mov	r24, r17
    31ee:	0e 94 71 18 	call	0x30e2	; 0x30e2 <lcd_command>

}/* lcd_init */
    31f2:	df 91       	pop	r29
    31f4:	cf 91       	pop	r28
    31f6:	1f 91       	pop	r17
    31f8:	08 95       	ret

000031fa <dly_us>:

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
    31fa:	23 b1       	in	r18, 0x03	; 3
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	e9 f7       	brne	.-6      	; 0x31fa <dly_us>
}
    3200:	08 95       	ret

00003202 <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    3202:	fc 01       	movw	r30, r24
/*-----------------------------------------------------------------------*/
/* Transmit bytes to the card (bitbanging)                               */
/*-----------------------------------------------------------------------*/

static
void xmit_mmc (
    3204:	68 0f       	add	r22, r24
    3206:	79 1f       	adc	r23, r25
{
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
    3208:	81 91       	ld	r24, Z+
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
    320a:	88 23       	and	r24, r24
    320c:	14 f4       	brge	.+4      	; 0x3212 <xmit_mmc+0x10>
    320e:	2d 9a       	sbi	0x05, 5	; 5
    3210:	01 c0       	rjmp	.+2      	; 0x3214 <xmit_mmc+0x12>
    3212:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3214:	2f 9a       	sbi	0x05, 7	; 5
    3216:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
    3218:	86 ff       	sbrs	r24, 6
    321a:	02 c0       	rjmp	.+4      	; 0x3220 <xmit_mmc+0x1e>
    321c:	2d 9a       	sbi	0x05, 5	; 5
    321e:	01 c0       	rjmp	.+2      	; 0x3222 <xmit_mmc+0x20>
    3220:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3222:	2f 9a       	sbi	0x05, 7	; 5
    3224:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
    3226:	85 ff       	sbrs	r24, 5
    3228:	02 c0       	rjmp	.+4      	; 0x322e <xmit_mmc+0x2c>
    322a:	2d 9a       	sbi	0x05, 5	; 5
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <xmit_mmc+0x2e>
    322e:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3230:	2f 9a       	sbi	0x05, 7	; 5
    3232:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
    3234:	84 ff       	sbrs	r24, 4
    3236:	02 c0       	rjmp	.+4      	; 0x323c <xmit_mmc+0x3a>
    3238:	2d 9a       	sbi	0x05, 5	; 5
    323a:	01 c0       	rjmp	.+2      	; 0x323e <xmit_mmc+0x3c>
    323c:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    323e:	2f 9a       	sbi	0x05, 7	; 5
    3240:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
    3242:	83 ff       	sbrs	r24, 3
    3244:	02 c0       	rjmp	.+4      	; 0x324a <xmit_mmc+0x48>
    3246:	2d 9a       	sbi	0x05, 5	; 5
    3248:	01 c0       	rjmp	.+2      	; 0x324c <xmit_mmc+0x4a>
    324a:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    324c:	2f 9a       	sbi	0x05, 7	; 5
    324e:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
    3250:	82 ff       	sbrs	r24, 2
    3252:	02 c0       	rjmp	.+4      	; 0x3258 <xmit_mmc+0x56>
    3254:	2d 9a       	sbi	0x05, 5	; 5
    3256:	01 c0       	rjmp	.+2      	; 0x325a <xmit_mmc+0x58>
    3258:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    325a:	2f 9a       	sbi	0x05, 7	; 5
    325c:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
    325e:	81 ff       	sbrs	r24, 1
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <xmit_mmc+0x64>
    3262:	2d 9a       	sbi	0x05, 5	; 5
    3264:	01 c0       	rjmp	.+2      	; 0x3268 <xmit_mmc+0x66>
    3266:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3268:	2f 9a       	sbi	0x05, 7	; 5
    326a:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
    326c:	80 ff       	sbrs	r24, 0
    326e:	02 c0       	rjmp	.+4      	; 0x3274 <xmit_mmc+0x72>
    3270:	2d 9a       	sbi	0x05, 5	; 5
    3272:	01 c0       	rjmp	.+2      	; 0x3276 <xmit_mmc+0x74>
    3274:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3276:	2f 9a       	sbi	0x05, 7	; 5
    3278:	2f 98       	cbi	0x05, 7	; 5
	} while (--bc);
    327a:	e6 17       	cp	r30, r22
    327c:	f7 07       	cpc	r31, r23
    327e:	21 f6       	brne	.-120    	; 0x3208 <xmit_mmc+0x6>
}
    3280:	08 95       	ret

00003282 <rcvr_mmc>:
static
void rcvr_mmc (
	BYTE *buff,	/* Pointer to read buffer */
	UINT bc		/* Number of bytes to receive */
)
{
    3282:	fc 01       	movw	r30, r24
	BYTE r;


	DI_H();	/* Send 0xFF */
    3284:	2d 9a       	sbi	0x05, 5	; 5
/*-----------------------------------------------------------------------*/
/* Receive bytes from the card (bitbanging)                              */
/*-----------------------------------------------------------------------*/

static
void rcvr_mmc (
    3286:	68 0f       	add	r22, r24
    3288:	79 1f       	adc	r23, r25


	DI_H();	/* Send 0xFF */

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    328a:	83 b1       	in	r24, 0x03	; 3
		CK_H(); CK_L();
    328c:	2f 9a       	sbi	0x05, 7	; 5
    328e:	2f 98       	cbi	0x05, 7	; 5


	DI_H();	/* Send 0xFF */

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    3290:	86 fb       	bst	r24, 6
    3292:	88 27       	eor	r24, r24
    3294:	80 f9       	bld	r24, 0
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit6 */
    3296:	88 0f       	add	r24, r24
    3298:	1e 99       	sbic	0x03, 6	; 3
    329a:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    329c:	2f 9a       	sbi	0x05, 7	; 5
    329e:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit5 */
    32a0:	88 0f       	add	r24, r24
    32a2:	1e 99       	sbic	0x03, 6	; 3
    32a4:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    32a6:	2f 9a       	sbi	0x05, 7	; 5
    32a8:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit4 */
    32aa:	88 0f       	add	r24, r24
    32ac:	1e 99       	sbic	0x03, 6	; 3
    32ae:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    32b0:	2f 9a       	sbi	0x05, 7	; 5
    32b2:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit3 */
    32b4:	88 0f       	add	r24, r24
    32b6:	1e 99       	sbic	0x03, 6	; 3
    32b8:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    32ba:	2f 9a       	sbi	0x05, 7	; 5
    32bc:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit2 */
    32be:	88 0f       	add	r24, r24
    32c0:	1e 99       	sbic	0x03, 6	; 3
    32c2:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    32c4:	2f 9a       	sbi	0x05, 7	; 5
    32c6:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit1 */
    32c8:	88 0f       	add	r24, r24
    32ca:	1e 99       	sbic	0x03, 6	; 3
    32cc:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    32ce:	2f 9a       	sbi	0x05, 7	; 5
    32d0:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit0 */
    32d2:	88 0f       	add	r24, r24
    32d4:	1e 99       	sbic	0x03, 6	; 3
    32d6:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    32d8:	2f 9a       	sbi	0x05, 7	; 5
    32da:	2f 98       	cbi	0x05, 7	; 5
		*buff++ = r;			/* Store a received byte */
    32dc:	81 93       	st	Z+, r24
	} while (--bc);
    32de:	e6 17       	cp	r30, r22
    32e0:	f7 07       	cpc	r31, r23
    32e2:	99 f6       	brne	.-90     	; 0x328a <rcvr_mmc+0x8>
}
    32e4:	08 95       	ret

000032e6 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    32e6:	0f 93       	push	r16
    32e8:	1f 93       	push	r17
    32ea:	cf 93       	push	r28
    32ec:	df 93       	push	r29
    32ee:	1f 92       	push	r1
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    32f4:	08 e8       	ldi	r16, 0x88	; 136
    32f6:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
    32f8:	61 e0       	ldi	r22, 0x01	; 1
    32fa:	70 e0       	ldi	r23, 0x00	; 0
    32fc:	ce 01       	movw	r24, r28
    32fe:	01 96       	adiw	r24, 0x01	; 1
    3300:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>
		if (d == 0xFF) break;
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	8f 3f       	cpi	r24, 0xFF	; 255
    3308:	39 f0       	breq	.+14     	; 0x3318 <wait_ready+0x32>
		dly_us(100);
    330a:	84 e6       	ldi	r24, 0x64	; 100
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	0e 94 fd 18 	call	0x31fa	; 0x31fa <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    3312:	01 50       	subi	r16, 0x01	; 1
    3314:	11 09       	sbc	r17, r1
    3316:	81 f7       	brne	.-32     	; 0x32f8 <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
    3318:	21 e0       	ldi	r18, 0x01	; 1
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	01 2b       	or	r16, r17
    331e:	11 f4       	brne	.+4      	; 0x3324 <wait_ready+0x3e>
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
}
    3324:	82 2f       	mov	r24, r18
    3326:	93 2f       	mov	r25, r19
    3328:	0f 90       	pop	r0
    332a:	df 91       	pop	r29
    332c:	cf 91       	pop	r28
    332e:	1f 91       	pop	r17
    3330:	0f 91       	pop	r16
    3332:	08 95       	ret

00003334 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	1f 92       	push	r1
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();
    333e:	2b 9a       	sbi	0x05, 3	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    3340:	61 e0       	ldi	r22, 0x01	; 1
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	ce 01       	movw	r24, r28
    3346:	01 96       	adiw	r24, 0x01	; 1
    3348:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>
}
    334c:	0f 90       	pop	r0
    334e:	df 91       	pop	r29
    3350:	cf 91       	pop	r28
    3352:	08 95       	ret

00003354 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	1f 92       	push	r1
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();
    335e:	2b 98       	cbi	0x05, 3	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    3360:	61 e0       	ldi	r22, 0x01	; 1
    3362:	70 e0       	ldi	r23, 0x00	; 0
    3364:	ce 01       	movw	r24, r28
    3366:	01 96       	adiw	r24, 0x01	; 1
    3368:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>

	if (wait_ready()) return 1;	/* OK */
    336c:	0e 94 73 19 	call	0x32e6	; 0x32e6 <wait_ready>
    3370:	89 2b       	or	r24, r25
    3372:	29 f4       	brne	.+10     	; 0x337e <select+0x2a>
	deselect();
    3374:	0e 94 9a 19 	call	0x3334	; 0x3334 <deselect>
	return 0;			/* Failed */
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	02 c0       	rjmp	.+4      	; 0x3382 <select+0x2e>
	BYTE d;

	CS_L();
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
    337e:	21 e0       	ldi	r18, 0x01	; 1
    3380:	30 e0       	ldi	r19, 0x00	; 0
	deselect();
	return 0;			/* Failed */
}
    3382:	82 2f       	mov	r24, r18
    3384:	93 2f       	mov	r25, r19
    3386:	0f 90       	pop	r0
    3388:	df 91       	pop	r29
    338a:	cf 91       	pop	r28
    338c:	08 95       	ret

0000338e <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    338e:	cf 92       	push	r12
    3390:	df 92       	push	r13
    3392:	ef 92       	push	r14
    3394:	ff 92       	push	r15
    3396:	0f 93       	push	r16
    3398:	1f 93       	push	r17
    339a:	cf 93       	push	r28
    339c:	df 93       	push	r29
    339e:	00 d0       	rcall	.+0      	; 0x33a0 <rcvr_datablock+0x12>
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	7c 01       	movw	r14, r24
    33a6:	6b 01       	movw	r12, r22
    33a8:	08 ee       	ldi	r16, 0xE8	; 232
    33aa:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    33ac:	61 e0       	ldi	r22, 0x01	; 1
    33ae:	70 e0       	ldi	r23, 0x00	; 0
    33b0:	ce 01       	movw	r24, r28
    33b2:	01 96       	adiw	r24, 0x01	; 1
    33b4:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>
		if (d[0] != 0xFF) break;
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	8f 3f       	cpi	r24, 0xFF	; 255
    33bc:	39 f4       	brne	.+14     	; 0x33cc <rcvr_datablock+0x3e>
		dly_us(100);
    33be:	84 e6       	ldi	r24, 0x64	; 100
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <dly_us>
    33c6:	01 50       	subi	r16, 0x01	; 1
    33c8:	11 09       	sbc	r17, r1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    33ca:	81 f7       	brne	.-32     	; 0x33ac <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	8e 3f       	cpi	r24, 0xFE	; 254
    33d0:	69 f4       	brne	.+26     	; 0x33ec <rcvr_datablock+0x5e>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    33d2:	b6 01       	movw	r22, r12
    33d4:	c7 01       	movw	r24, r14
    33d6:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    33da:	62 e0       	ldi	r22, 0x02	; 2
    33dc:	70 e0       	ldi	r23, 0x00	; 0
    33de:	ce 01       	movw	r24, r28
    33e0:	01 96       	adiw	r24, 0x01	; 1
    33e2:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>

	return 1;						/* Return with success */
    33e6:	21 e0       	ldi	r18, 0x01	; 1
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	02 c0       	rjmp	.+4      	; 0x33f0 <rcvr_datablock+0x62>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    33f0:	82 2f       	mov	r24, r18
    33f2:	93 2f       	mov	r25, r19
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    33fc:	1f 91       	pop	r17
    33fe:	0f 91       	pop	r16
    3400:	ff 90       	pop	r15
    3402:	ef 90       	pop	r14
    3404:	df 90       	pop	r13
    3406:	cf 90       	pop	r12
    3408:	08 95       	ret

0000340a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    340a:	ff 92       	push	r15
    340c:	0f 93       	push	r16
    340e:	1f 93       	push	r17
    3410:	cf 93       	push	r28
    3412:	df 93       	push	r29
    3414:	00 d0       	rcall	.+0      	; 0x3416 <xmit_datablock+0xc>
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	8c 01       	movw	r16, r24
    341c:	f6 2e       	mov	r15, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
    341e:	0e 94 73 19 	call	0x32e6	; 0x32e6 <wait_ready>
    3422:	89 2b       	or	r24, r25
    3424:	21 f1       	breq	.+72     	; 0x346e <xmit_datablock+0x64>

	d[0] = token;
    3426:	f9 82       	std	Y+1, r15	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
    3428:	61 e0       	ldi	r22, 0x01	; 1
    342a:	70 e0       	ldi	r23, 0x00	; 0
    342c:	ce 01       	movw	r24, r28
    342e:	01 96       	adiw	r24, 0x01	; 1
    3430:	0e 94 01 19 	call	0x3202	; 0x3202 <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    3434:	8d ef       	ldi	r24, 0xFD	; 253
    3436:	f8 16       	cp	r15, r24
    3438:	e9 f0       	breq	.+58     	; 0x3474 <xmit_datablock+0x6a>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    343a:	60 e0       	ldi	r22, 0x00	; 0
    343c:	72 e0       	ldi	r23, 0x02	; 2
    343e:	c8 01       	movw	r24, r16
    3440:	0e 94 01 19 	call	0x3202	; 0x3202 <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    3444:	62 e0       	ldi	r22, 0x02	; 2
    3446:	70 e0       	ldi	r23, 0x00	; 0
    3448:	ce 01       	movw	r24, r28
    344a:	01 96       	adiw	r24, 0x01	; 1
    344c:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    3450:	61 e0       	ldi	r22, 0x01	; 1
    3452:	70 e0       	ldi	r23, 0x00	; 0
    3454:	ce 01       	movw	r24, r28
    3456:	01 96       	adiw	r24, 0x01	; 1
    3458:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	8f 71       	andi	r24, 0x1F	; 31
    3460:	21 e0       	ldi	r18, 0x01	; 1
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	85 30       	cpi	r24, 0x05	; 5
    3466:	41 f0       	breq	.+16     	; 0x3478 <xmit_datablock+0x6e>
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	05 c0       	rjmp	.+10     	; 0x3478 <xmit_datablock+0x6e>
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	02 c0       	rjmp	.+4      	; 0x3478 <xmit_datablock+0x6e>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
    3474:	21 e0       	ldi	r18, 0x01	; 1
    3476:	30 e0       	ldi	r19, 0x00	; 0
}
    3478:	82 2f       	mov	r24, r18
    347a:	93 2f       	mov	r25, r19
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	df 91       	pop	r29
    3482:	cf 91       	pop	r28
    3484:	1f 91       	pop	r17
    3486:	0f 91       	pop	r16
    3488:	ff 90       	pop	r15
    348a:	08 95       	ret

0000348c <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    348c:	df 92       	push	r13
    348e:	ef 92       	push	r14
    3490:	ff 92       	push	r15
    3492:	0f 93       	push	r16
    3494:	1f 93       	push	r17
    3496:	cf 93       	push	r28
    3498:	df 93       	push	r29
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
    349e:	27 97       	sbiw	r28, 0x07	; 7
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	f8 94       	cli
    34a4:	de bf       	out	0x3e, r29	; 62
    34a6:	0f be       	out	0x3f, r0	; 63
    34a8:	cd bf       	out	0x3d, r28	; 61
    34aa:	18 2f       	mov	r17, r24
    34ac:	04 2f       	mov	r16, r20
    34ae:	f5 2e       	mov	r15, r21
    34b0:	e6 2e       	mov	r14, r22
    34b2:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    34b4:	88 23       	and	r24, r24
    34b6:	54 f4       	brge	.+20     	; 0x34cc <send_cmd+0x40>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    34b8:	40 e0       	ldi	r20, 0x00	; 0
    34ba:	50 e0       	ldi	r21, 0x00	; 0
    34bc:	ba 01       	movw	r22, r20
    34be:	87 e3       	ldi	r24, 0x37	; 55
    34c0:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
		if (n > 1) return n;
    34c4:	82 30       	cpi	r24, 0x02	; 2
    34c6:	08 f0       	brcs	.+2      	; 0x34ca <send_cmd+0x3e>
    34c8:	4c c0       	rjmp	.+152    	; 0x3562 <send_cmd+0xd6>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    34ca:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    34cc:	1c 30       	cpi	r17, 0x0C	; 12
    34ce:	81 f1       	breq	.+96     	; 0x3530 <send_cmd+0xa4>
		deselect();
    34d0:	0e 94 9a 19 	call	0x3334	; 0x3334 <deselect>
		if (!select()) return 0xFF;
    34d4:	0e 94 aa 19 	call	0x3354	; 0x3354 <select>
    34d8:	89 2b       	or	r24, r25
    34da:	41 f1       	breq	.+80     	; 0x352c <send_cmd+0xa0>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    34dc:	81 2f       	mov	r24, r17
    34de:	80 64       	ori	r24, 0x40	; 64
    34e0:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    34e2:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    34e4:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    34e6:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    34e8:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    34ea:	11 23       	and	r17, r17
    34ec:	89 f1       	breq	.+98     	; 0x3550 <send_cmd+0xc4>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    34ee:	18 30       	cpi	r17, 0x08	; 8
    34f0:	31 f1       	breq	.+76     	; 0x353e <send_cmd+0xb2>
	buf[5] = n;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    34f6:	66 e0       	ldi	r22, 0x06	; 6
    34f8:	70 e0       	ldi	r23, 0x00	; 0
    34fa:	ce 01       	movw	r24, r28
    34fc:	02 96       	adiw	r24, 0x02	; 2
    34fe:	0e 94 01 19 	call	0x3202	; 0x3202 <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    3502:	1c 30       	cpi	r17, 0x0C	; 12
    3504:	31 f4       	brne	.+12     	; 0x3512 <send_cmd+0x86>
    3506:	61 e0       	ldi	r22, 0x01	; 1
    3508:	70 e0       	ldi	r23, 0x00	; 0
    350a:	ce 01       	movw	r24, r28
    350c:	01 96       	adiw	r24, 0x01	; 1
    350e:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    3512:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    3514:	61 e0       	ldi	r22, 0x01	; 1
    3516:	70 e0       	ldi	r23, 0x00	; 0
    3518:	ce 01       	movw	r24, r28
    351a:	01 96       	adiw	r24, 0x01	; 1
    351c:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>
	while ((d & 0x80) && --n);
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	88 23       	and	r24, r24
    3524:	f4 f4       	brge	.+60     	; 0x3562 <send_cmd+0xd6>
    3526:	11 50       	subi	r17, 0x01	; 1
    3528:	a9 f7       	brne	.-22     	; 0x3514 <send_cmd+0x88>
    352a:	1b c0       	rjmp	.+54     	; 0x3562 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    352c:	8f ef       	ldi	r24, 0xFF	; 255
    352e:	19 c0       	rjmp	.+50     	; 0x3562 <send_cmd+0xd6>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    3530:	8c e4       	ldi	r24, 0x4C	; 76
    3532:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    3534:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    3536:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    3538:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    353a:	0e 83       	std	Y+6, r16	; 0x06
    353c:	da cf       	rjmp	.-76     	; 0x34f2 <send_cmd+0x66>
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    353e:	87 e8       	ldi	r24, 0x87	; 135
    3540:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    3542:	66 e0       	ldi	r22, 0x06	; 6
    3544:	70 e0       	ldi	r23, 0x00	; 0
    3546:	ce 01       	movw	r24, r28
    3548:	02 96       	adiw	r24, 0x02	; 2
    354a:	0e 94 01 19 	call	0x3202	; 0x3202 <xmit_mmc>
    354e:	e1 cf       	rjmp	.-62     	; 0x3512 <send_cmd+0x86>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    3550:	85 e9       	ldi	r24, 0x95	; 149
    3552:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    3554:	66 e0       	ldi	r22, 0x06	; 6
    3556:	70 e0       	ldi	r23, 0x00	; 0
    3558:	ce 01       	movw	r24, r28
    355a:	02 96       	adiw	r24, 0x02	; 2
    355c:	0e 94 01 19 	call	0x3202	; 0x3202 <xmit_mmc>
    3560:	d8 cf       	rjmp	.-80     	; 0x3512 <send_cmd+0x86>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
    3562:	27 96       	adiw	r28, 0x07	; 7
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	cd bf       	out	0x3d, r28	; 61
    356e:	df 91       	pop	r29
    3570:	cf 91       	pop	r28
    3572:	1f 91       	pop	r17
    3574:	0f 91       	pop	r16
    3576:	ff 90       	pop	r15
    3578:	ef 90       	pop	r14
    357a:	df 90       	pop	r13
    357c:	08 95       	ret

0000357e <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    357e:	81 11       	cpse	r24, r1
    3580:	03 c0       	rjmp	.+6      	; 0x3588 <disk_status+0xa>

	return Stat;
    3582:	80 91 00 01 	lds	r24, 0x0100
    3586:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    3588:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
    358a:	08 95       	ret

0000358c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    358c:	ef 92       	push	r14
    358e:	ff 92       	push	r15
    3590:	0f 93       	push	r16
    3592:	1f 93       	push	r17
    3594:	cf 93       	push	r28
    3596:	df 93       	push	r29
    3598:	00 d0       	rcall	.+0      	; 0x359a <disk_initialize+0xe>
    359a:	00 d0       	rcall	.+0      	; 0x359c <disk_initialize+0x10>
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    35a0:	81 11       	cpse	r24, r1
    35a2:	ad c0       	rjmp	.+346    	; 0x36fe <disk_initialize+0x172>

	dly_us(10000);			/* 10ms */
    35a4:	80 e1       	ldi	r24, 0x10	; 16
    35a6:	97 e2       	ldi	r25, 0x27	; 39
    35a8:	0e 94 fd 18 	call	0x31fa	; 0x31fa <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
    35ac:	23 9a       	sbi	0x04, 3	; 4
    35ae:	2b 9a       	sbi	0x05, 3	; 5
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
    35b0:	27 9a       	sbi	0x04, 7	; 4
    35b2:	2f 98       	cbi	0x05, 7	; 5
	DI_INIT();				/* Initialize port pin tied to DI */
    35b4:	25 9a       	sbi	0x04, 5	; 4
    35b6:	1a e0       	ldi	r17, 0x0A	; 10
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    35b8:	61 e0       	ldi	r22, 0x01	; 1
    35ba:	70 e0       	ldi	r23, 0x00	; 0
    35bc:	ce 01       	movw	r24, r28
    35be:	01 96       	adiw	r24, 0x01	; 1
    35c0:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>
    35c4:	11 50       	subi	r17, 0x01	; 1
    35c6:	c1 f7       	brne	.-16     	; 0x35b8 <disk_initialize+0x2c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    35c8:	40 e0       	ldi	r20, 0x00	; 0
    35ca:	50 e0       	ldi	r21, 0x00	; 0
    35cc:	ba 01       	movw	r22, r20
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
    35d4:	81 30       	cpi	r24, 0x01	; 1
    35d6:	09 f0       	breq	.+2      	; 0x35da <disk_initialize+0x4e>
    35d8:	77 c0       	rjmp	.+238    	; 0x36c8 <disk_initialize+0x13c>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    35da:	4a ea       	ldi	r20, 0xAA	; 170
    35dc:	51 e0       	ldi	r21, 0x01	; 1
    35de:	60 e0       	ldi	r22, 0x00	; 0
    35e0:	70 e0       	ldi	r23, 0x00	; 0
    35e2:	88 e0       	ldi	r24, 0x08	; 8
    35e4:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
    35e8:	81 30       	cpi	r24, 0x01	; 1
    35ea:	d9 f5       	brne	.+118    	; 0x3662 <disk_initialize+0xd6>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    35ec:	64 e0       	ldi	r22, 0x04	; 4
    35ee:	70 e0       	ldi	r23, 0x00	; 0
    35f0:	ce 01       	movw	r24, r28
    35f2:	01 96       	adiw	r24, 0x01	; 1
    35f4:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    35f8:	8b 81       	ldd	r24, Y+3	; 0x03
    35fa:	81 30       	cpi	r24, 0x01	; 1
    35fc:	09 f0       	breq	.+2      	; 0x3600 <disk_initialize+0x74>
    35fe:	66 c0       	rjmp	.+204    	; 0x36cc <disk_initialize+0x140>
    3600:	8c 81       	ldd	r24, Y+4	; 0x04
    3602:	8a 3a       	cpi	r24, 0xAA	; 170
    3604:	09 f0       	breq	.+2      	; 0x3608 <disk_initialize+0x7c>
    3606:	64 c0       	rjmp	.+200    	; 0x36d0 <disk_initialize+0x144>
    3608:	08 ee       	ldi	r16, 0xE8	; 232
    360a:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    360c:	40 e0       	ldi	r20, 0x00	; 0
    360e:	50 e0       	ldi	r21, 0x00	; 0
    3610:	60 e0       	ldi	r22, 0x00	; 0
    3612:	70 e4       	ldi	r23, 0x40	; 64
    3614:	89 ea       	ldi	r24, 0xA9	; 169
    3616:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
    361a:	88 23       	and	r24, r24
    361c:	49 f0       	breq	.+18     	; 0x3630 <disk_initialize+0xa4>
					dly_us(1000);
    361e:	88 ee       	ldi	r24, 0xE8	; 232
    3620:	93 e0       	ldi	r25, 0x03	; 3
    3622:	0e 94 fd 18 	call	0x31fa	; 0x31fa <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3626:	01 50       	subi	r16, 0x01	; 1
    3628:	11 09       	sbc	r17, r1
    362a:	81 f7       	brne	.-32     	; 0x360c <disk_initialize+0x80>
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
    362c:	f1 2c       	mov	r15, r1
    362e:	5d c0       	rjmp	.+186    	; 0x36ea <disk_initialize+0x15e>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    3630:	01 2b       	or	r16, r17
    3632:	09 f4       	brne	.+2      	; 0x3636 <disk_initialize+0xaa>
    3634:	4f c0       	rjmp	.+158    	; 0x36d4 <disk_initialize+0x148>
    3636:	40 e0       	ldi	r20, 0x00	; 0
    3638:	50 e0       	ldi	r21, 0x00	; 0
    363a:	ba 01       	movw	r22, r20
    363c:	8a e3       	ldi	r24, 0x3A	; 58
    363e:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
    3642:	81 11       	cpse	r24, r1
    3644:	49 c0       	rjmp	.+146    	; 0x36d8 <disk_initialize+0x14c>
					rcvr_mmc(buf, 4);
    3646:	64 e0       	ldi	r22, 0x04	; 4
    3648:	70 e0       	ldi	r23, 0x00	; 0
    364a:	ce 01       	movw	r24, r28
    364c:	01 96       	adiw	r24, 0x01	; 1
    364e:	0e 94 41 19 	call	0x3282	; 0x3282 <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3652:	89 81       	ldd	r24, Y+1	; 0x01
    3654:	86 ff       	sbrs	r24, 6
    3656:	42 c0       	rjmp	.+132    	; 0x36dc <disk_initialize+0x150>
    3658:	0f 2e       	mov	r0, r31
    365a:	fc e0       	ldi	r31, 0x0C	; 12
    365c:	ff 2e       	mov	r15, r31
    365e:	f0 2d       	mov	r31, r0
    3660:	44 c0       	rjmp	.+136    	; 0x36ea <disk_initialize+0x15e>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    3662:	40 e0       	ldi	r20, 0x00	; 0
    3664:	50 e0       	ldi	r21, 0x00	; 0
    3666:	ba 01       	movw	r22, r20
    3668:	89 ea       	ldi	r24, 0xA9	; 169
    366a:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
    366e:	82 30       	cpi	r24, 0x02	; 2
    3670:	40 f4       	brcc	.+16     	; 0x3682 <disk_initialize+0xf6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    3672:	0f 2e       	mov	r0, r31
    3674:	f9 ea       	ldi	r31, 0xA9	; 169
    3676:	ef 2e       	mov	r14, r31
    3678:	f0 2d       	mov	r31, r0
    367a:	68 94       	set
    367c:	ff 24       	eor	r15, r15
    367e:	f1 f8       	bld	r15, 1
    3680:	04 c0       	rjmp	.+8      	; 0x368a <disk_initialize+0xfe>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    3682:	ee 24       	eor	r14, r14
    3684:	e3 94       	inc	r14
    3686:	ff 24       	eor	r15, r15
    3688:	f3 94       	inc	r15
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    368a:	08 ee       	ldi	r16, 0xE8	; 232
    368c:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
    368e:	40 e0       	ldi	r20, 0x00	; 0
    3690:	50 e0       	ldi	r21, 0x00	; 0
    3692:	ba 01       	movw	r22, r20
    3694:	8e 2d       	mov	r24, r14
    3696:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
    369a:	88 23       	and	r24, r24
    369c:	49 f0       	breq	.+18     	; 0x36b0 <disk_initialize+0x124>
				dly_us(1000);
    369e:	88 ee       	ldi	r24, 0xE8	; 232
    36a0:	93 e0       	ldi	r25, 0x03	; 3
    36a2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    36a6:	01 50       	subi	r16, 0x01	; 1
    36a8:	11 09       	sbc	r17, r1
    36aa:	89 f7       	brne	.-30     	; 0x368e <disk_initialize+0x102>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    36ac:	f1 2c       	mov	r15, r1
    36ae:	1d c0       	rjmp	.+58     	; 0x36ea <disk_initialize+0x15e>
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    36b0:	01 2b       	or	r16, r17
    36b2:	c1 f0       	breq	.+48     	; 0x36e4 <disk_initialize+0x158>
    36b4:	40 e0       	ldi	r20, 0x00	; 0
    36b6:	52 e0       	ldi	r21, 0x02	; 2
    36b8:	60 e0       	ldi	r22, 0x00	; 0
    36ba:	70 e0       	ldi	r23, 0x00	; 0
    36bc:	80 e1       	ldi	r24, 0x10	; 16
    36be:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
    36c2:	81 11       	cpse	r24, r1
    36c4:	11 c0       	rjmp	.+34     	; 0x36e8 <disk_initialize+0x15c>
    36c6:	11 c0       	rjmp	.+34     	; 0x36ea <disk_initialize+0x15e>
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
    36c8:	f1 2c       	mov	r15, r1
    36ca:	0f c0       	rjmp	.+30     	; 0x36ea <disk_initialize+0x15e>
    36cc:	f1 2c       	mov	r15, r1
    36ce:	0d c0       	rjmp	.+26     	; 0x36ea <disk_initialize+0x15e>
    36d0:	f1 2c       	mov	r15, r1
    36d2:	0b c0       	rjmp	.+22     	; 0x36ea <disk_initialize+0x15e>
    36d4:	f1 2c       	mov	r15, r1
    36d6:	09 c0       	rjmp	.+18     	; 0x36ea <disk_initialize+0x15e>
    36d8:	f1 2c       	mov	r15, r1
    36da:	07 c0       	rjmp	.+14     	; 0x36ea <disk_initialize+0x15e>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    36dc:	68 94       	set
    36de:	ff 24       	eor	r15, r15
    36e0:	f2 f8       	bld	r15, 2
    36e2:	03 c0       	rjmp	.+6      	; 0x36ea <disk_initialize+0x15e>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    36e4:	f1 2c       	mov	r15, r1
    36e6:	01 c0       	rjmp	.+2      	; 0x36ea <disk_initialize+0x15e>
    36e8:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
    36ea:	f0 92 7c 02 	sts	0x027C, r15
	s = ty ? 0 : STA_NOINIT;
    36ee:	11 e0       	ldi	r17, 0x01	; 1
    36f0:	f1 10       	cpse	r15, r1
    36f2:	10 e0       	ldi	r17, 0x00	; 0
	Stat = s;
    36f4:	10 93 00 01 	sts	0x0100, r17

	deselect();
    36f8:	0e 94 9a 19 	call	0x3334	; 0x3334 <deselect>
    36fc:	01 c0       	rjmp	.+2      	; 0x3700 <disk_initialize+0x174>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    36fe:	13 e0       	ldi	r17, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
    3700:	81 2f       	mov	r24, r17
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	0f 90       	pop	r0
    3708:	0f 90       	pop	r0
    370a:	df 91       	pop	r29
    370c:	cf 91       	pop	r28
    370e:	1f 91       	pop	r17
    3710:	0f 91       	pop	r16
    3712:	ff 90       	pop	r15
    3714:	ef 90       	pop	r14
    3716:	08 95       	ret

00003718 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3718:	bf 92       	push	r11
    371a:	cf 92       	push	r12
    371c:	df 92       	push	r13
    371e:	ef 92       	push	r14
    3720:	ff 92       	push	r15
    3722:	0f 93       	push	r16
    3724:	1f 93       	push	r17
    3726:	cf 93       	push	r28
    3728:	df 93       	push	r29
    372a:	eb 01       	movw	r28, r22
    372c:	69 01       	movw	r12, r18
    372e:	7a 01       	movw	r14, r20
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3730:	0e 94 bf 1a 	call	0x357e	; 0x357e <disk_status>
    3734:	80 fd       	sbrc	r24, 0
    3736:	3b c0       	rjmp	.+118    	; 0x37ae <disk_read+0x96>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    3738:	80 91 7c 02 	lds	r24, 0x027C
    373c:	83 fd       	sbrc	r24, 3
    373e:	09 c0       	rjmp	.+18     	; 0x3752 <disk_read+0x3a>
    3740:	0b 2e       	mov	r0, r27
    3742:	b9 e0       	ldi	r27, 0x09	; 9
    3744:	cc 0c       	add	r12, r12
    3746:	dd 1c       	adc	r13, r13
    3748:	ee 1c       	adc	r14, r14
    374a:	ff 1c       	adc	r15, r15
    374c:	ba 95       	dec	r27
    374e:	d1 f7       	brne	.-12     	; 0x3744 <disk_read+0x2c>
    3750:	b0 2d       	mov	r27, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    3752:	02 30       	cpi	r16, 0x02	; 2
    3754:	11 05       	cpc	r17, r1
    3756:	28 f0       	brcs	.+10     	; 0x3762 <disk_read+0x4a>
    3758:	0f 2e       	mov	r0, r31
    375a:	f2 e1       	ldi	r31, 0x12	; 18
    375c:	bf 2e       	mov	r11, r31
    375e:	f0 2d       	mov	r31, r0
    3760:	04 c0       	rjmp	.+8      	; 0x376a <disk_read+0x52>
    3762:	0f 2e       	mov	r0, r31
    3764:	f1 e1       	ldi	r31, 0x11	; 17
    3766:	bf 2e       	mov	r11, r31
    3768:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    376a:	b7 01       	movw	r22, r14
    376c:	a6 01       	movw	r20, r12
    376e:	8b 2d       	mov	r24, r11
    3770:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
    3774:	81 11       	cpse	r24, r1
    3776:	14 c0       	rjmp	.+40     	; 0x37a0 <disk_read+0x88>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    3778:	60 e0       	ldi	r22, 0x00	; 0
    377a:	72 e0       	ldi	r23, 0x02	; 2
    377c:	ce 01       	movw	r24, r28
    377e:	0e 94 c7 19 	call	0x338e	; 0x338e <rcvr_datablock>
    3782:	89 2b       	or	r24, r25
    3784:	21 f0       	breq	.+8      	; 0x378e <disk_read+0x76>
			buff += 512;
    3786:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    3788:	01 50       	subi	r16, 0x01	; 1
    378a:	11 09       	sbc	r17, r1
    378c:	a9 f7       	brne	.-22     	; 0x3778 <disk_read+0x60>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    378e:	82 e1       	ldi	r24, 0x12	; 18
    3790:	b8 12       	cpse	r11, r24
    3792:	06 c0       	rjmp	.+12     	; 0x37a0 <disk_read+0x88>
    3794:	40 e0       	ldi	r20, 0x00	; 0
    3796:	50 e0       	ldi	r21, 0x00	; 0
    3798:	ba 01       	movw	r22, r20
    379a:	8c e0       	ldi	r24, 0x0C	; 12
    379c:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
	}
	deselect();
    37a0:	0e 94 9a 19 	call	0x3334	; 0x3334 <deselect>

	return count ? RES_ERROR : RES_OK;
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	01 2b       	or	r16, r17
    37a8:	19 f4       	brne	.+6      	; 0x37b0 <disk_read+0x98>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	01 c0       	rjmp	.+2      	; 0x37b0 <disk_read+0x98>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    37ae:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	1f 91       	pop	r17
    37b6:	0f 91       	pop	r16
    37b8:	ff 90       	pop	r15
    37ba:	ef 90       	pop	r14
    37bc:	df 90       	pop	r13
    37be:	cf 90       	pop	r12
    37c0:	bf 90       	pop	r11
    37c2:	08 95       	ret

000037c4 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    37c4:	cf 92       	push	r12
    37c6:	df 92       	push	r13
    37c8:	ef 92       	push	r14
    37ca:	ff 92       	push	r15
    37cc:	0f 93       	push	r16
    37ce:	1f 93       	push	r17
    37d0:	cf 93       	push	r28
    37d2:	df 93       	push	r29
    37d4:	eb 01       	movw	r28, r22
    37d6:	69 01       	movw	r12, r18
    37d8:	7a 01       	movw	r14, r20
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    37da:	0e 94 bf 1a 	call	0x357e	; 0x357e <disk_status>
    37de:	80 fd       	sbrc	r24, 0
    37e0:	4b c0       	rjmp	.+150    	; 0x3878 <disk_write+0xb4>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    37e2:	80 91 7c 02 	lds	r24, 0x027C
    37e6:	83 fd       	sbrc	r24, 3
    37e8:	09 c0       	rjmp	.+18     	; 0x37fc <disk_write+0x38>
    37ea:	0b 2e       	mov	r0, r27
    37ec:	b9 e0       	ldi	r27, 0x09	; 9
    37ee:	cc 0c       	add	r12, r12
    37f0:	dd 1c       	adc	r13, r13
    37f2:	ee 1c       	adc	r14, r14
    37f4:	ff 1c       	adc	r15, r15
    37f6:	ba 95       	dec	r27
    37f8:	d1 f7       	brne	.-12     	; 0x37ee <disk_write+0x2a>
    37fa:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    37fc:	01 30       	cpi	r16, 0x01	; 1
    37fe:	11 05       	cpc	r17, r1
    3800:	91 f4       	brne	.+36     	; 0x3826 <disk_write+0x62>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    3802:	b7 01       	movw	r22, r14
    3804:	a6 01       	movw	r20, r12
    3806:	88 e1       	ldi	r24, 0x18	; 24
    3808:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
    380c:	81 11       	cpse	r24, r1
    380e:	2d c0       	rjmp	.+90     	; 0x386a <disk_write+0xa6>
			&& xmit_datablock(buff, 0xFE))
    3810:	6e ef       	ldi	r22, 0xFE	; 254
    3812:	ce 01       	movw	r24, r28
    3814:	0e 94 05 1a 	call	0x340a	; 0x340a <xmit_datablock>
    3818:	01 e0       	ldi	r16, 0x01	; 1
    381a:	10 e0       	ldi	r17, 0x00	; 0
    381c:	89 2b       	or	r24, r25
    381e:	29 f1       	breq	.+74     	; 0x386a <disk_write+0xa6>
    3820:	00 e0       	ldi	r16, 0x00	; 0
    3822:	10 e0       	ldi	r17, 0x00	; 0
    3824:	22 c0       	rjmp	.+68     	; 0x386a <disk_write+0xa6>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    3826:	86 70       	andi	r24, 0x06	; 6
    3828:	31 f0       	breq	.+12     	; 0x3836 <disk_write+0x72>
    382a:	a8 01       	movw	r20, r16
    382c:	60 e0       	ldi	r22, 0x00	; 0
    382e:	70 e0       	ldi	r23, 0x00	; 0
    3830:	87 e9       	ldi	r24, 0x97	; 151
    3832:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    3836:	b7 01       	movw	r22, r14
    3838:	a6 01       	movw	r20, r12
    383a:	89 e1       	ldi	r24, 0x19	; 25
    383c:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
    3840:	81 11       	cpse	r24, r1
    3842:	13 c0       	rjmp	.+38     	; 0x386a <disk_write+0xa6>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    3844:	6c ef       	ldi	r22, 0xFC	; 252
    3846:	ce 01       	movw	r24, r28
    3848:	0e 94 05 1a 	call	0x340a	; 0x340a <xmit_datablock>
    384c:	89 2b       	or	r24, r25
    384e:	21 f0       	breq	.+8      	; 0x3858 <disk_write+0x94>
				buff += 512;
    3850:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    3852:	01 50       	subi	r16, 0x01	; 1
    3854:	11 09       	sbc	r17, r1
    3856:	b1 f7       	brne	.-20     	; 0x3844 <disk_write+0x80>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    3858:	6d ef       	ldi	r22, 0xFD	; 253
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	0e 94 05 1a 	call	0x340a	; 0x340a <xmit_datablock>
    3862:	89 2b       	or	r24, r25
    3864:	11 f4       	brne	.+4      	; 0x386a <disk_write+0xa6>
				count = 1;
    3866:	01 e0       	ldi	r16, 0x01	; 1
    3868:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    386a:	0e 94 9a 19 	call	0x3334	; 0x3334 <deselect>

	return count ? RES_ERROR : RES_OK;
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	01 2b       	or	r16, r17
    3872:	19 f4       	brne	.+6      	; 0x387a <disk_write+0xb6>
    3874:	80 e0       	ldi	r24, 0x00	; 0
    3876:	01 c0       	rjmp	.+2      	; 0x387a <disk_write+0xb6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3878:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    387a:	df 91       	pop	r29
    387c:	cf 91       	pop	r28
    387e:	1f 91       	pop	r17
    3880:	0f 91       	pop	r16
    3882:	ff 90       	pop	r15
    3884:	ef 90       	pop	r14
    3886:	df 90       	pop	r13
    3888:	cf 90       	pop	r12
    388a:	08 95       	ret

0000388c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    388c:	cf 92       	push	r12
    388e:	df 92       	push	r13
    3890:	ef 92       	push	r14
    3892:	ff 92       	push	r15
    3894:	0f 93       	push	r16
    3896:	1f 93       	push	r17
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	60 97       	sbiw	r28, 0x10	; 16
    38a2:	0f b6       	in	r0, 0x3f	; 63
    38a4:	f8 94       	cli
    38a6:	de bf       	out	0x3e, r29	; 62
    38a8:	0f be       	out	0x3f, r0	; 63
    38aa:	cd bf       	out	0x3d, r28	; 61
    38ac:	f6 2e       	mov	r15, r22
    38ae:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    38b0:	0e 94 bf 1a 	call	0x357e	; 0x357e <disk_status>
    38b4:	80 fd       	sbrc	r24, 0
    38b6:	9a c0       	rjmp	.+308    	; 0x39ec <disk_ioctl+0x160>

	res = RES_ERROR;
	switch (ctrl) {
    38b8:	cc 24       	eor	r12, r12
    38ba:	c3 94       	inc	r12
    38bc:	fc 14       	cp	r15, r12
    38be:	89 f0       	breq	.+34     	; 0x38e2 <disk_ioctl+0x56>
    38c0:	fc 14       	cp	r15, r12
    38c2:	38 f0       	brcs	.+14     	; 0x38d2 <disk_ioctl+0x46>
    38c4:	0f 2e       	mov	r0, r31
    38c6:	f3 e0       	ldi	r31, 0x03	; 3
    38c8:	df 2e       	mov	r13, r31
    38ca:	f0 2d       	mov	r31, r0
    38cc:	fd 10       	cpse	r15, r13
    38ce:	86 c0       	rjmp	.+268    	; 0x39dc <disk_ioctl+0x150>
    38d0:	7a c0       	rjmp	.+244    	; 0x39c6 <disk_ioctl+0x13a>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    38d2:	0e 94 aa 19 	call	0x3354	; 0x3354 <select>
    38d6:	11 e0       	ldi	r17, 0x01	; 1
    38d8:	89 2b       	or	r24, r25
    38da:	09 f4       	brne	.+2      	; 0x38de <disk_ioctl+0x52>
    38dc:	84 c0       	rjmp	.+264    	; 0x39e6 <disk_ioctl+0x15a>
    38de:	10 e0       	ldi	r17, 0x00	; 0
    38e0:	82 c0       	rjmp	.+260    	; 0x39e6 <disk_ioctl+0x15a>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    38e2:	40 e0       	ldi	r20, 0x00	; 0
    38e4:	50 e0       	ldi	r21, 0x00	; 0
    38e6:	ba 01       	movw	r22, r20
    38e8:	89 e0       	ldi	r24, 0x09	; 9
    38ea:	0e 94 46 1a 	call	0x348c	; 0x348c <send_cmd>
    38ee:	81 11       	cpse	r24, r1
    38f0:	77 c0       	rjmp	.+238    	; 0x39e0 <disk_ioctl+0x154>
    38f2:	60 e1       	ldi	r22, 0x10	; 16
    38f4:	70 e0       	ldi	r23, 0x00	; 0
    38f6:	ce 01       	movw	r24, r28
    38f8:	01 96       	adiw	r24, 0x01	; 1
    38fa:	0e 94 c7 19 	call	0x338e	; 0x338e <rcvr_datablock>
    38fe:	89 2b       	or	r24, r25
    3900:	09 f4       	brne	.+2      	; 0x3904 <disk_ioctl+0x78>
    3902:	70 c0       	rjmp	.+224    	; 0x39e4 <disk_ioctl+0x158>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    3904:	89 81       	ldd	r24, Y+1	; 0x01
    3906:	82 95       	swap	r24
    3908:	86 95       	lsr	r24
    390a:	86 95       	lsr	r24
    390c:	83 70       	andi	r24, 0x03	; 3
    390e:	81 30       	cpi	r24, 0x01	; 1
    3910:	21 f5       	brne	.+72     	; 0x395a <disk_ioctl+0xce>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    3912:	88 85       	ldd	r24, Y+8	; 0x08
    3914:	8f 73       	andi	r24, 0x3F	; 63
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	a0 e0       	ldi	r26, 0x00	; 0
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	dc 01       	movw	r26, r24
    391e:	99 27       	eor	r25, r25
    3920:	88 27       	eor	r24, r24
    3922:	01 96       	adiw	r24, 0x01	; 1
    3924:	a1 1d       	adc	r26, r1
    3926:	b1 1d       	adc	r27, r1
    3928:	39 85       	ldd	r19, Y+9	; 0x09
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	4a 85       	ldd	r20, Y+10	; 0x0a
    392e:	24 0f       	add	r18, r20
    3930:	31 1d       	adc	r19, r1
    3932:	82 0f       	add	r24, r18
    3934:	93 1f       	adc	r25, r19
    3936:	a1 1d       	adc	r26, r1
    3938:	b1 1d       	adc	r27, r1
					*(DWORD*)buff = cs << 10;
    393a:	07 2e       	mov	r0, r23
    393c:	7a e0       	ldi	r23, 0x0A	; 10
    393e:	88 0f       	add	r24, r24
    3940:	99 1f       	adc	r25, r25
    3942:	aa 1f       	adc	r26, r26
    3944:	bb 1f       	adc	r27, r27
    3946:	7a 95       	dec	r23
    3948:	d1 f7       	brne	.-12     	; 0x393e <disk_ioctl+0xb2>
    394a:	70 2d       	mov	r23, r0
    394c:	f8 01       	movw	r30, r16
    394e:	80 83       	st	Z, r24
    3950:	91 83       	std	Z+1, r25	; 0x01
    3952:	a2 83       	std	Z+2, r26	; 0x02
    3954:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
				}
				res = RES_OK;
    3956:	10 e0       	ldi	r17, 0x00	; 0
    3958:	46 c0       	rjmp	.+140    	; 0x39e6 <disk_ioctl+0x15a>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    395a:	49 85       	ldd	r20, Y+9	; 0x09
    395c:	42 95       	swap	r20
    395e:	46 95       	lsr	r20
    3960:	46 95       	lsr	r20
    3962:	43 70       	andi	r20, 0x03	; 3
    3964:	88 85       	ldd	r24, Y+8	; 0x08
    3966:	50 e0       	ldi	r21, 0x00	; 0
    3968:	f4 e0       	ldi	r31, 0x04	; 4
    396a:	8f 9f       	mul	r24, r31
    396c:	40 0d       	add	r20, r0
    396e:	51 1d       	adc	r21, r1
    3970:	11 24       	eor	r1, r1
    3972:	4f 5f       	subi	r20, 0xFF	; 255
    3974:	5f 4f       	sbci	r21, 0xFF	; 255
    3976:	2f 81       	ldd	r18, Y+7	; 0x07
    3978:	23 70       	andi	r18, 0x03	; 3
    397a:	92 2f       	mov	r25, r18
    397c:	99 0f       	add	r25, r25
    397e:	99 0f       	add	r25, r25
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	48 0f       	add	r20, r24
    3984:	59 1f       	adc	r21, r25
    3986:	60 e0       	ldi	r22, 0x00	; 0
    3988:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    398a:	9e 81       	ldd	r25, Y+6	; 0x06
    398c:	9f 70       	andi	r25, 0x0F	; 15
    398e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3990:	88 1f       	adc	r24, r24
    3992:	88 27       	eor	r24, r24
    3994:	88 1f       	adc	r24, r24
    3996:	98 0f       	add	r25, r24
    3998:	9e 5f       	subi	r25, 0xFE	; 254
    399a:	8a 85       	ldd	r24, Y+10	; 0x0a
    399c:	83 70       	andi	r24, 0x03	; 3
    399e:	88 0f       	add	r24, r24
    39a0:	89 0f       	add	r24, r25
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	09 97       	sbiw	r24, 0x09	; 9
    39a6:	6a 01       	movw	r12, r20
    39a8:	7b 01       	movw	r14, r22
    39aa:	04 c0       	rjmp	.+8      	; 0x39b4 <disk_ioctl+0x128>
    39ac:	cc 0c       	add	r12, r12
    39ae:	dd 1c       	adc	r13, r13
    39b0:	ee 1c       	adc	r14, r14
    39b2:	ff 1c       	adc	r15, r15
    39b4:	8a 95       	dec	r24
    39b6:	d2 f7       	brpl	.-12     	; 0x39ac <disk_ioctl+0x120>
    39b8:	f8 01       	movw	r30, r16
    39ba:	c0 82       	st	Z, r12
    39bc:	d1 82       	std	Z+1, r13	; 0x01
    39be:	e2 82       	std	Z+2, r14	; 0x02
    39c0:	f3 82       	std	Z+3, r15	; 0x03
				}
				res = RES_OK;
    39c2:	10 e0       	ldi	r17, 0x00	; 0
    39c4:	10 c0       	rjmp	.+32     	; 0x39e6 <disk_ioctl+0x15a>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
    39c6:	80 e8       	ldi	r24, 0x80	; 128
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	a0 e0       	ldi	r26, 0x00	; 0
    39cc:	b0 e0       	ldi	r27, 0x00	; 0
    39ce:	f8 01       	movw	r30, r16
    39d0:	80 83       	st	Z, r24
    39d2:	91 83       	std	Z+1, r25	; 0x01
    39d4:	a2 83       	std	Z+2, r26	; 0x02
    39d6:	b3 83       	std	Z+3, r27	; 0x03
			res = RES_OK;
    39d8:	10 e0       	ldi	r17, 0x00	; 0
			break;
    39da:	05 c0       	rjmp	.+10     	; 0x39e6 <disk_ioctl+0x15a>

		default:
			res = RES_PARERR;
    39dc:	14 e0       	ldi	r17, 0x04	; 4
    39de:	03 c0       	rjmp	.+6      	; 0x39e6 <disk_ioctl+0x15a>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    39e0:	11 e0       	ldi	r17, 0x01	; 1
    39e2:	01 c0       	rjmp	.+2      	; 0x39e6 <disk_ioctl+0x15a>
    39e4:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
    39e6:	0e 94 9a 19 	call	0x3334	; 0x3334 <deselect>
    39ea:	01 c0       	rjmp	.+2      	; 0x39ee <disk_ioctl+0x162>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    39ec:	13 e0       	ldi	r17, 0x03	; 3
	}

	deselect();

	return res;
}
    39ee:	81 2f       	mov	r24, r17
    39f0:	60 96       	adiw	r28, 0x10	; 16
    39f2:	0f b6       	in	r0, 0x3f	; 63
    39f4:	f8 94       	cli
    39f6:	de bf       	out	0x3e, r29	; 62
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	cd bf       	out	0x3d, r28	; 61
    39fc:	df 91       	pop	r29
    39fe:	cf 91       	pop	r28
    3a00:	1f 91       	pop	r17
    3a02:	0f 91       	pop	r16
    3a04:	ff 90       	pop	r15
    3a06:	ef 90       	pop	r14
    3a08:	df 90       	pop	r13
    3a0a:	cf 90       	pop	r12
    3a0c:	08 95       	ret

00003a0e <main>:
char pLongSD[20];

char pDistance[20];

int main (void)
{
    3a0e:	cf 93       	push	r28
    3a10:	df 93       	push	r29
    3a12:	00 d0       	rcall	.+0      	; 0x3a14 <main+0x6>
    3a14:	cd b7       	in	r28, 0x3d	; 61
    3a16:	de b7       	in	r29, 0x3e	; 62
    3a18:	2f ef       	ldi	r18, 0xFF	; 255
    3a1a:	8f e7       	ldi	r24, 0x7F	; 127
    3a1c:	93 e4       	ldi	r25, 0x43	; 67
    3a1e:	21 50       	subi	r18, 0x01	; 1
    3a20:	80 40       	sbci	r24, 0x00	; 0
    3a22:	90 40       	sbci	r25, 0x00	; 0
    3a24:	e1 f7       	brne	.-8      	; 0x3a1e <main+0x10>
    3a26:	00 c0       	rjmp	.+0      	; 0x3a28 <main+0x1a>
    3a28:	00 00       	nop
	_delay_ms(3000);
	
	sei();
    3a2a:	78 94       	sei
	
	int i, j, cur_pos_lat, cur_pos_lon, write_pos=0;

	UINT bw;
	DDRC |= 0xFF;
    3a2c:	87 b1       	in	r24, 0x07	; 7
    3a2e:	8f ef       	ldi	r24, 0xFF	; 255
    3a30:	87 b9       	out	0x07, r24	; 7

	//Hardware initialisation 
	gps_init(FREQUENCY, MESSAGES);
    3a32:	60 e1       	ldi	r22, 0x10	; 16
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <gps_init>

	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    3a3a:	8f e0       	ldi	r24, 0x0F	; 15
    3a3c:	0e 94 c7 18 	call	0x318e	; 0x318e <lcd_init>
    3a40:	ef ef       	ldi	r30, 0xFF	; 255
    3a42:	ff e7       	ldi	r31, 0x7F	; 127
    3a44:	26 e1       	ldi	r18, 0x16	; 22
    3a46:	e1 50       	subi	r30, 0x01	; 1
    3a48:	f0 40       	sbci	r31, 0x00	; 0
    3a4a:	20 40       	sbci	r18, 0x00	; 0
    3a4c:	e1 f7       	brne	.-8      	; 0x3a46 <main+0x38>
    3a4e:	00 c0       	rjmp	.+0      	; 0x3a50 <main+0x42>
    3a50:	00 00       	nop
	
	_delay_ms(1000);

	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    3a52:	40 e0       	ldi	r20, 0x00	; 0
    3a54:	67 ed       	ldi	r22, 0xD7	; 215
    3a56:	71 e0       	ldi	r23, 0x01	; 1
    3a58:	85 e3       	ldi	r24, 0x35	; 53
    3a5a:	93 e0       	ldi	r25, 0x03	; 3
    3a5c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <f_mount>

	if (f_open(&Fil, "IN.txt", FA_READ | FA_OPEN_EXISTING) == FR_OK) {	/* Read the file from SD */
    3a60:	41 e0       	ldi	r20, 0x01	; 1
    3a62:	6c e4       	ldi	r22, 0x4C	; 76
    3a64:	71 e0       	ldi	r23, 0x01	; 1
    3a66:	8b e3       	ldi	r24, 0x3B	; 59
    3a68:	96 e0       	ldi	r25, 0x06	; 6
    3a6a:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <f_open>
    3a6e:	81 11       	cpse	r24, r1
    3a70:	16 c0       	rjmp	.+44     	; 0x3a9e <main+0x90>
			
			f_read(&Fil, sdbuff, 28, &bw);
    3a72:	9e 01       	movw	r18, r28
    3a74:	2f 5f       	subi	r18, 0xFF	; 255
    3a76:	3f 4f       	sbci	r19, 0xFF	; 255
    3a78:	4c e1       	ldi	r20, 0x1C	; 28
    3a7a:	50 e0       	ldi	r21, 0x00	; 0
    3a7c:	63 e6       	ldi	r22, 0x63	; 99
    3a7e:	75 e0       	ldi	r23, 0x05	; 5
    3a80:	8b e3       	ldi	r24, 0x3B	; 59
    3a82:	96 e0       	ldi	r25, 0x06	; 6
    3a84:	0e 94 4f 10 	call	0x209e	; 0x209e <f_read>
			
			f_close(&Fil);
    3a88:	8b e3       	ldi	r24, 0x3B	; 59
    3a8a:	96 e0       	ldi	r25, 0x06	; 6
    3a8c:	0e 94 33 14 	call	0x2866	; 0x2866 <f_close>
			
			if(bw == 28){
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
    3a92:	9a 81       	ldd	r25, Y+2	; 0x02
    3a94:	4c 97       	sbiw	r24, 0x1c	; 28
    3a96:	19 f4       	brne	.+6      	; 0x3a9e <main+0x90>
				PORTC |= 0xFF;
    3a98:	88 b1       	in	r24, 0x08	; 8
    3a9a:	8f ef       	ldi	r24, 0xFF	; 255
    3a9c:	88 b9       	out	0x08, r24	; 8
			}
		}

	/* Disable unwanted module */
	PRR0 |= (1<<PRTWI) | (1<<PRTIM0) | (1<<PRTIM2) | (1<<PRTIM1) | (1<<PRADC);
    3a9e:	e4 e6       	ldi	r30, 0x64	; 100
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	80 81       	ld	r24, Z
    3aa4:	89 6e       	ori	r24, 0xE9	; 233
    3aa6:	80 83       	st	Z, r24

	lcd_clrscr();
    3aa8:	0e 94 91 18 	call	0x3122	; 0x3122 <lcd_clrscr>
    lcd_home();
    3aac:	0e 94 95 18 	call	0x312a	; 0x312a <lcd_home>
    lcd_puts("GPS Logger Project");
    3ab0:	83 e5       	ldi	r24, 0x53	; 83
    3ab2:	91 e0       	ldi	r25, 0x01	; 1
    3ab4:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    lcd_gotoxy(0,1);
    3ab8:	61 e0       	ldi	r22, 0x01	; 1
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
    lcd_puts("By Hidayat and Manu");
    3ac0:	86 e6       	ldi	r24, 0x66	; 102
    3ac2:	91 e0       	ldi	r25, 0x01	; 1
    3ac4:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    lcd_gotoxy(0,2);
    3ac8:	62 e0       	ldi	r22, 0x02	; 2
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
    lcd_puts("Comp Eng HTW Berlin");
    3ad0:	8a e7       	ldi	r24, 0x7A	; 122
    3ad2:	91 e0       	ldi	r25, 0x01	; 1
    3ad4:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    3ad8:	8f ef       	ldi	r24, 0xFF	; 255
    3ada:	9f e3       	ldi	r25, 0x3F	; 63
    3adc:	e5 e6       	ldi	r30, 0x65	; 101
    3ade:	81 50       	subi	r24, 0x01	; 1
    3ae0:	90 40       	sbci	r25, 0x00	; 0
    3ae2:	e0 40       	sbci	r30, 0x00	; 0
    3ae4:	e1 f7       	brne	.-8      	; 0x3ade <main+0xd0>
    3ae6:	00 c0       	rjmp	.+0      	; 0x3ae8 <main+0xda>
    3ae8:	00 00       	nop
    _delay_ms(4500);
	
    lcd_clrscr();
    3aea:	0e 94 91 18 	call	0x3122	; 0x3122 <lcd_clrscr>
    lcd_home();
    3aee:	0e 94 95 18 	call	0x312a	; 0x312a <lcd_home>
    lcd_puts("Reading from SD.");
    3af2:	8e e8       	ldi	r24, 0x8E	; 142
    3af4:	91 e0       	ldi	r25, 0x01	; 1
    3af6:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    3afa:	ff ef       	ldi	r31, 0xFF	; 255
    3afc:	2f e7       	ldi	r18, 0x7F	; 127
    3afe:	86 e1       	ldi	r24, 0x16	; 22
    3b00:	f1 50       	subi	r31, 0x01	; 1
    3b02:	20 40       	sbci	r18, 0x00	; 0
    3b04:	80 40       	sbci	r24, 0x00	; 0
    3b06:	e1 f7       	brne	.-8      	; 0x3b00 <main+0xf2>
    3b08:	00 c0       	rjmp	.+0      	; 0x3b0a <main+0xfc>
    3b0a:	00 00       	nop
    _delay_ms(1000);
    lcd_home();
    3b0c:	0e 94 95 18 	call	0x312a	; 0x312a <lcd_home>
    lcd_puts("Reading from SD..");
    3b10:	8f e9       	ldi	r24, 0x9F	; 159
    3b12:	91 e0       	ldi	r25, 0x01	; 1
    3b14:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    3b18:	9f ef       	ldi	r25, 0xFF	; 255
    3b1a:	ef e7       	ldi	r30, 0x7F	; 127
    3b1c:	f6 e1       	ldi	r31, 0x16	; 22
    3b1e:	91 50       	subi	r25, 0x01	; 1
    3b20:	e0 40       	sbci	r30, 0x00	; 0
    3b22:	f0 40       	sbci	r31, 0x00	; 0
    3b24:	e1 f7       	brne	.-8      	; 0x3b1e <main+0x110>
    3b26:	00 c0       	rjmp	.+0      	; 0x3b28 <main+0x11a>
    3b28:	00 00       	nop
    _delay_ms(1000);
    lcd_home();
    3b2a:	0e 94 95 18 	call	0x312a	; 0x312a <lcd_home>
    lcd_puts("Reading from SD...");
    3b2e:	81 eb       	ldi	r24, 0xB1	; 177
    3b30:	91 e0       	ldi	r25, 0x01	; 1
    3b32:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    3b36:	2f ef       	ldi	r18, 0xFF	; 255
    3b38:	8f e7       	ldi	r24, 0x7F	; 127
    3b3a:	96 e1       	ldi	r25, 0x16	; 22
    3b3c:	21 50       	subi	r18, 0x01	; 1
    3b3e:	80 40       	sbci	r24, 0x00	; 0
    3b40:	90 40       	sbci	r25, 0x00	; 0
    3b42:	e1 f7       	brne	.-8      	; 0x3b3c <main+0x12e>
    3b44:	00 c0       	rjmp	.+0      	; 0x3b46 <main+0x138>
    3b46:	00 00       	nop
    _delay_ms(1000);
    lcd_home();
    3b48:	0e 94 95 18 	call	0x312a	; 0x312a <lcd_home>
    lcd_puts("Reading from SD....");
    3b4c:	84 ec       	ldi	r24, 0xC4	; 196
    3b4e:	91 e0       	ldi	r25, 0x01	; 1
    3b50:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    3b54:	ef ef       	ldi	r30, 0xFF	; 255
    3b56:	ff e7       	ldi	r31, 0x7F	; 127
    3b58:	26 e1       	ldi	r18, 0x16	; 22
    3b5a:	e1 50       	subi	r30, 0x01	; 1
    3b5c:	f0 40       	sbci	r31, 0x00	; 0
    3b5e:	20 40       	sbci	r18, 0x00	; 0
    3b60:	e1 f7       	brne	.-8      	; 0x3b5a <main+0x14c>
    3b62:	00 c0       	rjmp	.+0      	; 0x3b64 <main+0x156>
    3b64:	00 00       	nop
    _delay_ms(1000);
	
	lcd_clrscr();
    3b66:	0e 94 91 18 	call	0x3122	; 0x3122 <lcd_clrscr>
	lcd_home();
    3b6a:	0e 94 95 18 	call	0x312a	; 0x312a <lcd_home>
    lcd_puts("Dest coor from SD");
    3b6e:	88 ed       	ldi	r24, 0xD8	; 216
    3b70:	91 e0       	ldi	r25, 0x01	; 1
    3b72:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    lcd_gotoxy(0,1);
    3b76:	61 e0       	ldi	r22, 0x01	; 1
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
    lcd_puts("Lat:");
    3b7e:	8a ee       	ldi	r24, 0xEA	; 234
    3b80:	91 e0       	ldi	r25, 0x01	; 1
    3b82:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    lcd_gotoxy(0,2);
    3b86:	62 e0       	ldi	r22, 0x02	; 2
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
    lcd_puts("Lon:");
    3b8e:	8f ee       	ldi	r24, 0xEF	; 239
    3b90:	91 e0       	ldi	r25, 0x01	; 1
    3b92:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    3b96:	0a e6       	ldi	r16, 0x6A	; 106
    3b98:	15 e0       	ldi	r17, 0x05	; 5
    3b9a:	68 94       	set
    3b9c:	ff 24       	eor	r15, r15
    3b9e:	f2 f8       	bld	r15, 2

    for(i=7,cur_pos_lat=4;i<17;i++){
    lcd_gotoxy(cur_pos_lat,1);
    3ba0:	61 e0       	ldi	r22, 0x01	; 1
    3ba2:	8f 2d       	mov	r24, r15
    3ba4:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
    lcd_putc(sdbuff[i]);
    3ba8:	f8 01       	movw	r30, r16
    3baa:	81 91       	ld	r24, Z+
    3bac:	8f 01       	movw	r16, r30
    3bae:	0e 94 99 18 	call	0x3132	; 0x3132 <lcd_putc>
    3bb2:	f3 94       	inc	r15
    lcd_gotoxy(0,1);
    lcd_puts("Lat:");
    lcd_gotoxy(0,2);
    lcd_puts("Lon:");

    for(i=7,cur_pos_lat=4;i<17;i++){
    3bb4:	fe e0       	ldi	r31, 0x0E	; 14
    3bb6:	ff 12       	cpse	r15, r31
    3bb8:	f3 cf       	rjmp	.-26     	; 0x3ba0 <main+0x192>
    3bba:	05 e7       	ldi	r16, 0x75	; 117
    3bbc:	15 e0       	ldi	r17, 0x05	; 5
    3bbe:	68 94       	set
    3bc0:	ff 24       	eor	r15, r15
    3bc2:	f2 f8       	bld	r15, 2
    lcd_gotoxy(cur_pos_lat,1);
    lcd_putc(sdbuff[i]);
    cur_pos_lat++;
    }
    for(j=18,cur_pos_lon=4;j<28;j++){
	    lcd_gotoxy(cur_pos_lon,2);
    3bc4:	62 e0       	ldi	r22, 0x02	; 2
    3bc6:	8f 2d       	mov	r24, r15
    3bc8:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
	    lcd_putc(sdbuff[j]);
    3bcc:	f8 01       	movw	r30, r16
    3bce:	81 91       	ld	r24, Z+
    3bd0:	8f 01       	movw	r16, r30
    3bd2:	0e 94 99 18 	call	0x3132	; 0x3132 <lcd_putc>
    3bd6:	f3 94       	inc	r15
    for(i=7,cur_pos_lat=4;i<17;i++){
    lcd_gotoxy(cur_pos_lat,1);
    lcd_putc(sdbuff[i]);
    cur_pos_lat++;
    }
    for(j=18,cur_pos_lon=4;j<28;j++){
    3bd8:	fe e0       	ldi	r31, 0x0E	; 14
    3bda:	ff 12       	cpse	r15, r31
    3bdc:	f3 cf       	rjmp	.-26     	; 0x3bc4 <main+0x1b6>
    3bde:	2f ef       	ldi	r18, 0xFF	; 255
    3be0:	8f ef       	ldi	r24, 0xFF	; 255
    3be2:	99 e5       	ldi	r25, 0x59	; 89
    3be4:	21 50       	subi	r18, 0x01	; 1
    3be6:	80 40       	sbci	r24, 0x00	; 0
    3be8:	90 40       	sbci	r25, 0x00	; 0
    3bea:	e1 f7       	brne	.-8      	; 0x3be4 <main+0x1d6>
    3bec:	00 c0       	rjmp	.+0      	; 0x3bee <main+0x1e0>
    3bee:	00 00       	nop
	    cur_pos_lon++;
    }

    _delay_ms(4000);

    lcd_clrscr();
    3bf0:	0e 94 91 18 	call	0x3122	; 0x3122 <lcd_clrscr>
    lcd_home();
    3bf4:	0e 94 95 18 	call	0x312a	; 0x312a <lcd_home>
    lcd_puts("Fetch GPS coor.");
    3bf8:	84 ef       	ldi	r24, 0xF4	; 244
    3bfa:	91 e0       	ldi	r25, 0x01	; 1
    3bfc:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    3c00:	ef ef       	ldi	r30, 0xFF	; 255
    3c02:	ff e7       	ldi	r31, 0x7F	; 127
    3c04:	26 e1       	ldi	r18, 0x16	; 22
    3c06:	e1 50       	subi	r30, 0x01	; 1
    3c08:	f0 40       	sbci	r31, 0x00	; 0
    3c0a:	20 40       	sbci	r18, 0x00	; 0
    3c0c:	e1 f7       	brne	.-8      	; 0x3c06 <main+0x1f8>
    3c0e:	00 c0       	rjmp	.+0      	; 0x3c10 <main+0x202>
    3c10:	00 00       	nop
    _delay_ms(1000);
    lcd_clrscr();
    3c12:	0e 94 91 18 	call	0x3122	; 0x3122 <lcd_clrscr>
    lcd_home();
    3c16:	0e 94 95 18 	call	0x312a	; 0x312a <lcd_home>
    lcd_puts("Fetch GPS coor..");
    3c1a:	84 e0       	ldi	r24, 0x04	; 4
    3c1c:	92 e0       	ldi	r25, 0x02	; 2
    3c1e:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    3c22:	8f ef       	ldi	r24, 0xFF	; 255
    3c24:	9f e7       	ldi	r25, 0x7F	; 127
    3c26:	e6 e1       	ldi	r30, 0x16	; 22
    3c28:	81 50       	subi	r24, 0x01	; 1
    3c2a:	90 40       	sbci	r25, 0x00	; 0
    3c2c:	e0 40       	sbci	r30, 0x00	; 0
    3c2e:	e1 f7       	brne	.-8      	; 0x3c28 <main+0x21a>
    3c30:	00 c0       	rjmp	.+0      	; 0x3c32 <main+0x224>
    3c32:	00 00       	nop
    _delay_ms(1000);
    lcd_clrscr();
    3c34:	0e 94 91 18 	call	0x3122	; 0x3122 <lcd_clrscr>
    lcd_home();
    3c38:	0e 94 95 18 	call	0x312a	; 0x312a <lcd_home>
    lcd_puts("Fetch GPS coor...");
    3c3c:	85 e1       	ldi	r24, 0x15	; 21
    3c3e:	92 e0       	ldi	r25, 0x02	; 2
    3c40:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    3c44:	ff ef       	ldi	r31, 0xFF	; 255
    3c46:	2f e7       	ldi	r18, 0x7F	; 127
    3c48:	86 e1       	ldi	r24, 0x16	; 22
    3c4a:	f1 50       	subi	r31, 0x01	; 1
    3c4c:	20 40       	sbci	r18, 0x00	; 0
    3c4e:	80 40       	sbci	r24, 0x00	; 0
    3c50:	e1 f7       	brne	.-8      	; 0x3c4a <main+0x23c>
    3c52:	00 c0       	rjmp	.+0      	; 0x3c54 <main+0x246>
    3c54:	00 00       	nop
    _delay_ms(1000);
    lcd_clrscr();
    3c56:	0e 94 91 18 	call	0x3122	; 0x3122 <lcd_clrscr>
    lcd_home();
    3c5a:	0e 94 95 18 	call	0x312a	; 0x312a <lcd_home>
    lcd_puts("Fetch GPS coor....");
    3c5e:	87 e2       	ldi	r24, 0x27	; 39
    3c60:	92 e0       	ldi	r25, 0x02	; 2
    3c62:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
    3c66:	9f ef       	ldi	r25, 0xFF	; 255
    3c68:	ef e7       	ldi	r30, 0x7F	; 127
    3c6a:	f6 e1       	ldi	r31, 0x16	; 22
    3c6c:	91 50       	subi	r25, 0x01	; 1
    3c6e:	e0 40       	sbci	r30, 0x00	; 0
    3c70:	f0 40       	sbci	r31, 0x00	; 0
    3c72:	e1 f7       	brne	.-8      	; 0x3c6c <main+0x25e>
    3c74:	00 c0       	rjmp	.+0      	; 0x3c76 <main+0x268>
    3c76:	00 00       	nop
{
	_delay_ms(3000);
	
	sei();
	
	int i, j, cur_pos_lat, cur_pos_lon, write_pos=0;
    3c78:	21 2c       	mov	r2, r1
    3c7a:	31 2c       	mov	r3, r1
char pLatSD[20];
char pLongSD[20];

char pDistance[20];

int main (void)
    3c7c:	0f 2e       	mov	r0, r31
    3c7e:	fa e8       	ldi	r31, 0x8A	; 138
    3c80:	8f 2e       	mov	r8, r31
    3c82:	f5 e0       	ldi	r31, 0x05	; 5
    3c84:	9f 2e       	mov	r9, r31
    3c86:	f0 2d       	mov	r31, r0

            /* Calculating distance */
            getDistance(nmeabuff, sdbuff, pLatGPS, pLongGPS, pLatSD, pLongSD, pDistance);

            /* Displaying data on LCD */
    		for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
    3c88:	68 94       	set
    3c8a:	44 24       	eor	r4, r4
    3c8c:	42 f8       	bld	r4, 2
    3c8e:	51 2c       	mov	r5, r1
char pLatSD[20];
char pLongSD[20];

char pDistance[20];

int main (void)
    3c90:	0f 2e       	mov	r0, r31
    3c92:	f6 e6       	ldi	r31, 0x66	; 102
    3c94:	af 2e       	mov	r10, r31
    3c96:	f6 e0       	ldi	r31, 0x06	; 6
    3c98:	bf 2e       	mov	r11, r31
    3c9a:	f0 2d       	mov	r31, r0
    3c9c:	0f 2e       	mov	r0, r31
    3c9e:	f2 e3       	ldi	r31, 0x32	; 50
    3ca0:	6f 2e       	mov	r6, r31
    3ca2:	f6 e0       	ldi	r31, 0x06	; 6
    3ca4:	7f 2e       	mov	r7, r31
    3ca6:	f0 2d       	mov	r31, r0
    lcd_puts("Fetch GPS coor....");
    _delay_ms(1000);

	while(1) {
        // We'll write the data only if it contains a valid position
        if (gps_getNMEA(nmeabuff, 128) & GPS_NMEA_VALID) {		
    3ca8:	60 e8       	ldi	r22, 0x80	; 128
    3caa:	83 e9       	ldi	r24, 0x93	; 147
    3cac:	95 e0       	ldi	r25, 0x05	; 5
    3cae:	0e 94 89 17 	call	0x2f12	; 0x2f12 <gps_getNMEA>
    3cb2:	80 ff       	sbrs	r24, 0
    3cb4:	c6 c0       	rjmp	.+396    	; 0x3e42 <main+0x434>
			lcd_clrscr();
    3cb6:	0e 94 91 18 	call	0x3122	; 0x3122 <lcd_clrscr>
			lcd_home();
    3cba:	0e 94 95 18 	call	0x312a	; 0x312a <lcd_home>
			lcd_puts("Position");
    3cbe:	8a e3       	ldi	r24, 0x3A	; 58
    3cc0:	92 e0       	ldi	r25, 0x02	; 2
    3cc2:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
			lcd_gotoxy(0,1);
    3cc6:	61 e0       	ldi	r22, 0x01	; 1
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
			lcd_puts("Dis:");
    3cce:	83 e4       	ldi	r24, 0x43	; 67
    3cd0:	92 e0       	ldi	r25, 0x02	; 2
    3cd2:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
			lcd_gotoxy(0,2);
    3cd6:	62 e0       	ldi	r22, 0x02	; 2
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
			lcd_puts("Lat:");
    3cde:	8a ee       	ldi	r24, 0xEA	; 234
    3ce0:	91 e0       	ldi	r25, 0x01	; 1
    3ce2:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
			lcd_gotoxy(0,3);
    3ce6:	63 e0       	ldi	r22, 0x03	; 3
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
			lcd_puts("Lon:");
    3cee:	8f ee       	ldi	r24, 0xEF	; 239
    3cf0:	91 e0       	ldi	r25, 0x01	; 1
    3cf2:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
				
        	int arr_loop, pos_loop;

            /* Calculating distance */
            getDistance(nmeabuff, sdbuff, pLatGPS, pLongGPS, pLatSD, pLongSD, pDistance);
    3cf6:	0f 2e       	mov	r0, r31
    3cf8:	f7 e2       	ldi	r31, 0x27	; 39
    3cfa:	cf 2e       	mov	r12, r31
    3cfc:	f6 e0       	ldi	r31, 0x06	; 6
    3cfe:	df 2e       	mov	r13, r31
    3d00:	f0 2d       	mov	r31, r0
    3d02:	0f 2e       	mov	r0, r31
    3d04:	f3 e1       	ldi	r31, 0x13	; 19
    3d06:	ef 2e       	mov	r14, r31
    3d08:	f6 e0       	ldi	r31, 0x06	; 6
    3d0a:	ff 2e       	mov	r15, r31
    3d0c:	f0 2d       	mov	r31, r0
    3d0e:	01 e2       	ldi	r16, 0x21	; 33
    3d10:	13 e0       	ldi	r17, 0x03	; 3
    3d12:	2b e5       	ldi	r18, 0x5B	; 91
    3d14:	36 e0       	ldi	r19, 0x06	; 6
    3d16:	4f e7       	ldi	r20, 0x7F	; 127
    3d18:	55 e0       	ldi	r21, 0x05	; 5
    3d1a:	63 e6       	ldi	r22, 0x63	; 99
    3d1c:	75 e0       	ldi	r23, 0x05	; 5
    3d1e:	83 e9       	ldi	r24, 0x93	; 147
    3d20:	95 e0       	ldi	r25, 0x05	; 5
    3d22:	0e 94 72 01 	call	0x2e4	; 0x2e4 <getDistance>
    3d26:	0f 2e       	mov	r0, r31
    3d28:	ff e7       	ldi	r31, 0x7F	; 127
    3d2a:	cf 2e       	mov	r12, r31
    3d2c:	f5 e0       	ldi	r31, 0x05	; 5
    3d2e:	df 2e       	mov	r13, r31
    3d30:	f0 2d       	mov	r31, r0

            /* Displaying data on LCD */
    		for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
    3d32:	82 01       	movw	r16, r4
				lcd_gotoxy(pos_loop,2);
    3d34:	62 e0       	ldi	r22, 0x02	; 2
    3d36:	80 2f       	mov	r24, r16
    3d38:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
char pLatSD[20];
char pLongSD[20];

char pDistance[20];

int main (void)
    3d3c:	76 01       	movw	r14, r12
            getDistance(nmeabuff, sdbuff, pLatGPS, pLongGPS, pLatSD, pLongSD, pDistance);

            /* Displaying data on LCD */
    		for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
				lcd_gotoxy(pos_loop,2);
				while(!(pLatGPS[arr_loop] == '\0')){
    3d3e:	f6 01       	movw	r30, r12
    3d40:	80 81       	ld	r24, Z
    3d42:	88 23       	and	r24, r24
    3d44:	41 f0       	breq	.+16     	; 0x3d56 <main+0x348>
					lcd_putc(pLatGPS[arr_loop]);
    3d46:	0e 94 99 18 	call	0x3132	; 0x3132 <lcd_putc>
					pos_loop++;
    3d4a:	0f 5f       	subi	r16, 0xFF	; 255
    3d4c:	1f 4f       	sbci	r17, 0xFF	; 255
            getDistance(nmeabuff, sdbuff, pLatGPS, pLongGPS, pLatSD, pLongSD, pDistance);

            /* Displaying data on LCD */
    		for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
				lcd_gotoxy(pos_loop,2);
				while(!(pLatGPS[arr_loop] == '\0')){
    3d4e:	f7 01       	movw	r30, r14
    3d50:	80 81       	ld	r24, Z
    3d52:	81 11       	cpse	r24, r1
    3d54:	f8 cf       	rjmp	.-16     	; 0x3d46 <main+0x338>
    3d56:	ff ef       	ldi	r31, 0xFF	; 255
    3d58:	cf 1a       	sub	r12, r31
    3d5a:	df 0a       	sbc	r13, r31

            /* Calculating distance */
            getDistance(nmeabuff, sdbuff, pLatGPS, pLongGPS, pLatSD, pLongSD, pDistance);

            /* Displaying data on LCD */
    		for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
    3d5c:	c8 14       	cp	r12, r8
    3d5e:	d9 04       	cpc	r13, r9
    3d60:	49 f7       	brne	.-46     	; 0x3d34 <main+0x326>
    3d62:	0f 2e       	mov	r0, r31
    3d64:	fb e5       	ldi	r31, 0x5B	; 91
    3d66:	cf 2e       	mov	r12, r31
    3d68:	f6 e0       	ldi	r31, 0x06	; 6
    3d6a:	df 2e       	mov	r13, r31
    3d6c:	f0 2d       	mov	r31, r0
char pLatSD[20];
char pLongSD[20];

char pDistance[20];

int main (void)
    3d6e:	82 01       	movw	r16, r4
					lcd_putc(pLatGPS[arr_loop]);
					pos_loop++;
				}
			}
			for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
				lcd_gotoxy(pos_loop,3);
    3d70:	63 e0       	ldi	r22, 0x03	; 3
    3d72:	80 2f       	mov	r24, r16
    3d74:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
char pLatSD[20];
char pLongSD[20];

char pDistance[20];

int main (void)
    3d78:	76 01       	movw	r14, r12
					pos_loop++;
				}
			}
			for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
				lcd_gotoxy(pos_loop,3);
				while(!(pLongGPS[arr_loop] == '\0')){
    3d7a:	f6 01       	movw	r30, r12
    3d7c:	80 81       	ld	r24, Z
    3d7e:	88 23       	and	r24, r24
    3d80:	41 f0       	breq	.+16     	; 0x3d92 <main+0x384>
					lcd_putc(pLongGPS[arr_loop]);
    3d82:	0e 94 99 18 	call	0x3132	; 0x3132 <lcd_putc>
					pos_loop++;
    3d86:	0f 5f       	subi	r16, 0xFF	; 255
    3d88:	1f 4f       	sbci	r17, 0xFF	; 255
					pos_loop++;
				}
			}
			for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
				lcd_gotoxy(pos_loop,3);
				while(!(pLongGPS[arr_loop] == '\0')){
    3d8a:	f7 01       	movw	r30, r14
    3d8c:	80 81       	ld	r24, Z
    3d8e:	81 11       	cpse	r24, r1
    3d90:	f8 cf       	rjmp	.-16     	; 0x3d82 <main+0x374>
    3d92:	ff ef       	ldi	r31, 0xFF	; 255
    3d94:	cf 1a       	sub	r12, r31
    3d96:	df 0a       	sbc	r13, r31
				while(!(pLatGPS[arr_loop] == '\0')){
					lcd_putc(pLatGPS[arr_loop]);
					pos_loop++;
				}
			}
			for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
    3d98:	ca 14       	cp	r12, r10
    3d9a:	db 04       	cpc	r13, r11
    3d9c:	49 f7       	brne	.-46     	; 0x3d70 <main+0x362>
    3d9e:	0f 2e       	mov	r0, r31
    3da0:	f7 e2       	ldi	r31, 0x27	; 39
    3da2:	cf 2e       	mov	r12, r31
    3da4:	f6 e0       	ldi	r31, 0x06	; 6
    3da6:	df 2e       	mov	r13, r31
    3da8:	f0 2d       	mov	r31, r0
char pLatSD[20];
char pLongSD[20];

char pDistance[20];

int main (void)
    3daa:	82 01       	movw	r16, r4
					lcd_putc(pLongGPS[arr_loop]);
					pos_loop++;
				}
			}
            for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
                lcd_gotoxy(pos_loop,1);
    3dac:	61 e0       	ldi	r22, 0x01	; 1
    3dae:	80 2f       	mov	r24, r16
    3db0:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
char pLatSD[20];
char pLongSD[20];

char pDistance[20];

int main (void)
    3db4:	76 01       	movw	r14, r12
					pos_loop++;
				}
			}
            for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
                lcd_gotoxy(pos_loop,1);
                while(!(pDistance[arr_loop] == '\0')){
    3db6:	f6 01       	movw	r30, r12
    3db8:	80 81       	ld	r24, Z
    3dba:	88 23       	and	r24, r24
    3dbc:	41 f0       	breq	.+16     	; 0x3dce <main+0x3c0>
                    lcd_putc(pDistance[arr_loop]);
    3dbe:	0e 94 99 18 	call	0x3132	; 0x3132 <lcd_putc>
                    pos_loop++;
    3dc2:	0f 5f       	subi	r16, 0xFF	; 255
    3dc4:	1f 4f       	sbci	r17, 0xFF	; 255
					pos_loop++;
				}
			}
            for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
                lcd_gotoxy(pos_loop,1);
                while(!(pDistance[arr_loop] == '\0')){
    3dc6:	f7 01       	movw	r30, r14
    3dc8:	80 81       	ld	r24, Z
    3dca:	81 11       	cpse	r24, r1
    3dcc:	f8 cf       	rjmp	.-16     	; 0x3dbe <main+0x3b0>
    3dce:	ff ef       	ldi	r31, 0xFF	; 255
    3dd0:	cf 1a       	sub	r12, r31
    3dd2:	df 0a       	sbc	r13, r31
				while(!(pLongGPS[arr_loop] == '\0')){
					lcd_putc(pLongGPS[arr_loop]);
					pos_loop++;
				}
			}
            for(arr_loop = 0, pos_loop = 4; arr_loop < COORDINATE_BUFFER_SIZE; arr_loop++){
    3dd4:	c6 14       	cp	r12, r6
    3dd6:	d7 04       	cpc	r13, r7
    3dd8:	49 f7       	brne	.-46     	; 0x3dac <main+0x39e>
    3dda:	2f ef       	ldi	r18, 0xFF	; 255
    3ddc:	8f e3       	ldi	r24, 0x3F	; 63
    3dde:	9b e0       	ldi	r25, 0x0B	; 11
    3de0:	21 50       	subi	r18, 0x01	; 1
    3de2:	80 40       	sbci	r24, 0x00	; 0
    3de4:	90 40       	sbci	r25, 0x00	; 0
    3de6:	e1 f7       	brne	.-8      	; 0x3de0 <main+0x3d2>
    3de8:	00 c0       	rjmp	.+0      	; 0x3dea <main+0x3dc>
    3dea:	00 00       	nop
                }
            }
            _delay_ms(500);

            /* Logging the data on the SD card */
			if (f_open(&Fil, "OUT.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {
    3dec:	4a e0       	ldi	r20, 0x0A	; 10
    3dee:	68 e4       	ldi	r22, 0x48	; 72
    3df0:	72 e0       	ldi	r23, 0x02	; 2
    3df2:	8b e3       	ldi	r24, 0x3B	; 59
    3df4:	96 e0       	ldi	r25, 0x06	; 6
    3df6:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <f_open>
    3dfa:	81 11       	cpse	r24, r1
    3dfc:	32 c0       	rjmp	.+100    	; 0x3e62 <main+0x454>
				f_lseek(&Fil, write_pos);
    3dfe:	a1 01       	movw	r20, r2
    3e00:	66 27       	eor	r22, r22
    3e02:	57 fd       	sbrc	r21, 7
    3e04:	60 95       	com	r22
    3e06:	76 2f       	mov	r23, r22
    3e08:	8b e3       	ldi	r24, 0x3B	; 59
    3e0a:	96 e0       	ldi	r25, 0x06	; 6
    3e0c:	0e 94 44 14 	call	0x2888	; 0x2888 <f_lseek>
				f_write(&Fil, nmeabuff, 128, &bw);	/* Write data to the file */
    3e10:	9e 01       	movw	r18, r28
    3e12:	2f 5f       	subi	r18, 0xFF	; 255
    3e14:	3f 4f       	sbci	r19, 0xFF	; 255
    3e16:	40 e8       	ldi	r20, 0x80	; 128
    3e18:	50 e0       	ldi	r21, 0x00	; 0
    3e1a:	63 e9       	ldi	r22, 0x93	; 147
    3e1c:	75 e0       	ldi	r23, 0x05	; 5
    3e1e:	8b e3       	ldi	r24, 0x3B	; 59
    3e20:	96 e0       	ldi	r25, 0x06	; 6
    3e22:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <f_write>
				write_pos += 128;
    3e26:	e0 e8       	ldi	r30, 0x80	; 128
    3e28:	2e 0e       	add	r2, r30
    3e2a:	31 1c       	adc	r3, r1
				f_close(&Fil);
    3e2c:	8b e3       	ldi	r24, 0x3B	; 59
    3e2e:	96 e0       	ldi	r25, 0x06	; 6
    3e30:	0e 94 33 14 	call	0x2866	; 0x2866 <f_close>
						
				if(bw == 128){
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	9a 81       	ldd	r25, Y+2	; 0x02
    3e38:	80 38       	cpi	r24, 0x80	; 128
    3e3a:	91 05       	cpc	r25, r1
    3e3c:	91 f4       	brne	.+36     	; 0x3e62 <main+0x454>
					PORTC |= (1<<PORTC2);
    3e3e:	42 9a       	sbi	0x08, 2	; 8
    3e40:	10 c0       	rjmp	.+32     	; 0x3e62 <main+0x454>
				}
			}
        }
		else{
			lcd_gotoxy(0,1);
    3e42:	61 e0       	ldi	r22, 0x01	; 1
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
			lcd_puts("Waiting for valid");
    3e4a:	80 e5       	ldi	r24, 0x50	; 80
    3e4c:	92 e0       	ldi	r25, 0x02	; 2
    3e4e:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
			lcd_gotoxy(0,2);
    3e52:	62 e0       	ldi	r22, 0x02	; 2
    3e54:	80 e0       	ldi	r24, 0x00	; 0
    3e56:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <lcd_gotoxy>
			lcd_puts("coor from GPS...");
    3e5a:	82 e6       	ldi	r24, 0x62	; 98
    3e5c:	92 e0       	ldi	r25, 0x02	; 2
    3e5e:	0e 94 b9 18 	call	0x3172	; 0x3172 <lcd_puts>
		}
        sleep_mode();
    3e62:	83 b7       	in	r24, 0x33	; 51
    3e64:	81 60       	ori	r24, 0x01	; 1
    3e66:	83 bf       	out	0x33, r24	; 51
    3e68:	88 95       	sleep
    3e6a:	83 b7       	in	r24, 0x33	; 51
    3e6c:	8e 7f       	andi	r24, 0xFE	; 254
    3e6e:	83 bf       	out	0x33, r24	; 51
    }
    3e70:	1b cf       	rjmp	.-458    	; 0x3ca8 <main+0x29a>

00003e72 <get_fattime>:
	| ((DWORD)7 << 21)				/* Month 7 */
	| ((DWORD)28 << 16)				/* Mday 28 */
	| ((DWORD)0 << 11)				/* Hour 0 */
	| ((DWORD)0 << 5)				/* Min 0 */
	| ((DWORD)0 >> 1);				/* Sec 0 */
}
    3e72:	60 e0       	ldi	r22, 0x00	; 0
    3e74:	70 e0       	ldi	r23, 0x00	; 0
    3e76:	8c ef       	ldi	r24, 0xFC	; 252
    3e78:	92 e4       	ldi	r25, 0x42	; 66
    3e7a:	08 95       	ret

00003e7c <uart_init>:
/// Index of the last character that has been written in the output buffer
static volatile uint8_t uart_transmitBufWrite = 0;

void uart_init(uint16_t pUbr) {
    // write baudrate config (high-byte has to be written first!)
    UBRR1H = (unsigned char)(pUbr>>8);
    3e7c:	90 93 cd 00 	sts	0x00CD, r25
    UBRR1L = (unsigned char)pUbr;
    3e80:	80 93 cc 00 	sts	0x00CC, r24

    // configure port and activate interrupts
    UCSR1B |= (1 << RXCIE1) | (1 << RXEN1) | (1 << TXEN1);
    3e84:	e9 ec       	ldi	r30, 0xC9	; 201
    3e86:	f0 e0       	ldi	r31, 0x00	; 0
    3e88:	80 81       	ld	r24, Z
    3e8a:	88 69       	ori	r24, 0x98	; 152
    3e8c:	80 83       	st	Z, r24
    3e8e:	08 95       	ret

00003e90 <uart_receiveChar>:

    // the frame configuration is not changed since the default setting is needed
}

unsigned char uart_receiveChar() {
    if (uart_receiveBufRead != uart_receiveBufWrite) {
    3e90:	90 91 a0 02 	lds	r25, 0x02A0
    3e94:	80 91 9f 02 	lds	r24, 0x029F
    3e98:	98 17       	cp	r25, r24
    3e9a:	81 f0       	breq	.+32     	; 0x3ebc <uart_receiveChar+0x2c>
        // increment reading pointer while catching a possible array overflow
        if (++uart_receiveBufRead >= UART_RECEIVE_BUFFER_SIZE) {
    3e9c:	80 91 a0 02 	lds	r24, 0x02A0
    3ea0:	8f 5f       	subi	r24, 0xFF	; 255
    3ea2:	80 93 a0 02 	sts	0x02A0, r24
    3ea6:	88 23       	and	r24, r24
    3ea8:	14 f4       	brge	.+4      	; 0x3eae <uart_receiveChar+0x1e>
            uart_receiveBufRead = 0;
    3eaa:	10 92 a0 02 	sts	0x02A0, r1
        }

        return uart_receiveBuf[uart_receiveBufRead];
    3eae:	e0 91 a0 02 	lds	r30, 0x02A0
    3eb2:	f0 e0       	ldi	r31, 0x00	; 0
    3eb4:	ef 55       	subi	r30, 0x5F	; 95
    3eb6:	fd 4f       	sbci	r31, 0xFD	; 253
    3eb8:	80 81       	ld	r24, Z
    3eba:	08 95       	ret
    }

    return '\0';
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
}
    3ebe:	08 95       	ret

00003ec0 <uart_hasData>:

uint8_t uart_hasData() {
    return uart_receiveBufRead != uart_receiveBufWrite;
    3ec0:	20 91 a0 02 	lds	r18, 0x02A0
    3ec4:	90 91 9f 02 	lds	r25, 0x029F
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	29 13       	cpse	r18, r25
    3ecc:	01 c0       	rjmp	.+2      	; 0x3ed0 <uart_hasData+0x10>
    3ece:	80 e0       	ldi	r24, 0x00	; 0
}
    3ed0:	08 95       	ret

00003ed2 <uart_transmitChar>:
    return currentChar;
}

void uart_transmitChar(char pData) {
    // write byte into the output buffer, wait if the buffer is currently full
    if (uart_transmitBufWrite+1 >= UART_TRANSMIT_BUFFER_SIZE) {
    3ed2:	20 91 7d 02 	lds	r18, 0x027D
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	2f 5f       	subi	r18, 0xFF	; 255
    3eda:	3f 4f       	sbci	r19, 0xFF	; 255
    3edc:	20 32       	cpi	r18, 0x20	; 32
    3ede:	31 05       	cpc	r19, r1
    3ee0:	3c f0       	brlt	.+14     	; 0x3ef0 <uart_transmitChar+0x1e>
        // writing pointer is at the end of the buffer array, next index will be 0
        while (uart_transmitBufRead == 0) {
    3ee2:	90 91 7e 02 	lds	r25, 0x027E
    3ee6:	99 23       	and	r25, r25
    3ee8:	e1 f3       	breq	.-8      	; 0x3ee2 <uart_transmitChar+0x10>
            // wait, buffer is full
        }

        uart_transmitBufWrite = 0;
    3eea:	10 92 7d 02 	sts	0x027D, r1
    3eee:	10 c0       	rjmp	.+32     	; 0x3f10 <uart_transmitChar+0x3e>
    } else {
        while (uart_transmitBufWrite+1 == uart_transmitBufRead) {
    3ef0:	40 91 7d 02 	lds	r20, 0x027D
    3ef4:	20 91 7e 02 	lds	r18, 0x027E
    3ef8:	50 e0       	ldi	r21, 0x00	; 0
    3efa:	4f 5f       	subi	r20, 0xFF	; 255
    3efc:	5f 4f       	sbci	r21, 0xFF	; 255
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	42 17       	cp	r20, r18
    3f02:	53 07       	cpc	r21, r19
    3f04:	a9 f3       	breq	.-22     	; 0x3ef0 <uart_transmitChar+0x1e>
            // wait, buffer is full
        }

        uart_transmitBufWrite++;
    3f06:	90 91 7d 02 	lds	r25, 0x027D
    3f0a:	9f 5f       	subi	r25, 0xFF	; 255
    3f0c:	90 93 7d 02 	sts	0x027D, r25
    }

    // write character into buffer
    uart_transmitBuf[uart_transmitBufWrite] = pData;
    3f10:	e0 91 7d 02 	lds	r30, 0x027D
    3f14:	f0 e0       	ldi	r31, 0x00	; 0
    3f16:	e1 58       	subi	r30, 0x81	; 129
    3f18:	fd 4f       	sbci	r31, 0xFD	; 253
    3f1a:	80 83       	st	Z, r24

    // activate interrupt
    UCSR1B |= (1 << UDRIE1);
    3f1c:	e9 ec       	ldi	r30, 0xC9	; 201
    3f1e:	f0 e0       	ldi	r31, 0x00	; 0
    3f20:	80 81       	ld	r24, Z
    3f22:	80 62       	ori	r24, 0x20	; 32
    3f24:	80 83       	st	Z, r24
    3f26:	08 95       	ret

00003f28 <__vector_28>:
Interrupt handling for incoming UART-data.
The method will write the incoming character directly into the input buffer.
If the buffer is full, characters may be discarded.
*/

ISR(USART1_RX_vect) {
    3f28:	1f 92       	push	r1
    3f2a:	0f 92       	push	r0
    3f2c:	0f b6       	in	r0, 0x3f	; 63
    3f2e:	0f 92       	push	r0
    3f30:	11 24       	eor	r1, r1
    3f32:	2f 93       	push	r18
    3f34:	3f 93       	push	r19
    3f36:	8f 93       	push	r24
    3f38:	9f 93       	push	r25
    3f3a:	ef 93       	push	r30
    3f3c:	ff 93       	push	r31
    if(uart_receiveBufWrite+1 >= UART_RECEIVE_BUFFER_SIZE) {
    3f3e:	80 91 9f 02 	lds	r24, 0x029F
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	01 96       	adiw	r24, 0x01	; 1
    3f46:	80 38       	cpi	r24, 0x80	; 128
    3f48:	91 05       	cpc	r25, r1
    3f4a:	7c f0       	brlt	.+30     	; 0x3f6a <__vector_28+0x42>
            // writing pointer is at the end of the buffer array, next index will be 0
            if(uart_receiveBufRead != 0) {
    3f4c:	80 91 a0 02 	lds	r24, 0x02A0
    3f50:	88 23       	and	r24, r24
    3f52:	11 f1       	breq	.+68     	; 0x3f98 <__vector_28+0x70>
                uart_receiveBufWrite = 0;
    3f54:	10 92 9f 02 	sts	0x029F, r1
                uart_receiveBuf[uart_receiveBufWrite] = UDR1;
    3f58:	e0 91 9f 02 	lds	r30, 0x029F
    3f5c:	f0 e0       	ldi	r31, 0x00	; 0
    3f5e:	80 91 ce 00 	lds	r24, 0x00CE
    3f62:	ef 55       	subi	r30, 0x5F	; 95
    3f64:	fd 4f       	sbci	r31, 0xFD	; 253
    3f66:	80 83       	st	Z, r24
                return;
    3f68:	19 c0       	rjmp	.+50     	; 0x3f9c <__vector_28+0x74>
            }
    } else {
        if(uart_receiveBufWrite+1 != uart_receiveBufRead) {
    3f6a:	20 91 9f 02 	lds	r18, 0x029F
    3f6e:	80 91 a0 02 	lds	r24, 0x02A0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	2f 5f       	subi	r18, 0xFF	; 255
    3f76:	3f 4f       	sbci	r19, 0xFF	; 255
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	28 17       	cp	r18, r24
    3f7c:	39 07       	cpc	r19, r25
    3f7e:	61 f0       	breq	.+24     	; 0x3f98 <__vector_28+0x70>
            uart_receiveBuf[++uart_receiveBufWrite] = UDR1;
    3f80:	e0 91 9f 02 	lds	r30, 0x029F
    3f84:	ef 5f       	subi	r30, 0xFF	; 255
    3f86:	e0 93 9f 02 	sts	0x029F, r30
    3f8a:	f0 e0       	ldi	r31, 0x00	; 0
    3f8c:	80 91 ce 00 	lds	r24, 0x00CE
    3f90:	ef 55       	subi	r30, 0x5F	; 95
    3f92:	fd 4f       	sbci	r31, 0xFD	; 253
    3f94:	80 83       	st	Z, r24
            return;
    3f96:	02 c0       	rjmp	.+4      	; 0x3f9c <__vector_28+0x74>
    }

    // if the method didn't return, it means that the buffer is full
    // discard the byte in order to prevent a blocked UDR register
    char garbage;
    garbage = UDR1;
    3f98:	80 91 ce 00 	lds	r24, 0x00CE
}
    3f9c:	ff 91       	pop	r31
    3f9e:	ef 91       	pop	r30
    3fa0:	9f 91       	pop	r25
    3fa2:	8f 91       	pop	r24
    3fa4:	3f 91       	pop	r19
    3fa6:	2f 91       	pop	r18
    3fa8:	0f 90       	pop	r0
    3faa:	0f be       	out	0x3f, r0	; 63
    3fac:	0f 90       	pop	r0
    3fae:	1f 90       	pop	r1
    3fb0:	18 95       	reti

00003fb2 <__vector_29>:
/*
Interrupt handling for outgoing UART-data.
As long as there is data in the output buffer, the method will write the data into the specific UART register. When the buffer is empty, the interrupt will deactivate itself.
*/

ISR(USART1_UDRE_vect) {
    3fb2:	1f 92       	push	r1
    3fb4:	0f 92       	push	r0
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	0f 92       	push	r0
    3fba:	11 24       	eor	r1, r1
    3fbc:	8f 93       	push	r24
    3fbe:	9f 93       	push	r25
    3fc0:	ef 93       	push	r30
    3fc2:	ff 93       	push	r31
    // write next byte until reading index == writing index
    if (uart_transmitBufRead != uart_transmitBufWrite) {
    3fc4:	90 91 7e 02 	lds	r25, 0x027E
    3fc8:	80 91 7d 02 	lds	r24, 0x027D
    3fcc:	98 17       	cp	r25, r24
    3fce:	91 f0       	breq	.+36     	; 0x3ff4 <__vector_29+0x42>
        if (++uart_transmitBufRead >= UART_TRANSMIT_BUFFER_SIZE) {
    3fd0:	80 91 7e 02 	lds	r24, 0x027E
    3fd4:	8f 5f       	subi	r24, 0xFF	; 255
    3fd6:	80 93 7e 02 	sts	0x027E, r24
    3fda:	80 32       	cpi	r24, 0x20	; 32
    3fdc:	10 f0       	brcs	.+4      	; 0x3fe2 <__vector_29+0x30>
            uart_transmitBufRead = 0;
    3fde:	10 92 7e 02 	sts	0x027E, r1
        }

        UDR1 = uart_transmitBuf[uart_transmitBufRead];
    3fe2:	e0 91 7e 02 	lds	r30, 0x027E
    3fe6:	f0 e0       	ldi	r31, 0x00	; 0
    3fe8:	e1 58       	subi	r30, 0x81	; 129
    3fea:	fd 4f       	sbci	r31, 0xFD	; 253
    3fec:	80 81       	ld	r24, Z
    3fee:	80 93 ce 00 	sts	0x00CE, r24
    3ff2:	05 c0       	rjmp	.+10     	; 0x3ffe <__vector_29+0x4c>
    } else {
        // buffer empty, deactivate interrupt
        UCSR1B &= ~(1 << UDRIE1);
    3ff4:	e9 ec       	ldi	r30, 0xC9	; 201
    3ff6:	f0 e0       	ldi	r31, 0x00	; 0
    3ff8:	80 81       	ld	r24, Z
    3ffa:	8f 7d       	andi	r24, 0xDF	; 223
    3ffc:	80 83       	st	Z, r24
    }
}
    3ffe:	ff 91       	pop	r31
    4000:	ef 91       	pop	r30
    4002:	9f 91       	pop	r25
    4004:	8f 91       	pop	r24
    4006:	0f 90       	pop	r0
    4008:	0f be       	out	0x3f, r0	; 63
    400a:	0f 90       	pop	r0
    400c:	1f 90       	pop	r1
    400e:	18 95       	reti

00004010 <__subsf3>:
    4010:	50 58       	subi	r21, 0x80	; 128

00004012 <__addsf3>:
    4012:	bb 27       	eor	r27, r27
    4014:	aa 27       	eor	r26, r26
    4016:	0e d0       	rcall	.+28     	; 0x4034 <__addsf3x>
    4018:	8f c1       	rjmp	.+798    	; 0x4338 <__fp_round>
    401a:	58 d1       	rcall	.+688    	; 0x42cc <__fp_pscA>
    401c:	30 f0       	brcs	.+12     	; 0x402a <__addsf3+0x18>
    401e:	5d d1       	rcall	.+698    	; 0x42da <__fp_pscB>
    4020:	20 f0       	brcs	.+8      	; 0x402a <__addsf3+0x18>
    4022:	31 f4       	brne	.+12     	; 0x4030 <__addsf3+0x1e>
    4024:	9f 3f       	cpi	r25, 0xFF	; 255
    4026:	11 f4       	brne	.+4      	; 0x402c <__addsf3+0x1a>
    4028:	1e f4       	brtc	.+6      	; 0x4030 <__addsf3+0x1e>
    402a:	28 c1       	rjmp	.+592    	; 0x427c <__fp_nan>
    402c:	0e f4       	brtc	.+2      	; 0x4030 <__addsf3+0x1e>
    402e:	e0 95       	com	r30
    4030:	e7 fb       	bst	r30, 7
    4032:	1e c1       	rjmp	.+572    	; 0x4270 <__fp_inf>

00004034 <__addsf3x>:
    4034:	e9 2f       	mov	r30, r25
    4036:	a2 d1       	rcall	.+836    	; 0x437c <__fp_split3>
    4038:	80 f3       	brcs	.-32     	; 0x401a <__addsf3+0x8>
    403a:	ba 17       	cp	r27, r26
    403c:	62 07       	cpc	r22, r18
    403e:	73 07       	cpc	r23, r19
    4040:	84 07       	cpc	r24, r20
    4042:	95 07       	cpc	r25, r21
    4044:	18 f0       	brcs	.+6      	; 0x404c <__addsf3x+0x18>
    4046:	71 f4       	brne	.+28     	; 0x4064 <__addsf3x+0x30>
    4048:	9e f5       	brtc	.+102    	; 0x40b0 <__addsf3x+0x7c>
    404a:	ba c1       	rjmp	.+884    	; 0x43c0 <__fp_zero>
    404c:	0e f4       	brtc	.+2      	; 0x4050 <__addsf3x+0x1c>
    404e:	e0 95       	com	r30
    4050:	0b 2e       	mov	r0, r27
    4052:	ba 2f       	mov	r27, r26
    4054:	a0 2d       	mov	r26, r0
    4056:	0b 01       	movw	r0, r22
    4058:	b9 01       	movw	r22, r18
    405a:	90 01       	movw	r18, r0
    405c:	0c 01       	movw	r0, r24
    405e:	ca 01       	movw	r24, r20
    4060:	a0 01       	movw	r20, r0
    4062:	11 24       	eor	r1, r1
    4064:	ff 27       	eor	r31, r31
    4066:	59 1b       	sub	r21, r25
    4068:	99 f0       	breq	.+38     	; 0x4090 <__addsf3x+0x5c>
    406a:	59 3f       	cpi	r21, 0xF9	; 249
    406c:	50 f4       	brcc	.+20     	; 0x4082 <__addsf3x+0x4e>
    406e:	50 3e       	cpi	r21, 0xE0	; 224
    4070:	68 f1       	brcs	.+90     	; 0x40cc <__addsf3x+0x98>
    4072:	1a 16       	cp	r1, r26
    4074:	f0 40       	sbci	r31, 0x00	; 0
    4076:	a2 2f       	mov	r26, r18
    4078:	23 2f       	mov	r18, r19
    407a:	34 2f       	mov	r19, r20
    407c:	44 27       	eor	r20, r20
    407e:	58 5f       	subi	r21, 0xF8	; 248
    4080:	f3 cf       	rjmp	.-26     	; 0x4068 <__addsf3x+0x34>
    4082:	46 95       	lsr	r20
    4084:	37 95       	ror	r19
    4086:	27 95       	ror	r18
    4088:	a7 95       	ror	r26
    408a:	f0 40       	sbci	r31, 0x00	; 0
    408c:	53 95       	inc	r21
    408e:	c9 f7       	brne	.-14     	; 0x4082 <__addsf3x+0x4e>
    4090:	7e f4       	brtc	.+30     	; 0x40b0 <__addsf3x+0x7c>
    4092:	1f 16       	cp	r1, r31
    4094:	ba 0b       	sbc	r27, r26
    4096:	62 0b       	sbc	r22, r18
    4098:	73 0b       	sbc	r23, r19
    409a:	84 0b       	sbc	r24, r20
    409c:	ba f0       	brmi	.+46     	; 0x40cc <__addsf3x+0x98>
    409e:	91 50       	subi	r25, 0x01	; 1
    40a0:	a1 f0       	breq	.+40     	; 0x40ca <__addsf3x+0x96>
    40a2:	ff 0f       	add	r31, r31
    40a4:	bb 1f       	adc	r27, r27
    40a6:	66 1f       	adc	r22, r22
    40a8:	77 1f       	adc	r23, r23
    40aa:	88 1f       	adc	r24, r24
    40ac:	c2 f7       	brpl	.-16     	; 0x409e <__addsf3x+0x6a>
    40ae:	0e c0       	rjmp	.+28     	; 0x40cc <__addsf3x+0x98>
    40b0:	ba 0f       	add	r27, r26
    40b2:	62 1f       	adc	r22, r18
    40b4:	73 1f       	adc	r23, r19
    40b6:	84 1f       	adc	r24, r20
    40b8:	48 f4       	brcc	.+18     	; 0x40cc <__addsf3x+0x98>
    40ba:	87 95       	ror	r24
    40bc:	77 95       	ror	r23
    40be:	67 95       	ror	r22
    40c0:	b7 95       	ror	r27
    40c2:	f7 95       	ror	r31
    40c4:	9e 3f       	cpi	r25, 0xFE	; 254
    40c6:	08 f0       	brcs	.+2      	; 0x40ca <__addsf3x+0x96>
    40c8:	b3 cf       	rjmp	.-154    	; 0x4030 <__addsf3+0x1e>
    40ca:	93 95       	inc	r25
    40cc:	88 0f       	add	r24, r24
    40ce:	08 f0       	brcs	.+2      	; 0x40d2 <__addsf3x+0x9e>
    40d0:	99 27       	eor	r25, r25
    40d2:	ee 0f       	add	r30, r30
    40d4:	97 95       	ror	r25
    40d6:	87 95       	ror	r24
    40d8:	08 95       	ret
    40da:	f8 d0       	rcall	.+496    	; 0x42cc <__fp_pscA>
    40dc:	58 f0       	brcs	.+22     	; 0x40f4 <__addsf3x+0xc0>
    40de:	80 e8       	ldi	r24, 0x80	; 128
    40e0:	91 e0       	ldi	r25, 0x01	; 1
    40e2:	09 f4       	brne	.+2      	; 0x40e6 <__addsf3x+0xb2>
    40e4:	9e ef       	ldi	r25, 0xFE	; 254
    40e6:	f9 d0       	rcall	.+498    	; 0x42da <__fp_pscB>
    40e8:	28 f0       	brcs	.+10     	; 0x40f4 <__addsf3x+0xc0>
    40ea:	40 e8       	ldi	r20, 0x80	; 128
    40ec:	51 e0       	ldi	r21, 0x01	; 1
    40ee:	59 f4       	brne	.+22     	; 0x4106 <atan2+0xe>
    40f0:	5e ef       	ldi	r21, 0xFE	; 254
    40f2:	09 c0       	rjmp	.+18     	; 0x4106 <atan2+0xe>
    40f4:	c3 c0       	rjmp	.+390    	; 0x427c <__fp_nan>
    40f6:	64 c1       	rjmp	.+712    	; 0x43c0 <__fp_zero>

000040f8 <atan2>:
    40f8:	e9 2f       	mov	r30, r25
    40fa:	e0 78       	andi	r30, 0x80	; 128
    40fc:	3f d1       	rcall	.+638    	; 0x437c <__fp_split3>
    40fe:	68 f3       	brcs	.-38     	; 0x40da <__addsf3x+0xa6>
    4100:	09 2e       	mov	r0, r25
    4102:	05 2a       	or	r0, r21
    4104:	c1 f3       	breq	.-16     	; 0x40f6 <__addsf3x+0xc2>
    4106:	26 17       	cp	r18, r22
    4108:	37 07       	cpc	r19, r23
    410a:	48 07       	cpc	r20, r24
    410c:	59 07       	cpc	r21, r25
    410e:	38 f0       	brcs	.+14     	; 0x411e <atan2+0x26>
    4110:	0e 2e       	mov	r0, r30
    4112:	07 f8       	bld	r0, 7
    4114:	e0 25       	eor	r30, r0
    4116:	69 f0       	breq	.+26     	; 0x4132 <atan2+0x3a>
    4118:	e0 25       	eor	r30, r0
    411a:	e0 64       	ori	r30, 0x40	; 64
    411c:	0a c0       	rjmp	.+20     	; 0x4132 <atan2+0x3a>
    411e:	ef 63       	ori	r30, 0x3F	; 63
    4120:	07 f8       	bld	r0, 7
    4122:	00 94       	com	r0
    4124:	07 fa       	bst	r0, 7
    4126:	db 01       	movw	r26, r22
    4128:	b9 01       	movw	r22, r18
    412a:	9d 01       	movw	r18, r26
    412c:	dc 01       	movw	r26, r24
    412e:	ca 01       	movw	r24, r20
    4130:	ad 01       	movw	r20, r26
    4132:	ef 93       	push	r30
    4134:	44 d0       	rcall	.+136    	; 0x41be <__divsf3_pse>
    4136:	00 d1       	rcall	.+512    	; 0x4338 <__fp_round>
    4138:	0a d0       	rcall	.+20     	; 0x414e <atan>
    413a:	5f 91       	pop	r21
    413c:	55 23       	and	r21, r21
    413e:	31 f0       	breq	.+12     	; 0x414c <atan2+0x54>
    4140:	2b ed       	ldi	r18, 0xDB	; 219
    4142:	3f e0       	ldi	r19, 0x0F	; 15
    4144:	49 e4       	ldi	r20, 0x49	; 73
    4146:	50 fd       	sbrc	r21, 0
    4148:	49 ec       	ldi	r20, 0xC9	; 201
    414a:	63 cf       	rjmp	.-314    	; 0x4012 <__addsf3>
    414c:	08 95       	ret

0000414e <atan>:
    414e:	df 93       	push	r29
    4150:	dd 27       	eor	r29, r29
    4152:	b9 2f       	mov	r27, r25
    4154:	bf 77       	andi	r27, 0x7F	; 127
    4156:	40 e8       	ldi	r20, 0x80	; 128
    4158:	5f e3       	ldi	r21, 0x3F	; 63
    415a:	16 16       	cp	r1, r22
    415c:	17 06       	cpc	r1, r23
    415e:	48 07       	cpc	r20, r24
    4160:	5b 07       	cpc	r21, r27
    4162:	10 f4       	brcc	.+4      	; 0x4168 <atan+0x1a>
    4164:	d9 2f       	mov	r29, r25
    4166:	33 d1       	rcall	.+614    	; 0x43ce <inverse>
    4168:	9f 93       	push	r25
    416a:	8f 93       	push	r24
    416c:	7f 93       	push	r23
    416e:	6f 93       	push	r22
    4170:	e0 d1       	rcall	.+960    	; 0x4532 <square>
    4172:	ec e7       	ldi	r30, 0x7C	; 124
    4174:	f0 e0       	ldi	r31, 0x00	; 0
    4176:	85 d0       	rcall	.+266    	; 0x4282 <__fp_powser>
    4178:	df d0       	rcall	.+446    	; 0x4338 <__fp_round>
    417a:	2f 91       	pop	r18
    417c:	3f 91       	pop	r19
    417e:	4f 91       	pop	r20
    4180:	5f 91       	pop	r21
    4182:	38 d1       	rcall	.+624    	; 0x43f4 <__mulsf3x>
    4184:	dd 23       	and	r29, r29
    4186:	49 f0       	breq	.+18     	; 0x419a <atan+0x4c>
    4188:	90 58       	subi	r25, 0x80	; 128
    418a:	a2 ea       	ldi	r26, 0xA2	; 162
    418c:	2a ed       	ldi	r18, 0xDA	; 218
    418e:	3f e0       	ldi	r19, 0x0F	; 15
    4190:	49 ec       	ldi	r20, 0xC9	; 201
    4192:	5f e3       	ldi	r21, 0x3F	; 63
    4194:	d0 78       	andi	r29, 0x80	; 128
    4196:	5d 27       	eor	r21, r29
    4198:	4d df       	rcall	.-358    	; 0x4034 <__addsf3x>
    419a:	df 91       	pop	r29
    419c:	cd c0       	rjmp	.+410    	; 0x4338 <__fp_round>

0000419e <cos>:
    419e:	a5 d0       	rcall	.+330    	; 0x42ea <__fp_rempio2>
    41a0:	e3 95       	inc	r30
    41a2:	db c0       	rjmp	.+438    	; 0x435a <__fp_sinus>
    41a4:	9a d0       	rcall	.+308    	; 0x42da <__fp_pscB>
    41a6:	40 f0       	brcs	.+16     	; 0x41b8 <cos+0x1a>
    41a8:	91 d0       	rcall	.+290    	; 0x42cc <__fp_pscA>
    41aa:	30 f0       	brcs	.+12     	; 0x41b8 <cos+0x1a>
    41ac:	21 f4       	brne	.+8      	; 0x41b6 <cos+0x18>
    41ae:	5f 3f       	cpi	r21, 0xFF	; 255
    41b0:	19 f0       	breq	.+6      	; 0x41b8 <cos+0x1a>
    41b2:	5e c0       	rjmp	.+188    	; 0x4270 <__fp_inf>
    41b4:	51 11       	cpse	r21, r1
    41b6:	05 c1       	rjmp	.+522    	; 0x43c2 <__fp_szero>
    41b8:	61 c0       	rjmp	.+194    	; 0x427c <__fp_nan>

000041ba <__divsf3x>:
    41ba:	e0 d0       	rcall	.+448    	; 0x437c <__fp_split3>
    41bc:	98 f3       	brcs	.-26     	; 0x41a4 <cos+0x6>

000041be <__divsf3_pse>:
    41be:	99 23       	and	r25, r25
    41c0:	c9 f3       	breq	.-14     	; 0x41b4 <cos+0x16>
    41c2:	55 23       	and	r21, r21
    41c4:	b1 f3       	breq	.-20     	; 0x41b2 <cos+0x14>
    41c6:	95 1b       	sub	r25, r21
    41c8:	55 0b       	sbc	r21, r21
    41ca:	bb 27       	eor	r27, r27
    41cc:	aa 27       	eor	r26, r26
    41ce:	62 17       	cp	r22, r18
    41d0:	73 07       	cpc	r23, r19
    41d2:	84 07       	cpc	r24, r20
    41d4:	38 f0       	brcs	.+14     	; 0x41e4 <__divsf3_pse+0x26>
    41d6:	9f 5f       	subi	r25, 0xFF	; 255
    41d8:	5f 4f       	sbci	r21, 0xFF	; 255
    41da:	22 0f       	add	r18, r18
    41dc:	33 1f       	adc	r19, r19
    41de:	44 1f       	adc	r20, r20
    41e0:	aa 1f       	adc	r26, r26
    41e2:	a9 f3       	breq	.-22     	; 0x41ce <__divsf3_pse+0x10>
    41e4:	33 d0       	rcall	.+102    	; 0x424c <__divsf3_pse+0x8e>
    41e6:	0e 2e       	mov	r0, r30
    41e8:	3a f0       	brmi	.+14     	; 0x41f8 <__divsf3_pse+0x3a>
    41ea:	e0 e8       	ldi	r30, 0x80	; 128
    41ec:	30 d0       	rcall	.+96     	; 0x424e <__divsf3_pse+0x90>
    41ee:	91 50       	subi	r25, 0x01	; 1
    41f0:	50 40       	sbci	r21, 0x00	; 0
    41f2:	e6 95       	lsr	r30
    41f4:	00 1c       	adc	r0, r0
    41f6:	ca f7       	brpl	.-14     	; 0x41ea <__divsf3_pse+0x2c>
    41f8:	29 d0       	rcall	.+82     	; 0x424c <__divsf3_pse+0x8e>
    41fa:	fe 2f       	mov	r31, r30
    41fc:	27 d0       	rcall	.+78     	; 0x424c <__divsf3_pse+0x8e>
    41fe:	66 0f       	add	r22, r22
    4200:	77 1f       	adc	r23, r23
    4202:	88 1f       	adc	r24, r24
    4204:	bb 1f       	adc	r27, r27
    4206:	26 17       	cp	r18, r22
    4208:	37 07       	cpc	r19, r23
    420a:	48 07       	cpc	r20, r24
    420c:	ab 07       	cpc	r26, r27
    420e:	b0 e8       	ldi	r27, 0x80	; 128
    4210:	09 f0       	breq	.+2      	; 0x4214 <__divsf3_pse+0x56>
    4212:	bb 0b       	sbc	r27, r27
    4214:	80 2d       	mov	r24, r0
    4216:	bf 01       	movw	r22, r30
    4218:	ff 27       	eor	r31, r31
    421a:	93 58       	subi	r25, 0x83	; 131
    421c:	5f 4f       	sbci	r21, 0xFF	; 255
    421e:	2a f0       	brmi	.+10     	; 0x422a <__divsf3_pse+0x6c>
    4220:	9e 3f       	cpi	r25, 0xFE	; 254
    4222:	51 05       	cpc	r21, r1
    4224:	68 f0       	brcs	.+26     	; 0x4240 <__divsf3_pse+0x82>
    4226:	24 c0       	rjmp	.+72     	; 0x4270 <__fp_inf>
    4228:	cc c0       	rjmp	.+408    	; 0x43c2 <__fp_szero>
    422a:	5f 3f       	cpi	r21, 0xFF	; 255
    422c:	ec f3       	brlt	.-6      	; 0x4228 <__divsf3_pse+0x6a>
    422e:	98 3e       	cpi	r25, 0xE8	; 232
    4230:	dc f3       	brlt	.-10     	; 0x4228 <__divsf3_pse+0x6a>
    4232:	86 95       	lsr	r24
    4234:	77 95       	ror	r23
    4236:	67 95       	ror	r22
    4238:	b7 95       	ror	r27
    423a:	f7 95       	ror	r31
    423c:	9f 5f       	subi	r25, 0xFF	; 255
    423e:	c9 f7       	brne	.-14     	; 0x4232 <__divsf3_pse+0x74>
    4240:	88 0f       	add	r24, r24
    4242:	91 1d       	adc	r25, r1
    4244:	96 95       	lsr	r25
    4246:	87 95       	ror	r24
    4248:	97 f9       	bld	r25, 7
    424a:	08 95       	ret
    424c:	e1 e0       	ldi	r30, 0x01	; 1
    424e:	66 0f       	add	r22, r22
    4250:	77 1f       	adc	r23, r23
    4252:	88 1f       	adc	r24, r24
    4254:	bb 1f       	adc	r27, r27
    4256:	62 17       	cp	r22, r18
    4258:	73 07       	cpc	r23, r19
    425a:	84 07       	cpc	r24, r20
    425c:	ba 07       	cpc	r27, r26
    425e:	20 f0       	brcs	.+8      	; 0x4268 <__divsf3_pse+0xaa>
    4260:	62 1b       	sub	r22, r18
    4262:	73 0b       	sbc	r23, r19
    4264:	84 0b       	sbc	r24, r20
    4266:	ba 0b       	sbc	r27, r26
    4268:	ee 1f       	adc	r30, r30
    426a:	88 f7       	brcc	.-30     	; 0x424e <__divsf3_pse+0x90>
    426c:	e0 95       	com	r30
    426e:	08 95       	ret

00004270 <__fp_inf>:
    4270:	97 f9       	bld	r25, 7
    4272:	9f 67       	ori	r25, 0x7F	; 127
    4274:	80 e8       	ldi	r24, 0x80	; 128
    4276:	70 e0       	ldi	r23, 0x00	; 0
    4278:	60 e0       	ldi	r22, 0x00	; 0
    427a:	08 95       	ret

0000427c <__fp_nan>:
    427c:	9f ef       	ldi	r25, 0xFF	; 255
    427e:	80 ec       	ldi	r24, 0xC0	; 192
    4280:	08 95       	ret

00004282 <__fp_powser>:
    4282:	df 93       	push	r29
    4284:	cf 93       	push	r28
    4286:	1f 93       	push	r17
    4288:	0f 93       	push	r16
    428a:	ff 92       	push	r15
    428c:	ef 92       	push	r14
    428e:	df 92       	push	r13
    4290:	7b 01       	movw	r14, r22
    4292:	8c 01       	movw	r16, r24
    4294:	68 94       	set
    4296:	05 c0       	rjmp	.+10     	; 0x42a2 <__fp_powser+0x20>
    4298:	da 2e       	mov	r13, r26
    429a:	ef 01       	movw	r28, r30
    429c:	ab d0       	rcall	.+342    	; 0x43f4 <__mulsf3x>
    429e:	fe 01       	movw	r30, r28
    42a0:	e8 94       	clt
    42a2:	a5 91       	lpm	r26, Z+
    42a4:	25 91       	lpm	r18, Z+
    42a6:	35 91       	lpm	r19, Z+
    42a8:	45 91       	lpm	r20, Z+
    42aa:	55 91       	lpm	r21, Z+
    42ac:	ae f3       	brts	.-22     	; 0x4298 <__fp_powser+0x16>
    42ae:	ef 01       	movw	r28, r30
    42b0:	c1 de       	rcall	.-638    	; 0x4034 <__addsf3x>
    42b2:	fe 01       	movw	r30, r28
    42b4:	97 01       	movw	r18, r14
    42b6:	a8 01       	movw	r20, r16
    42b8:	da 94       	dec	r13
    42ba:	79 f7       	brne	.-34     	; 0x429a <__fp_powser+0x18>
    42bc:	df 90       	pop	r13
    42be:	ef 90       	pop	r14
    42c0:	ff 90       	pop	r15
    42c2:	0f 91       	pop	r16
    42c4:	1f 91       	pop	r17
    42c6:	cf 91       	pop	r28
    42c8:	df 91       	pop	r29
    42ca:	08 95       	ret

000042cc <__fp_pscA>:
    42cc:	00 24       	eor	r0, r0
    42ce:	0a 94       	dec	r0
    42d0:	16 16       	cp	r1, r22
    42d2:	17 06       	cpc	r1, r23
    42d4:	18 06       	cpc	r1, r24
    42d6:	09 06       	cpc	r0, r25
    42d8:	08 95       	ret

000042da <__fp_pscB>:
    42da:	00 24       	eor	r0, r0
    42dc:	0a 94       	dec	r0
    42de:	12 16       	cp	r1, r18
    42e0:	13 06       	cpc	r1, r19
    42e2:	14 06       	cpc	r1, r20
    42e4:	05 06       	cpc	r0, r21
    42e6:	08 95       	ret
    42e8:	c9 cf       	rjmp	.-110    	; 0x427c <__fp_nan>

000042ea <__fp_rempio2>:
    42ea:	50 d0       	rcall	.+160    	; 0x438c <__fp_splitA>
    42ec:	e8 f3       	brcs	.-6      	; 0x42e8 <__fp_pscB+0xe>
    42ee:	e8 94       	clt
    42f0:	e0 e0       	ldi	r30, 0x00	; 0
    42f2:	bb 27       	eor	r27, r27
    42f4:	9f 57       	subi	r25, 0x7F	; 127
    42f6:	f0 f0       	brcs	.+60     	; 0x4334 <__fp_rempio2+0x4a>
    42f8:	2a ed       	ldi	r18, 0xDA	; 218
    42fa:	3f e0       	ldi	r19, 0x0F	; 15
    42fc:	49 ec       	ldi	r20, 0xC9	; 201
    42fe:	06 c0       	rjmp	.+12     	; 0x430c <__fp_rempio2+0x22>
    4300:	ee 0f       	add	r30, r30
    4302:	bb 0f       	add	r27, r27
    4304:	66 1f       	adc	r22, r22
    4306:	77 1f       	adc	r23, r23
    4308:	88 1f       	adc	r24, r24
    430a:	28 f0       	brcs	.+10     	; 0x4316 <__fp_rempio2+0x2c>
    430c:	b2 3a       	cpi	r27, 0xA2	; 162
    430e:	62 07       	cpc	r22, r18
    4310:	73 07       	cpc	r23, r19
    4312:	84 07       	cpc	r24, r20
    4314:	28 f0       	brcs	.+10     	; 0x4320 <__fp_rempio2+0x36>
    4316:	b2 5a       	subi	r27, 0xA2	; 162
    4318:	62 0b       	sbc	r22, r18
    431a:	73 0b       	sbc	r23, r19
    431c:	84 0b       	sbc	r24, r20
    431e:	e3 95       	inc	r30
    4320:	9a 95       	dec	r25
    4322:	72 f7       	brpl	.-36     	; 0x4300 <__fp_rempio2+0x16>
    4324:	80 38       	cpi	r24, 0x80	; 128
    4326:	30 f4       	brcc	.+12     	; 0x4334 <__fp_rempio2+0x4a>
    4328:	9a 95       	dec	r25
    432a:	bb 0f       	add	r27, r27
    432c:	66 1f       	adc	r22, r22
    432e:	77 1f       	adc	r23, r23
    4330:	88 1f       	adc	r24, r24
    4332:	d2 f7       	brpl	.-12     	; 0x4328 <__fp_rempio2+0x3e>
    4334:	90 48       	sbci	r25, 0x80	; 128
    4336:	04 c1       	rjmp	.+520    	; 0x4540 <__fp_mpack_finite>

00004338 <__fp_round>:
    4338:	09 2e       	mov	r0, r25
    433a:	03 94       	inc	r0
    433c:	00 0c       	add	r0, r0
    433e:	11 f4       	brne	.+4      	; 0x4344 <__fp_round+0xc>
    4340:	88 23       	and	r24, r24
    4342:	52 f0       	brmi	.+20     	; 0x4358 <__fp_round+0x20>
    4344:	bb 0f       	add	r27, r27
    4346:	40 f4       	brcc	.+16     	; 0x4358 <__fp_round+0x20>
    4348:	bf 2b       	or	r27, r31
    434a:	11 f4       	brne	.+4      	; 0x4350 <__fp_round+0x18>
    434c:	60 ff       	sbrs	r22, 0
    434e:	04 c0       	rjmp	.+8      	; 0x4358 <__fp_round+0x20>
    4350:	6f 5f       	subi	r22, 0xFF	; 255
    4352:	7f 4f       	sbci	r23, 0xFF	; 255
    4354:	8f 4f       	sbci	r24, 0xFF	; 255
    4356:	9f 4f       	sbci	r25, 0xFF	; 255
    4358:	08 95       	ret

0000435a <__fp_sinus>:
    435a:	ef 93       	push	r30
    435c:	e0 ff       	sbrs	r30, 0
    435e:	06 c0       	rjmp	.+12     	; 0x436c <__fp_sinus+0x12>
    4360:	a2 ea       	ldi	r26, 0xA2	; 162
    4362:	2a ed       	ldi	r18, 0xDA	; 218
    4364:	3f e0       	ldi	r19, 0x0F	; 15
    4366:	49 ec       	ldi	r20, 0xC9	; 201
    4368:	5f eb       	ldi	r21, 0xBF	; 191
    436a:	64 de       	rcall	.-824    	; 0x4034 <__addsf3x>
    436c:	e5 df       	rcall	.-54     	; 0x4338 <__fp_round>
    436e:	0f 90       	pop	r0
    4370:	03 94       	inc	r0
    4372:	01 fc       	sbrc	r0, 1
    4374:	90 58       	subi	r25, 0x80	; 128
    4376:	e9 ea       	ldi	r30, 0xA9	; 169
    4378:	f0 e0       	ldi	r31, 0x00	; 0
    437a:	f5 c0       	rjmp	.+490    	; 0x4566 <__fp_powsodd>

0000437c <__fp_split3>:
    437c:	57 fd       	sbrc	r21, 7
    437e:	90 58       	subi	r25, 0x80	; 128
    4380:	44 0f       	add	r20, r20
    4382:	55 1f       	adc	r21, r21
    4384:	59 f0       	breq	.+22     	; 0x439c <__fp_splitA+0x10>
    4386:	5f 3f       	cpi	r21, 0xFF	; 255
    4388:	71 f0       	breq	.+28     	; 0x43a6 <__fp_splitA+0x1a>
    438a:	47 95       	ror	r20

0000438c <__fp_splitA>:
    438c:	88 0f       	add	r24, r24
    438e:	97 fb       	bst	r25, 7
    4390:	99 1f       	adc	r25, r25
    4392:	61 f0       	breq	.+24     	; 0x43ac <__fp_splitA+0x20>
    4394:	9f 3f       	cpi	r25, 0xFF	; 255
    4396:	79 f0       	breq	.+30     	; 0x43b6 <__fp_splitA+0x2a>
    4398:	87 95       	ror	r24
    439a:	08 95       	ret
    439c:	12 16       	cp	r1, r18
    439e:	13 06       	cpc	r1, r19
    43a0:	14 06       	cpc	r1, r20
    43a2:	55 1f       	adc	r21, r21
    43a4:	f2 cf       	rjmp	.-28     	; 0x438a <__fp_split3+0xe>
    43a6:	46 95       	lsr	r20
    43a8:	f1 df       	rcall	.-30     	; 0x438c <__fp_splitA>
    43aa:	08 c0       	rjmp	.+16     	; 0x43bc <__fp_splitA+0x30>
    43ac:	16 16       	cp	r1, r22
    43ae:	17 06       	cpc	r1, r23
    43b0:	18 06       	cpc	r1, r24
    43b2:	99 1f       	adc	r25, r25
    43b4:	f1 cf       	rjmp	.-30     	; 0x4398 <__fp_splitA+0xc>
    43b6:	86 95       	lsr	r24
    43b8:	71 05       	cpc	r23, r1
    43ba:	61 05       	cpc	r22, r1
    43bc:	08 94       	sec
    43be:	08 95       	ret

000043c0 <__fp_zero>:
    43c0:	e8 94       	clt

000043c2 <__fp_szero>:
    43c2:	bb 27       	eor	r27, r27
    43c4:	66 27       	eor	r22, r22
    43c6:	77 27       	eor	r23, r23
    43c8:	cb 01       	movw	r24, r22
    43ca:	97 f9       	bld	r25, 7
    43cc:	08 95       	ret

000043ce <inverse>:
    43ce:	9b 01       	movw	r18, r22
    43d0:	ac 01       	movw	r20, r24
    43d2:	60 e0       	ldi	r22, 0x00	; 0
    43d4:	70 e0       	ldi	r23, 0x00	; 0
    43d6:	80 e8       	ldi	r24, 0x80	; 128
    43d8:	9f e3       	ldi	r25, 0x3F	; 63
    43da:	ae c0       	rjmp	.+348    	; 0x4538 <__divsf3>

000043dc <__mulsf3>:
    43dc:	0b d0       	rcall	.+22     	; 0x43f4 <__mulsf3x>
    43de:	ac cf       	rjmp	.-168    	; 0x4338 <__fp_round>
    43e0:	75 df       	rcall	.-278    	; 0x42cc <__fp_pscA>
    43e2:	28 f0       	brcs	.+10     	; 0x43ee <__mulsf3+0x12>
    43e4:	7a df       	rcall	.-268    	; 0x42da <__fp_pscB>
    43e6:	18 f0       	brcs	.+6      	; 0x43ee <__mulsf3+0x12>
    43e8:	95 23       	and	r25, r21
    43ea:	09 f0       	breq	.+2      	; 0x43ee <__mulsf3+0x12>
    43ec:	41 cf       	rjmp	.-382    	; 0x4270 <__fp_inf>
    43ee:	46 cf       	rjmp	.-372    	; 0x427c <__fp_nan>
    43f0:	11 24       	eor	r1, r1
    43f2:	e7 cf       	rjmp	.-50     	; 0x43c2 <__fp_szero>

000043f4 <__mulsf3x>:
    43f4:	c3 df       	rcall	.-122    	; 0x437c <__fp_split3>
    43f6:	a0 f3       	brcs	.-24     	; 0x43e0 <__mulsf3+0x4>

000043f8 <__mulsf3_pse>:
    43f8:	95 9f       	mul	r25, r21
    43fa:	d1 f3       	breq	.-12     	; 0x43f0 <__mulsf3+0x14>
    43fc:	95 0f       	add	r25, r21
    43fe:	50 e0       	ldi	r21, 0x00	; 0
    4400:	55 1f       	adc	r21, r21
    4402:	62 9f       	mul	r22, r18
    4404:	f0 01       	movw	r30, r0
    4406:	72 9f       	mul	r23, r18
    4408:	bb 27       	eor	r27, r27
    440a:	f0 0d       	add	r31, r0
    440c:	b1 1d       	adc	r27, r1
    440e:	63 9f       	mul	r22, r19
    4410:	aa 27       	eor	r26, r26
    4412:	f0 0d       	add	r31, r0
    4414:	b1 1d       	adc	r27, r1
    4416:	aa 1f       	adc	r26, r26
    4418:	64 9f       	mul	r22, r20
    441a:	66 27       	eor	r22, r22
    441c:	b0 0d       	add	r27, r0
    441e:	a1 1d       	adc	r26, r1
    4420:	66 1f       	adc	r22, r22
    4422:	82 9f       	mul	r24, r18
    4424:	22 27       	eor	r18, r18
    4426:	b0 0d       	add	r27, r0
    4428:	a1 1d       	adc	r26, r1
    442a:	62 1f       	adc	r22, r18
    442c:	73 9f       	mul	r23, r19
    442e:	b0 0d       	add	r27, r0
    4430:	a1 1d       	adc	r26, r1
    4432:	62 1f       	adc	r22, r18
    4434:	83 9f       	mul	r24, r19
    4436:	a0 0d       	add	r26, r0
    4438:	61 1d       	adc	r22, r1
    443a:	22 1f       	adc	r18, r18
    443c:	74 9f       	mul	r23, r20
    443e:	33 27       	eor	r19, r19
    4440:	a0 0d       	add	r26, r0
    4442:	61 1d       	adc	r22, r1
    4444:	23 1f       	adc	r18, r19
    4446:	84 9f       	mul	r24, r20
    4448:	60 0d       	add	r22, r0
    444a:	21 1d       	adc	r18, r1
    444c:	82 2f       	mov	r24, r18
    444e:	76 2f       	mov	r23, r22
    4450:	6a 2f       	mov	r22, r26
    4452:	11 24       	eor	r1, r1
    4454:	9f 57       	subi	r25, 0x7F	; 127
    4456:	50 40       	sbci	r21, 0x00	; 0
    4458:	8a f0       	brmi	.+34     	; 0x447c <__mulsf3_pse+0x84>
    445a:	e1 f0       	breq	.+56     	; 0x4494 <__mulsf3_pse+0x9c>
    445c:	88 23       	and	r24, r24
    445e:	4a f0       	brmi	.+18     	; 0x4472 <__mulsf3_pse+0x7a>
    4460:	ee 0f       	add	r30, r30
    4462:	ff 1f       	adc	r31, r31
    4464:	bb 1f       	adc	r27, r27
    4466:	66 1f       	adc	r22, r22
    4468:	77 1f       	adc	r23, r23
    446a:	88 1f       	adc	r24, r24
    446c:	91 50       	subi	r25, 0x01	; 1
    446e:	50 40       	sbci	r21, 0x00	; 0
    4470:	a9 f7       	brne	.-22     	; 0x445c <__mulsf3_pse+0x64>
    4472:	9e 3f       	cpi	r25, 0xFE	; 254
    4474:	51 05       	cpc	r21, r1
    4476:	70 f0       	brcs	.+28     	; 0x4494 <__mulsf3_pse+0x9c>
    4478:	fb ce       	rjmp	.-522    	; 0x4270 <__fp_inf>
    447a:	a3 cf       	rjmp	.-186    	; 0x43c2 <__fp_szero>
    447c:	5f 3f       	cpi	r21, 0xFF	; 255
    447e:	ec f3       	brlt	.-6      	; 0x447a <__mulsf3_pse+0x82>
    4480:	98 3e       	cpi	r25, 0xE8	; 232
    4482:	dc f3       	brlt	.-10     	; 0x447a <__mulsf3_pse+0x82>
    4484:	86 95       	lsr	r24
    4486:	77 95       	ror	r23
    4488:	67 95       	ror	r22
    448a:	b7 95       	ror	r27
    448c:	f7 95       	ror	r31
    448e:	e7 95       	ror	r30
    4490:	9f 5f       	subi	r25, 0xFF	; 255
    4492:	c1 f7       	brne	.-16     	; 0x4484 <__mulsf3_pse+0x8c>
    4494:	fe 2b       	or	r31, r30
    4496:	88 0f       	add	r24, r24
    4498:	91 1d       	adc	r25, r1
    449a:	96 95       	lsr	r25
    449c:	87 95       	ror	r24
    449e:	97 f9       	bld	r25, 7
    44a0:	08 95       	ret

000044a2 <sin>:
    44a2:	9f 93       	push	r25
    44a4:	22 df       	rcall	.-444    	; 0x42ea <__fp_rempio2>
    44a6:	0f 90       	pop	r0
    44a8:	07 fc       	sbrc	r0, 7
    44aa:	ee 5f       	subi	r30, 0xFE	; 254
    44ac:	56 cf       	rjmp	.-340    	; 0x435a <__fp_sinus>
    44ae:	11 f4       	brne	.+4      	; 0x44b4 <sin+0x12>
    44b0:	0e f4       	brtc	.+2      	; 0x44b4 <sin+0x12>
    44b2:	e4 ce       	rjmp	.-568    	; 0x427c <__fp_nan>
    44b4:	43 c0       	rjmp	.+134    	; 0x453c <__fp_mpack>

000044b6 <sqrt>:
    44b6:	6a df       	rcall	.-300    	; 0x438c <__fp_splitA>
    44b8:	d0 f3       	brcs	.-12     	; 0x44ae <sin+0xc>
    44ba:	99 23       	and	r25, r25
    44bc:	d9 f3       	breq	.-10     	; 0x44b4 <sin+0x12>
    44be:	ce f3       	brts	.-14     	; 0x44b2 <sin+0x10>
    44c0:	9f 57       	subi	r25, 0x7F	; 127
    44c2:	55 0b       	sbc	r21, r21
    44c4:	87 ff       	sbrs	r24, 7
    44c6:	48 d0       	rcall	.+144    	; 0x4558 <__fp_norm2>
    44c8:	00 24       	eor	r0, r0
    44ca:	a0 e6       	ldi	r26, 0x60	; 96
    44cc:	40 ea       	ldi	r20, 0xA0	; 160
    44ce:	90 01       	movw	r18, r0
    44d0:	80 58       	subi	r24, 0x80	; 128
    44d2:	56 95       	lsr	r21
    44d4:	97 95       	ror	r25
    44d6:	28 f4       	brcc	.+10     	; 0x44e2 <sqrt+0x2c>
    44d8:	80 5c       	subi	r24, 0xC0	; 192
    44da:	66 0f       	add	r22, r22
    44dc:	77 1f       	adc	r23, r23
    44de:	88 1f       	adc	r24, r24
    44e0:	20 f0       	brcs	.+8      	; 0x44ea <sqrt+0x34>
    44e2:	26 17       	cp	r18, r22
    44e4:	37 07       	cpc	r19, r23
    44e6:	48 07       	cpc	r20, r24
    44e8:	30 f4       	brcc	.+12     	; 0x44f6 <sqrt+0x40>
    44ea:	62 1b       	sub	r22, r18
    44ec:	73 0b       	sbc	r23, r19
    44ee:	84 0b       	sbc	r24, r20
    44f0:	20 29       	or	r18, r0
    44f2:	31 29       	or	r19, r1
    44f4:	4a 2b       	or	r20, r26
    44f6:	a6 95       	lsr	r26
    44f8:	17 94       	ror	r1
    44fa:	07 94       	ror	r0
    44fc:	20 25       	eor	r18, r0
    44fe:	31 25       	eor	r19, r1
    4500:	4a 27       	eor	r20, r26
    4502:	58 f7       	brcc	.-42     	; 0x44da <sqrt+0x24>
    4504:	66 0f       	add	r22, r22
    4506:	77 1f       	adc	r23, r23
    4508:	88 1f       	adc	r24, r24
    450a:	20 f0       	brcs	.+8      	; 0x4514 <sqrt+0x5e>
    450c:	26 17       	cp	r18, r22
    450e:	37 07       	cpc	r19, r23
    4510:	48 07       	cpc	r20, r24
    4512:	30 f4       	brcc	.+12     	; 0x4520 <sqrt+0x6a>
    4514:	62 0b       	sbc	r22, r18
    4516:	73 0b       	sbc	r23, r19
    4518:	84 0b       	sbc	r24, r20
    451a:	20 0d       	add	r18, r0
    451c:	31 1d       	adc	r19, r1
    451e:	41 1d       	adc	r20, r1
    4520:	a0 95       	com	r26
    4522:	81 f7       	brne	.-32     	; 0x4504 <sqrt+0x4e>
    4524:	b9 01       	movw	r22, r18
    4526:	84 2f       	mov	r24, r20
    4528:	91 58       	subi	r25, 0x81	; 129
    452a:	88 0f       	add	r24, r24
    452c:	96 95       	lsr	r25
    452e:	87 95       	ror	r24
    4530:	08 95       	ret

00004532 <square>:
    4532:	9b 01       	movw	r18, r22
    4534:	ac 01       	movw	r20, r24
    4536:	52 cf       	rjmp	.-348    	; 0x43dc <__mulsf3>

00004538 <__divsf3>:
    4538:	40 de       	rcall	.-896    	; 0x41ba <__divsf3x>
    453a:	fe ce       	rjmp	.-516    	; 0x4338 <__fp_round>

0000453c <__fp_mpack>:
    453c:	9f 3f       	cpi	r25, 0xFF	; 255
    453e:	31 f0       	breq	.+12     	; 0x454c <__fp_mpack_finite+0xc>

00004540 <__fp_mpack_finite>:
    4540:	91 50       	subi	r25, 0x01	; 1
    4542:	20 f4       	brcc	.+8      	; 0x454c <__fp_mpack_finite+0xc>
    4544:	87 95       	ror	r24
    4546:	77 95       	ror	r23
    4548:	67 95       	ror	r22
    454a:	b7 95       	ror	r27
    454c:	88 0f       	add	r24, r24
    454e:	91 1d       	adc	r25, r1
    4550:	96 95       	lsr	r25
    4552:	87 95       	ror	r24
    4554:	97 f9       	bld	r25, 7
    4556:	08 95       	ret

00004558 <__fp_norm2>:
    4558:	91 50       	subi	r25, 0x01	; 1
    455a:	50 40       	sbci	r21, 0x00	; 0
    455c:	66 0f       	add	r22, r22
    455e:	77 1f       	adc	r23, r23
    4560:	88 1f       	adc	r24, r24
    4562:	d2 f7       	brpl	.-12     	; 0x4558 <__fp_norm2>
    4564:	08 95       	ret

00004566 <__fp_powsodd>:
    4566:	9f 93       	push	r25
    4568:	8f 93       	push	r24
    456a:	7f 93       	push	r23
    456c:	6f 93       	push	r22
    456e:	ff 93       	push	r31
    4570:	ef 93       	push	r30
    4572:	9b 01       	movw	r18, r22
    4574:	ac 01       	movw	r20, r24
    4576:	32 df       	rcall	.-412    	; 0x43dc <__mulsf3>
    4578:	ef 91       	pop	r30
    457a:	ff 91       	pop	r31
    457c:	82 de       	rcall	.-764    	; 0x4282 <__fp_powser>
    457e:	2f 91       	pop	r18
    4580:	3f 91       	pop	r19
    4582:	4f 91       	pop	r20
    4584:	5f 91       	pop	r21
    4586:	2a cf       	rjmp	.-428    	; 0x43dc <__mulsf3>

00004588 <__udivmodsi4>:
    4588:	a1 e2       	ldi	r26, 0x21	; 33
    458a:	1a 2e       	mov	r1, r26
    458c:	aa 1b       	sub	r26, r26
    458e:	bb 1b       	sub	r27, r27
    4590:	fd 01       	movw	r30, r26
    4592:	0d c0       	rjmp	.+26     	; 0x45ae <__udivmodsi4_ep>

00004594 <__udivmodsi4_loop>:
    4594:	aa 1f       	adc	r26, r26
    4596:	bb 1f       	adc	r27, r27
    4598:	ee 1f       	adc	r30, r30
    459a:	ff 1f       	adc	r31, r31
    459c:	a2 17       	cp	r26, r18
    459e:	b3 07       	cpc	r27, r19
    45a0:	e4 07       	cpc	r30, r20
    45a2:	f5 07       	cpc	r31, r21
    45a4:	20 f0       	brcs	.+8      	; 0x45ae <__udivmodsi4_ep>
    45a6:	a2 1b       	sub	r26, r18
    45a8:	b3 0b       	sbc	r27, r19
    45aa:	e4 0b       	sbc	r30, r20
    45ac:	f5 0b       	sbc	r31, r21

000045ae <__udivmodsi4_ep>:
    45ae:	66 1f       	adc	r22, r22
    45b0:	77 1f       	adc	r23, r23
    45b2:	88 1f       	adc	r24, r24
    45b4:	99 1f       	adc	r25, r25
    45b6:	1a 94       	dec	r1
    45b8:	69 f7       	brne	.-38     	; 0x4594 <__udivmodsi4_loop>
    45ba:	60 95       	com	r22
    45bc:	70 95       	com	r23
    45be:	80 95       	com	r24
    45c0:	90 95       	com	r25
    45c2:	9b 01       	movw	r18, r22
    45c4:	ac 01       	movw	r20, r24
    45c6:	bd 01       	movw	r22, r26
    45c8:	cf 01       	movw	r24, r30
    45ca:	08 95       	ret

000045cc <__muluhisi3>:
    45cc:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__umulhisi3>
    45d0:	a5 9f       	mul	r26, r21
    45d2:	90 0d       	add	r25, r0
    45d4:	b4 9f       	mul	r27, r20
    45d6:	90 0d       	add	r25, r0
    45d8:	a4 9f       	mul	r26, r20
    45da:	80 0d       	add	r24, r0
    45dc:	91 1d       	adc	r25, r1
    45de:	11 24       	eor	r1, r1
    45e0:	08 95       	ret

000045e2 <__umulhisi3>:
    45e2:	a2 9f       	mul	r26, r18
    45e4:	b0 01       	movw	r22, r0
    45e6:	b3 9f       	mul	r27, r19
    45e8:	c0 01       	movw	r24, r0
    45ea:	a3 9f       	mul	r26, r19
    45ec:	01 d0       	rcall	.+2      	; 0x45f0 <__umulhisi3+0xe>
    45ee:	b2 9f       	mul	r27, r18
    45f0:	70 0d       	add	r23, r0
    45f2:	81 1d       	adc	r24, r1
    45f4:	11 24       	eor	r1, r1
    45f6:	91 1d       	adc	r25, r1
    45f8:	08 95       	ret

000045fa <atof>:
    45fa:	66 27       	eor	r22, r22
    45fc:	77 27       	eor	r23, r23
    45fe:	0c 94 ff 24 	jmp	0x49fe	; 0x49fe <strtod>

00004602 <sprintf>:
    4602:	ae e0       	ldi	r26, 0x0E	; 14
    4604:	b0 e0       	ldi	r27, 0x00	; 0
    4606:	e7 e0       	ldi	r30, 0x07	; 7
    4608:	f3 e2       	ldi	r31, 0x23	; 35
    460a:	0c 94 82 27 	jmp	0x4f04	; 0x4f04 <__prologue_saves__+0x1c>
    460e:	0d 89       	ldd	r16, Y+21	; 0x15
    4610:	1e 89       	ldd	r17, Y+22	; 0x16
    4612:	86 e0       	ldi	r24, 0x06	; 6
    4614:	8c 83       	std	Y+4, r24	; 0x04
    4616:	1a 83       	std	Y+2, r17	; 0x02
    4618:	09 83       	std	Y+1, r16	; 0x01
    461a:	8f ef       	ldi	r24, 0xFF	; 255
    461c:	9f e7       	ldi	r25, 0x7F	; 127
    461e:	9e 83       	std	Y+6, r25	; 0x06
    4620:	8d 83       	std	Y+5, r24	; 0x05
    4622:	ce 01       	movw	r24, r28
    4624:	49 96       	adiw	r24, 0x19	; 25
    4626:	ac 01       	movw	r20, r24
    4628:	6f 89       	ldd	r22, Y+23	; 0x17
    462a:	78 8d       	ldd	r23, Y+24	; 0x18
    462c:	ce 01       	movw	r24, r28
    462e:	01 96       	adiw	r24, 0x01	; 1
    4630:	0e 94 23 23 	call	0x4646	; 0x4646 <vfprintf>
    4634:	ef 81       	ldd	r30, Y+7	; 0x07
    4636:	f8 85       	ldd	r31, Y+8	; 0x08
    4638:	e0 0f       	add	r30, r16
    463a:	f1 1f       	adc	r31, r17
    463c:	10 82       	st	Z, r1
    463e:	2e 96       	adiw	r28, 0x0e	; 14
    4640:	e4 e0       	ldi	r30, 0x04	; 4
    4642:	0c 94 9e 27 	jmp	0x4f3c	; 0x4f3c <__epilogue_restores__+0x1c>

00004646 <vfprintf>:
    4646:	ac e0       	ldi	r26, 0x0C	; 12
    4648:	b0 e0       	ldi	r27, 0x00	; 0
    464a:	e9 e2       	ldi	r30, 0x29	; 41
    464c:	f3 e2       	ldi	r31, 0x23	; 35
    464e:	0c 94 74 27 	jmp	0x4ee8	; 0x4ee8 <__prologue_saves__>
    4652:	7c 01       	movw	r14, r24
    4654:	6b 01       	movw	r12, r22
    4656:	8a 01       	movw	r16, r20
    4658:	fc 01       	movw	r30, r24
    465a:	17 82       	std	Z+7, r1	; 0x07
    465c:	16 82       	std	Z+6, r1	; 0x06
    465e:	83 81       	ldd	r24, Z+3	; 0x03
    4660:	81 ff       	sbrs	r24, 1
    4662:	c6 c1       	rjmp	.+908    	; 0x49f0 <vfprintf+0x3aa>
    4664:	88 24       	eor	r8, r8
    4666:	83 94       	inc	r8
    4668:	91 2c       	mov	r9, r1
    466a:	8c 0e       	add	r8, r28
    466c:	9d 1e       	adc	r9, r29
    466e:	f7 01       	movw	r30, r14
    4670:	93 81       	ldd	r25, Z+3	; 0x03
    4672:	f6 01       	movw	r30, r12
    4674:	93 fd       	sbrc	r25, 3
    4676:	85 91       	lpm	r24, Z+
    4678:	93 ff       	sbrs	r25, 3
    467a:	81 91       	ld	r24, Z+
    467c:	6f 01       	movw	r12, r30
    467e:	88 23       	and	r24, r24
    4680:	09 f4       	brne	.+2      	; 0x4684 <vfprintf+0x3e>
    4682:	b2 c1       	rjmp	.+868    	; 0x49e8 <vfprintf+0x3a2>
    4684:	85 32       	cpi	r24, 0x25	; 37
    4686:	39 f4       	brne	.+14     	; 0x4696 <vfprintf+0x50>
    4688:	93 fd       	sbrc	r25, 3
    468a:	85 91       	lpm	r24, Z+
    468c:	93 ff       	sbrs	r25, 3
    468e:	81 91       	ld	r24, Z+
    4690:	6f 01       	movw	r12, r30
    4692:	85 32       	cpi	r24, 0x25	; 37
    4694:	29 f4       	brne	.+10     	; 0x46a0 <vfprintf+0x5a>
    4696:	b7 01       	movw	r22, r14
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	0e 94 82 26 	call	0x4d04	; 0x4d04 <fputc>
    469e:	e7 cf       	rjmp	.-50     	; 0x466e <vfprintf+0x28>
    46a0:	51 2c       	mov	r5, r1
    46a2:	31 2c       	mov	r3, r1
    46a4:	20 e0       	ldi	r18, 0x00	; 0
    46a6:	20 32       	cpi	r18, 0x20	; 32
    46a8:	a8 f4       	brcc	.+42     	; 0x46d4 <vfprintf+0x8e>
    46aa:	8b 32       	cpi	r24, 0x2B	; 43
    46ac:	61 f0       	breq	.+24     	; 0x46c6 <vfprintf+0x80>
    46ae:	28 f4       	brcc	.+10     	; 0x46ba <vfprintf+0x74>
    46b0:	80 32       	cpi	r24, 0x20	; 32
    46b2:	51 f0       	breq	.+20     	; 0x46c8 <vfprintf+0x82>
    46b4:	83 32       	cpi	r24, 0x23	; 35
    46b6:	71 f4       	brne	.+28     	; 0x46d4 <vfprintf+0x8e>
    46b8:	0b c0       	rjmp	.+22     	; 0x46d0 <vfprintf+0x8a>
    46ba:	8d 32       	cpi	r24, 0x2D	; 45
    46bc:	39 f0       	breq	.+14     	; 0x46cc <vfprintf+0x86>
    46be:	80 33       	cpi	r24, 0x30	; 48
    46c0:	49 f4       	brne	.+18     	; 0x46d4 <vfprintf+0x8e>
    46c2:	21 60       	ori	r18, 0x01	; 1
    46c4:	28 c0       	rjmp	.+80     	; 0x4716 <vfprintf+0xd0>
    46c6:	22 60       	ori	r18, 0x02	; 2
    46c8:	24 60       	ori	r18, 0x04	; 4
    46ca:	25 c0       	rjmp	.+74     	; 0x4716 <vfprintf+0xd0>
    46cc:	28 60       	ori	r18, 0x08	; 8
    46ce:	23 c0       	rjmp	.+70     	; 0x4716 <vfprintf+0xd0>
    46d0:	20 61       	ori	r18, 0x10	; 16
    46d2:	21 c0       	rjmp	.+66     	; 0x4716 <vfprintf+0xd0>
    46d4:	27 fd       	sbrc	r18, 7
    46d6:	27 c0       	rjmp	.+78     	; 0x4726 <vfprintf+0xe0>
    46d8:	38 2f       	mov	r19, r24
    46da:	30 53       	subi	r19, 0x30	; 48
    46dc:	3a 30       	cpi	r19, 0x0A	; 10
    46de:	78 f4       	brcc	.+30     	; 0x46fe <vfprintf+0xb8>
    46e0:	26 ff       	sbrs	r18, 6
    46e2:	06 c0       	rjmp	.+12     	; 0x46f0 <vfprintf+0xaa>
    46e4:	fa e0       	ldi	r31, 0x0A	; 10
    46e6:	5f 9e       	mul	r5, r31
    46e8:	30 0d       	add	r19, r0
    46ea:	11 24       	eor	r1, r1
    46ec:	53 2e       	mov	r5, r19
    46ee:	13 c0       	rjmp	.+38     	; 0x4716 <vfprintf+0xd0>
    46f0:	8a e0       	ldi	r24, 0x0A	; 10
    46f2:	38 9e       	mul	r3, r24
    46f4:	30 0d       	add	r19, r0
    46f6:	11 24       	eor	r1, r1
    46f8:	33 2e       	mov	r3, r19
    46fa:	20 62       	ori	r18, 0x20	; 32
    46fc:	0c c0       	rjmp	.+24     	; 0x4716 <vfprintf+0xd0>
    46fe:	8e 32       	cpi	r24, 0x2E	; 46
    4700:	21 f4       	brne	.+8      	; 0x470a <vfprintf+0xc4>
    4702:	26 fd       	sbrc	r18, 6
    4704:	71 c1       	rjmp	.+738    	; 0x49e8 <vfprintf+0x3a2>
    4706:	20 64       	ori	r18, 0x40	; 64
    4708:	06 c0       	rjmp	.+12     	; 0x4716 <vfprintf+0xd0>
    470a:	8c 36       	cpi	r24, 0x6C	; 108
    470c:	11 f4       	brne	.+4      	; 0x4712 <vfprintf+0xcc>
    470e:	20 68       	ori	r18, 0x80	; 128
    4710:	02 c0       	rjmp	.+4      	; 0x4716 <vfprintf+0xd0>
    4712:	88 36       	cpi	r24, 0x68	; 104
    4714:	41 f4       	brne	.+16     	; 0x4726 <vfprintf+0xe0>
    4716:	f6 01       	movw	r30, r12
    4718:	93 fd       	sbrc	r25, 3
    471a:	85 91       	lpm	r24, Z+
    471c:	93 ff       	sbrs	r25, 3
    471e:	81 91       	ld	r24, Z+
    4720:	6f 01       	movw	r12, r30
    4722:	81 11       	cpse	r24, r1
    4724:	c0 cf       	rjmp	.-128    	; 0x46a6 <vfprintf+0x60>
    4726:	98 2f       	mov	r25, r24
    4728:	95 54       	subi	r25, 0x45	; 69
    472a:	93 30       	cpi	r25, 0x03	; 3
    472c:	18 f0       	brcs	.+6      	; 0x4734 <vfprintf+0xee>
    472e:	90 52       	subi	r25, 0x20	; 32
    4730:	93 30       	cpi	r25, 0x03	; 3
    4732:	28 f4       	brcc	.+10     	; 0x473e <vfprintf+0xf8>
    4734:	0c 5f       	subi	r16, 0xFC	; 252
    4736:	1f 4f       	sbci	r17, 0xFF	; 255
    4738:	ff e3       	ldi	r31, 0x3F	; 63
    473a:	f9 83       	std	Y+1, r31	; 0x01
    473c:	0d c0       	rjmp	.+26     	; 0x4758 <vfprintf+0x112>
    473e:	83 36       	cpi	r24, 0x63	; 99
    4740:	31 f0       	breq	.+12     	; 0x474e <vfprintf+0x108>
    4742:	83 37       	cpi	r24, 0x73	; 115
    4744:	71 f0       	breq	.+28     	; 0x4762 <vfprintf+0x11c>
    4746:	83 35       	cpi	r24, 0x53	; 83
    4748:	09 f0       	breq	.+2      	; 0x474c <vfprintf+0x106>
    474a:	5e c0       	rjmp	.+188    	; 0x4808 <vfprintf+0x1c2>
    474c:	23 c0       	rjmp	.+70     	; 0x4794 <vfprintf+0x14e>
    474e:	f8 01       	movw	r30, r16
    4750:	80 81       	ld	r24, Z
    4752:	89 83       	std	Y+1, r24	; 0x01
    4754:	0e 5f       	subi	r16, 0xFE	; 254
    4756:	1f 4f       	sbci	r17, 0xFF	; 255
    4758:	44 24       	eor	r4, r4
    475a:	43 94       	inc	r4
    475c:	51 2c       	mov	r5, r1
    475e:	54 01       	movw	r10, r8
    4760:	15 c0       	rjmp	.+42     	; 0x478c <vfprintf+0x146>
    4762:	38 01       	movw	r6, r16
    4764:	f2 e0       	ldi	r31, 0x02	; 2
    4766:	6f 0e       	add	r6, r31
    4768:	71 1c       	adc	r7, r1
    476a:	f8 01       	movw	r30, r16
    476c:	a0 80       	ld	r10, Z
    476e:	b1 80       	ldd	r11, Z+1	; 0x01
    4770:	26 ff       	sbrs	r18, 6
    4772:	03 c0       	rjmp	.+6      	; 0x477a <vfprintf+0x134>
    4774:	65 2d       	mov	r22, r5
    4776:	70 e0       	ldi	r23, 0x00	; 0
    4778:	02 c0       	rjmp	.+4      	; 0x477e <vfprintf+0x138>
    477a:	6f ef       	ldi	r22, 0xFF	; 255
    477c:	7f ef       	ldi	r23, 0xFF	; 255
    477e:	c5 01       	movw	r24, r10
    4780:	2c 87       	std	Y+12, r18	; 0x0c
    4782:	0e 94 77 26 	call	0x4cee	; 0x4cee <strnlen>
    4786:	2c 01       	movw	r4, r24
    4788:	83 01       	movw	r16, r6
    478a:	2c 85       	ldd	r18, Y+12	; 0x0c
    478c:	6f e7       	ldi	r22, 0x7F	; 127
    478e:	26 2e       	mov	r2, r22
    4790:	22 22       	and	r2, r18
    4792:	18 c0       	rjmp	.+48     	; 0x47c4 <vfprintf+0x17e>
    4794:	38 01       	movw	r6, r16
    4796:	f2 e0       	ldi	r31, 0x02	; 2
    4798:	6f 0e       	add	r6, r31
    479a:	71 1c       	adc	r7, r1
    479c:	f8 01       	movw	r30, r16
    479e:	a0 80       	ld	r10, Z
    47a0:	b1 80       	ldd	r11, Z+1	; 0x01
    47a2:	26 ff       	sbrs	r18, 6
    47a4:	03 c0       	rjmp	.+6      	; 0x47ac <vfprintf+0x166>
    47a6:	65 2d       	mov	r22, r5
    47a8:	70 e0       	ldi	r23, 0x00	; 0
    47aa:	02 c0       	rjmp	.+4      	; 0x47b0 <vfprintf+0x16a>
    47ac:	6f ef       	ldi	r22, 0xFF	; 255
    47ae:	7f ef       	ldi	r23, 0xFF	; 255
    47b0:	c5 01       	movw	r24, r10
    47b2:	2c 87       	std	Y+12, r18	; 0x0c
    47b4:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <strnlen_P>
    47b8:	2c 01       	movw	r4, r24
    47ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    47bc:	50 e8       	ldi	r21, 0x80	; 128
    47be:	25 2e       	mov	r2, r21
    47c0:	22 2a       	or	r2, r18
    47c2:	83 01       	movw	r16, r6
    47c4:	23 fc       	sbrc	r2, 3
    47c6:	1c c0       	rjmp	.+56     	; 0x4800 <vfprintf+0x1ba>
    47c8:	06 c0       	rjmp	.+12     	; 0x47d6 <vfprintf+0x190>
    47ca:	b7 01       	movw	r22, r14
    47cc:	80 e2       	ldi	r24, 0x20	; 32
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	0e 94 82 26 	call	0x4d04	; 0x4d04 <fputc>
    47d4:	3a 94       	dec	r3
    47d6:	83 2d       	mov	r24, r3
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	48 16       	cp	r4, r24
    47dc:	59 06       	cpc	r5, r25
    47de:	a8 f3       	brcs	.-22     	; 0x47ca <vfprintf+0x184>
    47e0:	0f c0       	rjmp	.+30     	; 0x4800 <vfprintf+0x1ba>
    47e2:	f5 01       	movw	r30, r10
    47e4:	27 fc       	sbrc	r2, 7
    47e6:	85 91       	lpm	r24, Z+
    47e8:	27 fe       	sbrs	r2, 7
    47ea:	81 91       	ld	r24, Z+
    47ec:	5f 01       	movw	r10, r30
    47ee:	b7 01       	movw	r22, r14
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	0e 94 82 26 	call	0x4d04	; 0x4d04 <fputc>
    47f6:	31 10       	cpse	r3, r1
    47f8:	3a 94       	dec	r3
    47fa:	f1 e0       	ldi	r31, 0x01	; 1
    47fc:	4f 1a       	sub	r4, r31
    47fe:	51 08       	sbc	r5, r1
    4800:	41 14       	cp	r4, r1
    4802:	51 04       	cpc	r5, r1
    4804:	71 f7       	brne	.-36     	; 0x47e2 <vfprintf+0x19c>
    4806:	ed c0       	rjmp	.+474    	; 0x49e2 <vfprintf+0x39c>
    4808:	84 36       	cpi	r24, 0x64	; 100
    480a:	11 f0       	breq	.+4      	; 0x4810 <vfprintf+0x1ca>
    480c:	89 36       	cpi	r24, 0x69	; 105
    480e:	41 f5       	brne	.+80     	; 0x4860 <vfprintf+0x21a>
    4810:	f8 01       	movw	r30, r16
    4812:	27 ff       	sbrs	r18, 7
    4814:	07 c0       	rjmp	.+14     	; 0x4824 <vfprintf+0x1de>
    4816:	60 81       	ld	r22, Z
    4818:	71 81       	ldd	r23, Z+1	; 0x01
    481a:	82 81       	ldd	r24, Z+2	; 0x02
    481c:	93 81       	ldd	r25, Z+3	; 0x03
    481e:	0c 5f       	subi	r16, 0xFC	; 252
    4820:	1f 4f       	sbci	r17, 0xFF	; 255
    4822:	08 c0       	rjmp	.+16     	; 0x4834 <vfprintf+0x1ee>
    4824:	60 81       	ld	r22, Z
    4826:	71 81       	ldd	r23, Z+1	; 0x01
    4828:	88 27       	eor	r24, r24
    482a:	77 fd       	sbrc	r23, 7
    482c:	80 95       	com	r24
    482e:	98 2f       	mov	r25, r24
    4830:	0e 5f       	subi	r16, 0xFE	; 254
    4832:	1f 4f       	sbci	r17, 0xFF	; 255
    4834:	4f e6       	ldi	r20, 0x6F	; 111
    4836:	b4 2e       	mov	r11, r20
    4838:	b2 22       	and	r11, r18
    483a:	97 ff       	sbrs	r25, 7
    483c:	09 c0       	rjmp	.+18     	; 0x4850 <vfprintf+0x20a>
    483e:	90 95       	com	r25
    4840:	80 95       	com	r24
    4842:	70 95       	com	r23
    4844:	61 95       	neg	r22
    4846:	7f 4f       	sbci	r23, 0xFF	; 255
    4848:	8f 4f       	sbci	r24, 0xFF	; 255
    484a:	9f 4f       	sbci	r25, 0xFF	; 255
    484c:	f0 e8       	ldi	r31, 0x80	; 128
    484e:	bf 2a       	or	r11, r31
    4850:	2a e0       	ldi	r18, 0x0A	; 10
    4852:	30 e0       	ldi	r19, 0x00	; 0
    4854:	a4 01       	movw	r20, r8
    4856:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__ultoa_invert>
    485a:	a8 2e       	mov	r10, r24
    485c:	a8 18       	sub	r10, r8
    485e:	43 c0       	rjmp	.+134    	; 0x48e6 <vfprintf+0x2a0>
    4860:	85 37       	cpi	r24, 0x75	; 117
    4862:	31 f4       	brne	.+12     	; 0x4870 <vfprintf+0x22a>
    4864:	3f ee       	ldi	r19, 0xEF	; 239
    4866:	b3 2e       	mov	r11, r19
    4868:	b2 22       	and	r11, r18
    486a:	2a e0       	ldi	r18, 0x0A	; 10
    486c:	30 e0       	ldi	r19, 0x00	; 0
    486e:	24 c0       	rjmp	.+72     	; 0x48b8 <vfprintf+0x272>
    4870:	99 ef       	ldi	r25, 0xF9	; 249
    4872:	b9 2e       	mov	r11, r25
    4874:	b2 22       	and	r11, r18
    4876:	8f 36       	cpi	r24, 0x6F	; 111
    4878:	b9 f0       	breq	.+46     	; 0x48a8 <vfprintf+0x262>
    487a:	20 f4       	brcc	.+8      	; 0x4884 <vfprintf+0x23e>
    487c:	88 35       	cpi	r24, 0x58	; 88
    487e:	09 f0       	breq	.+2      	; 0x4882 <vfprintf+0x23c>
    4880:	b3 c0       	rjmp	.+358    	; 0x49e8 <vfprintf+0x3a2>
    4882:	0d c0       	rjmp	.+26     	; 0x489e <vfprintf+0x258>
    4884:	80 37       	cpi	r24, 0x70	; 112
    4886:	21 f0       	breq	.+8      	; 0x4890 <vfprintf+0x24a>
    4888:	88 37       	cpi	r24, 0x78	; 120
    488a:	09 f0       	breq	.+2      	; 0x488e <vfprintf+0x248>
    488c:	ad c0       	rjmp	.+346    	; 0x49e8 <vfprintf+0x3a2>
    488e:	02 c0       	rjmp	.+4      	; 0x4894 <vfprintf+0x24e>
    4890:	20 e1       	ldi	r18, 0x10	; 16
    4892:	b2 2a       	or	r11, r18
    4894:	b4 fe       	sbrs	r11, 4
    4896:	0b c0       	rjmp	.+22     	; 0x48ae <vfprintf+0x268>
    4898:	84 e0       	ldi	r24, 0x04	; 4
    489a:	b8 2a       	or	r11, r24
    489c:	08 c0       	rjmp	.+16     	; 0x48ae <vfprintf+0x268>
    489e:	24 ff       	sbrs	r18, 4
    48a0:	09 c0       	rjmp	.+18     	; 0x48b4 <vfprintf+0x26e>
    48a2:	e6 e0       	ldi	r30, 0x06	; 6
    48a4:	be 2a       	or	r11, r30
    48a6:	06 c0       	rjmp	.+12     	; 0x48b4 <vfprintf+0x26e>
    48a8:	28 e0       	ldi	r18, 0x08	; 8
    48aa:	30 e0       	ldi	r19, 0x00	; 0
    48ac:	05 c0       	rjmp	.+10     	; 0x48b8 <vfprintf+0x272>
    48ae:	20 e1       	ldi	r18, 0x10	; 16
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	02 c0       	rjmp	.+4      	; 0x48b8 <vfprintf+0x272>
    48b4:	20 e1       	ldi	r18, 0x10	; 16
    48b6:	32 e0       	ldi	r19, 0x02	; 2
    48b8:	f8 01       	movw	r30, r16
    48ba:	b7 fe       	sbrs	r11, 7
    48bc:	07 c0       	rjmp	.+14     	; 0x48cc <vfprintf+0x286>
    48be:	60 81       	ld	r22, Z
    48c0:	71 81       	ldd	r23, Z+1	; 0x01
    48c2:	82 81       	ldd	r24, Z+2	; 0x02
    48c4:	93 81       	ldd	r25, Z+3	; 0x03
    48c6:	0c 5f       	subi	r16, 0xFC	; 252
    48c8:	1f 4f       	sbci	r17, 0xFF	; 255
    48ca:	06 c0       	rjmp	.+12     	; 0x48d8 <vfprintf+0x292>
    48cc:	60 81       	ld	r22, Z
    48ce:	71 81       	ldd	r23, Z+1	; 0x01
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	0e 5f       	subi	r16, 0xFE	; 254
    48d6:	1f 4f       	sbci	r17, 0xFF	; 255
    48d8:	a4 01       	movw	r20, r8
    48da:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__ultoa_invert>
    48de:	a8 2e       	mov	r10, r24
    48e0:	a8 18       	sub	r10, r8
    48e2:	ff e7       	ldi	r31, 0x7F	; 127
    48e4:	bf 22       	and	r11, r31
    48e6:	b6 fe       	sbrs	r11, 6
    48e8:	0b c0       	rjmp	.+22     	; 0x4900 <vfprintf+0x2ba>
    48ea:	2b 2d       	mov	r18, r11
    48ec:	2e 7f       	andi	r18, 0xFE	; 254
    48ee:	a5 14       	cp	r10, r5
    48f0:	50 f4       	brcc	.+20     	; 0x4906 <vfprintf+0x2c0>
    48f2:	b4 fe       	sbrs	r11, 4
    48f4:	0a c0       	rjmp	.+20     	; 0x490a <vfprintf+0x2c4>
    48f6:	b2 fc       	sbrc	r11, 2
    48f8:	08 c0       	rjmp	.+16     	; 0x490a <vfprintf+0x2c4>
    48fa:	2b 2d       	mov	r18, r11
    48fc:	2e 7e       	andi	r18, 0xEE	; 238
    48fe:	05 c0       	rjmp	.+10     	; 0x490a <vfprintf+0x2c4>
    4900:	7a 2c       	mov	r7, r10
    4902:	2b 2d       	mov	r18, r11
    4904:	03 c0       	rjmp	.+6      	; 0x490c <vfprintf+0x2c6>
    4906:	7a 2c       	mov	r7, r10
    4908:	01 c0       	rjmp	.+2      	; 0x490c <vfprintf+0x2c6>
    490a:	75 2c       	mov	r7, r5
    490c:	24 ff       	sbrs	r18, 4
    490e:	0d c0       	rjmp	.+26     	; 0x492a <vfprintf+0x2e4>
    4910:	fe 01       	movw	r30, r28
    4912:	ea 0d       	add	r30, r10
    4914:	f1 1d       	adc	r31, r1
    4916:	80 81       	ld	r24, Z
    4918:	80 33       	cpi	r24, 0x30	; 48
    491a:	11 f4       	brne	.+4      	; 0x4920 <vfprintf+0x2da>
    491c:	29 7e       	andi	r18, 0xE9	; 233
    491e:	09 c0       	rjmp	.+18     	; 0x4932 <vfprintf+0x2ec>
    4920:	22 ff       	sbrs	r18, 2
    4922:	06 c0       	rjmp	.+12     	; 0x4930 <vfprintf+0x2ea>
    4924:	73 94       	inc	r7
    4926:	73 94       	inc	r7
    4928:	04 c0       	rjmp	.+8      	; 0x4932 <vfprintf+0x2ec>
    492a:	82 2f       	mov	r24, r18
    492c:	86 78       	andi	r24, 0x86	; 134
    492e:	09 f0       	breq	.+2      	; 0x4932 <vfprintf+0x2ec>
    4930:	73 94       	inc	r7
    4932:	23 fd       	sbrc	r18, 3
    4934:	14 c0       	rjmp	.+40     	; 0x495e <vfprintf+0x318>
    4936:	20 ff       	sbrs	r18, 0
    4938:	0f c0       	rjmp	.+30     	; 0x4958 <vfprintf+0x312>
    493a:	5a 2c       	mov	r5, r10
    493c:	73 14       	cp	r7, r3
    493e:	60 f4       	brcc	.+24     	; 0x4958 <vfprintf+0x312>
    4940:	53 0c       	add	r5, r3
    4942:	57 18       	sub	r5, r7
    4944:	73 2c       	mov	r7, r3
    4946:	08 c0       	rjmp	.+16     	; 0x4958 <vfprintf+0x312>
    4948:	b7 01       	movw	r22, r14
    494a:	80 e2       	ldi	r24, 0x20	; 32
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	2c 87       	std	Y+12, r18	; 0x0c
    4950:	0e 94 82 26 	call	0x4d04	; 0x4d04 <fputc>
    4954:	73 94       	inc	r7
    4956:	2c 85       	ldd	r18, Y+12	; 0x0c
    4958:	73 14       	cp	r7, r3
    495a:	b0 f3       	brcs	.-20     	; 0x4948 <vfprintf+0x302>
    495c:	04 c0       	rjmp	.+8      	; 0x4966 <vfprintf+0x320>
    495e:	73 14       	cp	r7, r3
    4960:	10 f4       	brcc	.+4      	; 0x4966 <vfprintf+0x320>
    4962:	37 18       	sub	r3, r7
    4964:	01 c0       	rjmp	.+2      	; 0x4968 <vfprintf+0x322>
    4966:	31 2c       	mov	r3, r1
    4968:	24 ff       	sbrs	r18, 4
    496a:	12 c0       	rjmp	.+36     	; 0x4990 <vfprintf+0x34a>
    496c:	b7 01       	movw	r22, r14
    496e:	80 e3       	ldi	r24, 0x30	; 48
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	2c 87       	std	Y+12, r18	; 0x0c
    4974:	0e 94 82 26 	call	0x4d04	; 0x4d04 <fputc>
    4978:	2c 85       	ldd	r18, Y+12	; 0x0c
    497a:	22 ff       	sbrs	r18, 2
    497c:	1e c0       	rjmp	.+60     	; 0x49ba <vfprintf+0x374>
    497e:	21 ff       	sbrs	r18, 1
    4980:	03 c0       	rjmp	.+6      	; 0x4988 <vfprintf+0x342>
    4982:	88 e5       	ldi	r24, 0x58	; 88
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	02 c0       	rjmp	.+4      	; 0x498c <vfprintf+0x346>
    4988:	88 e7       	ldi	r24, 0x78	; 120
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	b7 01       	movw	r22, r14
    498e:	0c c0       	rjmp	.+24     	; 0x49a8 <vfprintf+0x362>
    4990:	82 2f       	mov	r24, r18
    4992:	86 78       	andi	r24, 0x86	; 134
    4994:	91 f0       	breq	.+36     	; 0x49ba <vfprintf+0x374>
    4996:	21 fd       	sbrc	r18, 1
    4998:	02 c0       	rjmp	.+4      	; 0x499e <vfprintf+0x358>
    499a:	80 e2       	ldi	r24, 0x20	; 32
    499c:	01 c0       	rjmp	.+2      	; 0x49a0 <vfprintf+0x35a>
    499e:	8b e2       	ldi	r24, 0x2B	; 43
    49a0:	27 fd       	sbrc	r18, 7
    49a2:	8d e2       	ldi	r24, 0x2D	; 45
    49a4:	b7 01       	movw	r22, r14
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	0e 94 82 26 	call	0x4d04	; 0x4d04 <fputc>
    49ac:	06 c0       	rjmp	.+12     	; 0x49ba <vfprintf+0x374>
    49ae:	b7 01       	movw	r22, r14
    49b0:	80 e3       	ldi	r24, 0x30	; 48
    49b2:	90 e0       	ldi	r25, 0x00	; 0
    49b4:	0e 94 82 26 	call	0x4d04	; 0x4d04 <fputc>
    49b8:	5a 94       	dec	r5
    49ba:	a5 14       	cp	r10, r5
    49bc:	c0 f3       	brcs	.-16     	; 0x49ae <vfprintf+0x368>
    49be:	aa 94       	dec	r10
    49c0:	f4 01       	movw	r30, r8
    49c2:	ea 0d       	add	r30, r10
    49c4:	f1 1d       	adc	r31, r1
    49c6:	b7 01       	movw	r22, r14
    49c8:	80 81       	ld	r24, Z
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	0e 94 82 26 	call	0x4d04	; 0x4d04 <fputc>
    49d0:	a1 10       	cpse	r10, r1
    49d2:	f5 cf       	rjmp	.-22     	; 0x49be <vfprintf+0x378>
    49d4:	06 c0       	rjmp	.+12     	; 0x49e2 <vfprintf+0x39c>
    49d6:	b7 01       	movw	r22, r14
    49d8:	80 e2       	ldi	r24, 0x20	; 32
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	0e 94 82 26 	call	0x4d04	; 0x4d04 <fputc>
    49e0:	3a 94       	dec	r3
    49e2:	31 10       	cpse	r3, r1
    49e4:	f8 cf       	rjmp	.-16     	; 0x49d6 <vfprintf+0x390>
    49e6:	43 ce       	rjmp	.-890    	; 0x466e <vfprintf+0x28>
    49e8:	f7 01       	movw	r30, r14
    49ea:	26 81       	ldd	r18, Z+6	; 0x06
    49ec:	37 81       	ldd	r19, Z+7	; 0x07
    49ee:	02 c0       	rjmp	.+4      	; 0x49f4 <vfprintf+0x3ae>
    49f0:	2f ef       	ldi	r18, 0xFF	; 255
    49f2:	3f ef       	ldi	r19, 0xFF	; 255
    49f4:	c9 01       	movw	r24, r18
    49f6:	2c 96       	adiw	r28, 0x0c	; 12
    49f8:	e2 e1       	ldi	r30, 0x12	; 18
    49fa:	0c 94 90 27 	jmp	0x4f20	; 0x4f20 <__epilogue_restores__>

000049fe <strtod>:
    49fe:	a0 e0       	ldi	r26, 0x00	; 0
    4a00:	b0 e0       	ldi	r27, 0x00	; 0
    4a02:	e5 e0       	ldi	r30, 0x05	; 5
    4a04:	f5 e2       	ldi	r31, 0x25	; 37
    4a06:	0c 94 7a 27 	jmp	0x4ef4	; 0x4ef4 <__prologue_saves__+0xc>
    4a0a:	7b 01       	movw	r14, r22
    4a0c:	61 15       	cp	r22, r1
    4a0e:	71 05       	cpc	r23, r1
    4a10:	21 f0       	breq	.+8      	; 0x4a1a <strtod+0x1c>
    4a12:	db 01       	movw	r26, r22
    4a14:	8c 93       	st	X, r24
    4a16:	11 96       	adiw	r26, 0x01	; 1
    4a18:	9c 93       	st	X, r25
    4a1a:	ec 01       	movw	r28, r24
    4a1c:	c9 90       	ld	r12, Y+
    4a1e:	8e 01       	movw	r16, r28
    4a20:	8c 2d       	mov	r24, r12
    4a22:	90 e0       	ldi	r25, 0x00	; 0
    4a24:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <isspace>
    4a28:	89 2b       	or	r24, r25
    4a2a:	c1 f7       	brne	.-16     	; 0x4a1c <strtod+0x1e>
    4a2c:	bd e2       	ldi	r27, 0x2D	; 45
    4a2e:	cb 12       	cpse	r12, r27
    4a30:	06 c0       	rjmp	.+12     	; 0x4a3e <strtod+0x40>
    4a32:	fe 01       	movw	r30, r28
    4a34:	c1 90       	ld	r12, Z+
    4a36:	8f 01       	movw	r16, r30
    4a38:	dd 24       	eor	r13, r13
    4a3a:	d3 94       	inc	r13
    4a3c:	07 c0       	rjmp	.+14     	; 0x4a4c <strtod+0x4e>
    4a3e:	fb e2       	ldi	r31, 0x2B	; 43
    4a40:	cf 12       	cpse	r12, r31
    4a42:	03 c0       	rjmp	.+6      	; 0x4a4a <strtod+0x4c>
    4a44:	de 01       	movw	r26, r28
    4a46:	cd 90       	ld	r12, X+
    4a48:	8d 01       	movw	r16, r26
    4a4a:	d1 2c       	mov	r13, r1
    4a4c:	e8 01       	movw	r28, r16
    4a4e:	21 97       	sbiw	r28, 0x01	; 1
    4a50:	43 e0       	ldi	r20, 0x03	; 3
    4a52:	50 e0       	ldi	r21, 0x00	; 0
    4a54:	67 ec       	ldi	r22, 0xC7	; 199
    4a56:	70 e0       	ldi	r23, 0x00	; 0
    4a58:	ce 01       	movw	r24, r28
    4a5a:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <strncasecmp_P>
    4a5e:	89 2b       	or	r24, r25
    4a60:	c9 f4       	brne	.+50     	; 0x4a94 <strtod+0x96>
    4a62:	e8 01       	movw	r28, r16
    4a64:	22 96       	adiw	r28, 0x02	; 2
    4a66:	45 e0       	ldi	r20, 0x05	; 5
    4a68:	50 e0       	ldi	r21, 0x00	; 0
    4a6a:	6a ec       	ldi	r22, 0xCA	; 202
    4a6c:	70 e0       	ldi	r23, 0x00	; 0
    4a6e:	ce 01       	movw	r24, r28
    4a70:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <strncasecmp_P>
    4a74:	89 2b       	or	r24, r25
    4a76:	11 f4       	brne	.+4      	; 0x4a7c <strtod+0x7e>
    4a78:	e8 01       	movw	r28, r16
    4a7a:	27 96       	adiw	r28, 0x07	; 7
    4a7c:	e1 14       	cp	r14, r1
    4a7e:	f1 04       	cpc	r15, r1
    4a80:	19 f0       	breq	.+6      	; 0x4a88 <strtod+0x8a>
    4a82:	f7 01       	movw	r30, r14
    4a84:	d1 83       	std	Z+1, r29	; 0x01
    4a86:	c0 83       	st	Z, r28
    4a88:	81 2c       	mov	r8, r1
    4a8a:	91 2c       	mov	r9, r1
    4a8c:	90 e8       	ldi	r25, 0x80	; 128
    4a8e:	d1 10       	cpse	r13, r1
    4a90:	f3 c0       	rjmp	.+486    	; 0x4c78 <strtod+0x27a>
    4a92:	f7 c0       	rjmp	.+494    	; 0x4c82 <strtod+0x284>
    4a94:	43 e0       	ldi	r20, 0x03	; 3
    4a96:	50 e0       	ldi	r21, 0x00	; 0
    4a98:	6f ec       	ldi	r22, 0xCF	; 207
    4a9a:	70 e0       	ldi	r23, 0x00	; 0
    4a9c:	ce 01       	movw	r24, r28
    4a9e:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <strncasecmp_P>
    4aa2:	89 2b       	or	r24, r25
    4aa4:	51 f4       	brne	.+20     	; 0x4aba <strtod+0xbc>
    4aa6:	e1 14       	cp	r14, r1
    4aa8:	f1 04       	cpc	r15, r1
    4aaa:	09 f4       	brne	.+2      	; 0x4aae <strtod+0xb0>
    4aac:	e7 c0       	rjmp	.+462    	; 0x4c7c <strtod+0x27e>
    4aae:	0e 5f       	subi	r16, 0xFE	; 254
    4ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ab2:	d7 01       	movw	r26, r14
    4ab4:	0d 93       	st	X+, r16
    4ab6:	1c 93       	st	X, r17
    4ab8:	e1 c0       	rjmp	.+450    	; 0x4c7c <strtod+0x27e>
    4aba:	60 e0       	ldi	r22, 0x00	; 0
    4abc:	70 e0       	ldi	r23, 0x00	; 0
    4abe:	cb 01       	movw	r24, r22
    4ac0:	c0 e0       	ldi	r28, 0x00	; 0
    4ac2:	d0 e0       	ldi	r29, 0x00	; 0
    4ac4:	ec 2d       	mov	r30, r12
    4ac6:	e0 53       	subi	r30, 0x30	; 48
    4ac8:	ea 30       	cpi	r30, 0x0A	; 10
    4aca:	20 f5       	brcc	.+72     	; 0x4b14 <strtod+0x116>
    4acc:	fd 2d       	mov	r31, r13
    4ace:	f2 60       	ori	r31, 0x02	; 2
    4ad0:	2d 2d       	mov	r18, r13
    4ad2:	28 70       	andi	r18, 0x08	; 8
    4ad4:	d2 fe       	sbrs	r13, 2
    4ad6:	04 c0       	rjmp	.+8      	; 0x4ae0 <strtod+0xe2>
    4ad8:	21 11       	cpse	r18, r1
    4ada:	22 c0       	rjmp	.+68     	; 0x4b20 <strtod+0x122>
    4adc:	21 96       	adiw	r28, 0x01	; 1
    4ade:	20 c0       	rjmp	.+64     	; 0x4b20 <strtod+0x122>
    4ae0:	21 11       	cpse	r18, r1
    4ae2:	21 97       	sbiw	r28, 0x01	; 1
    4ae4:	a5 e0       	ldi	r26, 0x05	; 5
    4ae6:	b0 e0       	ldi	r27, 0x00	; 0
    4ae8:	9b 01       	movw	r18, r22
    4aea:	ac 01       	movw	r20, r24
    4aec:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__muluhisi3>
    4af0:	66 0f       	add	r22, r22
    4af2:	77 1f       	adc	r23, r23
    4af4:	88 1f       	adc	r24, r24
    4af6:	99 1f       	adc	r25, r25
    4af8:	6e 0f       	add	r22, r30
    4afa:	71 1d       	adc	r23, r1
    4afc:	81 1d       	adc	r24, r1
    4afe:	91 1d       	adc	r25, r1
    4b00:	68 39       	cpi	r22, 0x98	; 152
    4b02:	b9 e9       	ldi	r27, 0x99	; 153
    4b04:	7b 07       	cpc	r23, r27
    4b06:	8b 07       	cpc	r24, r27
    4b08:	b9 e1       	ldi	r27, 0x19	; 25
    4b0a:	9b 07       	cpc	r25, r27
    4b0c:	48 f0       	brcs	.+18     	; 0x4b20 <strtod+0x122>
    4b0e:	fd 2d       	mov	r31, r13
    4b10:	f6 60       	ori	r31, 0x06	; 6
    4b12:	06 c0       	rjmp	.+12     	; 0x4b20 <strtod+0x122>
    4b14:	ee 3f       	cpi	r30, 0xFE	; 254
    4b16:	49 f4       	brne	.+18     	; 0x4b2a <strtod+0x12c>
    4b18:	d3 fc       	sbrc	r13, 3
    4b1a:	43 c0       	rjmp	.+134    	; 0x4ba2 <strtod+0x1a4>
    4b1c:	fd 2d       	mov	r31, r13
    4b1e:	f8 60       	ori	r31, 0x08	; 8
    4b20:	d8 01       	movw	r26, r16
    4b22:	cd 90       	ld	r12, X+
    4b24:	8d 01       	movw	r16, r26
    4b26:	df 2e       	mov	r13, r31
    4b28:	cd cf       	rjmp	.-102    	; 0x4ac4 <strtod+0xc6>
    4b2a:	e5 33       	cpi	r30, 0x35	; 53
    4b2c:	11 f0       	breq	.+4      	; 0x4b32 <strtod+0x134>
    4b2e:	e5 31       	cpi	r30, 0x15	; 21
    4b30:	c1 f5       	brne	.+112    	; 0x4ba2 <strtod+0x1a4>
    4b32:	f8 01       	movw	r30, r16
    4b34:	a0 81       	ld	r26, Z
    4b36:	ad 32       	cpi	r26, 0x2D	; 45
    4b38:	19 f4       	brne	.+6      	; 0x4b40 <strtod+0x142>
    4b3a:	f0 e1       	ldi	r31, 0x10	; 16
    4b3c:	df 2a       	or	r13, r31
    4b3e:	07 c0       	rjmp	.+14     	; 0x4b4e <strtod+0x150>
    4b40:	ab 32       	cpi	r26, 0x2B	; 43
    4b42:	29 f0       	breq	.+10     	; 0x4b4e <strtod+0x150>
    4b44:	0f 5f       	subi	r16, 0xFF	; 255
    4b46:	1f 4f       	sbci	r17, 0xFF	; 255
    4b48:	21 e0       	ldi	r18, 0x01	; 1
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	06 c0       	rjmp	.+12     	; 0x4b5a <strtod+0x15c>
    4b4e:	f8 01       	movw	r30, r16
    4b50:	a1 81       	ldd	r26, Z+1	; 0x01
    4b52:	0e 5f       	subi	r16, 0xFE	; 254
    4b54:	1f 4f       	sbci	r17, 0xFF	; 255
    4b56:	22 e0       	ldi	r18, 0x02	; 2
    4b58:	30 e0       	ldi	r19, 0x00	; 0
    4b5a:	a0 53       	subi	r26, 0x30	; 48
    4b5c:	aa 30       	cpi	r26, 0x0A	; 10
    4b5e:	18 f0       	brcs	.+6      	; 0x4b66 <strtod+0x168>
    4b60:	02 1b       	sub	r16, r18
    4b62:	13 0b       	sbc	r17, r19
    4b64:	1e c0       	rjmp	.+60     	; 0x4ba2 <strtod+0x1a4>
    4b66:	f8 01       	movw	r30, r16
    4b68:	20 e0       	ldi	r18, 0x00	; 0
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	20 38       	cpi	r18, 0x80	; 128
    4b6e:	4c e0       	ldi	r20, 0x0C	; 12
    4b70:	34 07       	cpc	r19, r20
    4b72:	5c f4       	brge	.+22     	; 0x4b8a <strtod+0x18c>
    4b74:	a9 01       	movw	r20, r18
    4b76:	44 0f       	add	r20, r20
    4b78:	55 1f       	adc	r21, r21
    4b7a:	44 0f       	add	r20, r20
    4b7c:	55 1f       	adc	r21, r21
    4b7e:	24 0f       	add	r18, r20
    4b80:	35 1f       	adc	r19, r21
    4b82:	22 0f       	add	r18, r18
    4b84:	33 1f       	adc	r19, r19
    4b86:	2a 0f       	add	r18, r26
    4b88:	31 1d       	adc	r19, r1
    4b8a:	a1 91       	ld	r26, Z+
    4b8c:	a0 53       	subi	r26, 0x30	; 48
    4b8e:	8f 01       	movw	r16, r30
    4b90:	aa 30       	cpi	r26, 0x0A	; 10
    4b92:	60 f3       	brcs	.-40     	; 0x4b6c <strtod+0x16e>
    4b94:	d4 fe       	sbrs	r13, 4
    4b96:	03 c0       	rjmp	.+6      	; 0x4b9e <strtod+0x1a0>
    4b98:	31 95       	neg	r19
    4b9a:	21 95       	neg	r18
    4b9c:	31 09       	sbc	r19, r1
    4b9e:	c2 0f       	add	r28, r18
    4ba0:	d3 1f       	adc	r29, r19
    4ba2:	d1 fe       	sbrs	r13, 1
    4ba4:	08 c0       	rjmp	.+16     	; 0x4bb6 <strtod+0x1b8>
    4ba6:	e1 14       	cp	r14, r1
    4ba8:	f1 04       	cpc	r15, r1
    4baa:	29 f0       	breq	.+10     	; 0x4bb6 <strtod+0x1b8>
    4bac:	01 50       	subi	r16, 0x01	; 1
    4bae:	11 09       	sbc	r17, r1
    4bb0:	d7 01       	movw	r26, r14
    4bb2:	0d 93       	st	X+, r16
    4bb4:	1c 93       	st	X, r17
    4bb6:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__floatunsisf>
    4bba:	2d 2d       	mov	r18, r13
    4bbc:	23 70       	andi	r18, 0x03	; 3
    4bbe:	23 30       	cpi	r18, 0x03	; 3
    4bc0:	19 f0       	breq	.+6      	; 0x4bc8 <strtod+0x1ca>
    4bc2:	4b 01       	movw	r8, r22
    4bc4:	5c 01       	movw	r10, r24
    4bc6:	05 c0       	rjmp	.+10     	; 0x4bd2 <strtod+0x1d4>
    4bc8:	dc 01       	movw	r26, r24
    4bca:	cb 01       	movw	r24, r22
    4bcc:	b0 58       	subi	r27, 0x80	; 128
    4bce:	4c 01       	movw	r8, r24
    4bd0:	5d 01       	movw	r10, r26
    4bd2:	20 e0       	ldi	r18, 0x00	; 0
    4bd4:	30 e0       	ldi	r19, 0x00	; 0
    4bd6:	a9 01       	movw	r20, r18
    4bd8:	68 2d       	mov	r22, r8
    4bda:	79 2d       	mov	r23, r9
    4bdc:	8a 2d       	mov	r24, r10
    4bde:	9b 2d       	mov	r25, r11
    4be0:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__cmpsf2>
    4be4:	88 23       	and	r24, r24
    4be6:	09 f4       	brne	.+2      	; 0x4bea <strtod+0x1ec>
    4be8:	44 c0       	rjmp	.+136    	; 0x4c72 <strtod+0x274>
    4bea:	d7 ff       	sbrs	r29, 7
    4bec:	06 c0       	rjmp	.+12     	; 0x4bfa <strtod+0x1fc>
    4bee:	d1 95       	neg	r29
    4bf0:	c1 95       	neg	r28
    4bf2:	d1 09       	sbc	r29, r1
    4bf4:	0e ef       	ldi	r16, 0xFE	; 254
    4bf6:	10 e0       	ldi	r17, 0x00	; 0
    4bf8:	02 c0       	rjmp	.+4      	; 0x4bfe <strtod+0x200>
    4bfa:	06 ee       	ldi	r16, 0xE6	; 230
    4bfc:	10 e0       	ldi	r17, 0x00	; 0
    4bfe:	68 01       	movw	r12, r16
    4c00:	b8 e1       	ldi	r27, 0x18	; 24
    4c02:	cb 1a       	sub	r12, r27
    4c04:	d1 08       	sbc	r13, r1
    4c06:	90 e2       	ldi	r25, 0x20	; 32
    4c08:	e9 2e       	mov	r14, r25
    4c0a:	f1 2c       	mov	r15, r1
    4c0c:	13 c0       	rjmp	.+38     	; 0x4c34 <strtod+0x236>
    4c0e:	f8 01       	movw	r30, r16
    4c10:	85 91       	lpm	r24, Z+
    4c12:	95 91       	lpm	r25, Z+
    4c14:	a5 91       	lpm	r26, Z+
    4c16:	b4 91       	lpm	r27, Z
    4c18:	28 2f       	mov	r18, r24
    4c1a:	39 2f       	mov	r19, r25
    4c1c:	4a 2f       	mov	r20, r26
    4c1e:	5b 2f       	mov	r21, r27
    4c20:	68 2d       	mov	r22, r8
    4c22:	79 2d       	mov	r23, r9
    4c24:	8a 2d       	mov	r24, r10
    4c26:	9b 2d       	mov	r25, r11
    4c28:	0e 94 ee 21 	call	0x43dc	; 0x43dc <__mulsf3>
    4c2c:	4b 01       	movw	r8, r22
    4c2e:	5c 01       	movw	r10, r24
    4c30:	ce 19       	sub	r28, r14
    4c32:	df 09       	sbc	r29, r15
    4c34:	ce 15       	cp	r28, r14
    4c36:	df 05       	cpc	r29, r15
    4c38:	54 f7       	brge	.-44     	; 0x4c0e <strtod+0x210>
    4c3a:	04 50       	subi	r16, 0x04	; 4
    4c3c:	11 09       	sbc	r17, r1
    4c3e:	f5 94       	asr	r15
    4c40:	e7 94       	ror	r14
    4c42:	0c 15       	cp	r16, r12
    4c44:	1d 05       	cpc	r17, r13
    4c46:	b1 f7       	brne	.-20     	; 0x4c34 <strtod+0x236>
    4c48:	b4 01       	movw	r22, r8
    4c4a:	c5 01       	movw	r24, r10
    4c4c:	28 2f       	mov	r18, r24
    4c4e:	22 0f       	add	r18, r18
    4c50:	29 2f       	mov	r18, r25
    4c52:	22 1f       	adc	r18, r18
    4c54:	2f 3f       	cpi	r18, 0xFF	; 255
    4c56:	39 f0       	breq	.+14     	; 0x4c66 <strtod+0x268>
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	a9 01       	movw	r20, r18
    4c5e:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__cmpsf2>
    4c62:	81 11       	cpse	r24, r1
    4c64:	06 c0       	rjmp	.+12     	; 0x4c72 <strtod+0x274>
    4c66:	82 e2       	ldi	r24, 0x22	; 34
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	90 93 70 06 	sts	0x0670, r25
    4c6e:	80 93 6f 06 	sts	0x066F, r24
    4c72:	9a 2d       	mov	r25, r10
    4c74:	8b 2d       	mov	r24, r11
    4c76:	06 c0       	rjmp	.+12     	; 0x4c84 <strtod+0x286>
    4c78:	8f ef       	ldi	r24, 0xFF	; 255
    4c7a:	04 c0       	rjmp	.+8      	; 0x4c84 <strtod+0x286>
    4c7c:	81 2c       	mov	r8, r1
    4c7e:	91 2c       	mov	r9, r1
    4c80:	90 ec       	ldi	r25, 0xC0	; 192
    4c82:	8f e7       	ldi	r24, 0x7F	; 127
    4c84:	9c 01       	movw	r18, r24
    4c86:	68 2d       	mov	r22, r8
    4c88:	79 2d       	mov	r23, r9
    4c8a:	83 2f       	mov	r24, r19
    4c8c:	92 2f       	mov	r25, r18
    4c8e:	cd b7       	in	r28, 0x3d	; 61
    4c90:	de b7       	in	r29, 0x3e	; 62
    4c92:	ec e0       	ldi	r30, 0x0C	; 12
    4c94:	0c 94 96 27 	jmp	0x4f2c	; 0x4f2c <__epilogue_restores__+0xc>

00004c98 <isspace>:
    4c98:	91 11       	cpse	r25, r1
    4c9a:	23 c1       	rjmp	.+582    	; 0x4ee2 <__ctype_isfalse>
    4c9c:	80 32       	cpi	r24, 0x20	; 32
    4c9e:	19 f0       	breq	.+6      	; 0x4ca6 <isspace+0xe>
    4ca0:	89 50       	subi	r24, 0x09	; 9
    4ca2:	85 50       	subi	r24, 0x05	; 5
    4ca4:	d0 f7       	brcc	.-12     	; 0x4c9a <isspace+0x2>
    4ca6:	08 95       	ret

00004ca8 <strncasecmp_P>:
    4ca8:	fb 01       	movw	r30, r22
    4caa:	dc 01       	movw	r26, r24
    4cac:	41 50       	subi	r20, 0x01	; 1
    4cae:	50 40       	sbci	r21, 0x00	; 0
    4cb0:	88 f0       	brcs	.+34     	; 0x4cd4 <strncasecmp_P+0x2c>
    4cb2:	8d 91       	ld	r24, X+
    4cb4:	81 34       	cpi	r24, 0x41	; 65
    4cb6:	1c f0       	brlt	.+6      	; 0x4cbe <strncasecmp_P+0x16>
    4cb8:	8b 35       	cpi	r24, 0x5B	; 91
    4cba:	0c f4       	brge	.+2      	; 0x4cbe <strncasecmp_P+0x16>
    4cbc:	80 5e       	subi	r24, 0xE0	; 224
    4cbe:	65 91       	lpm	r22, Z+
    4cc0:	61 34       	cpi	r22, 0x41	; 65
    4cc2:	1c f0       	brlt	.+6      	; 0x4cca <strncasecmp_P+0x22>
    4cc4:	6b 35       	cpi	r22, 0x5B	; 91
    4cc6:	0c f4       	brge	.+2      	; 0x4cca <strncasecmp_P+0x22>
    4cc8:	60 5e       	subi	r22, 0xE0	; 224
    4cca:	86 1b       	sub	r24, r22
    4ccc:	61 11       	cpse	r22, r1
    4cce:	71 f3       	breq	.-36     	; 0x4cac <strncasecmp_P+0x4>
    4cd0:	99 0b       	sbc	r25, r25
    4cd2:	08 95       	ret
    4cd4:	88 1b       	sub	r24, r24
    4cd6:	fc cf       	rjmp	.-8      	; 0x4cd0 <strncasecmp_P+0x28>

00004cd8 <strnlen_P>:
    4cd8:	fc 01       	movw	r30, r24
    4cda:	05 90       	lpm	r0, Z+
    4cdc:	61 50       	subi	r22, 0x01	; 1
    4cde:	70 40       	sbci	r23, 0x00	; 0
    4ce0:	01 10       	cpse	r0, r1
    4ce2:	d8 f7       	brcc	.-10     	; 0x4cda <strnlen_P+0x2>
    4ce4:	80 95       	com	r24
    4ce6:	90 95       	com	r25
    4ce8:	8e 0f       	add	r24, r30
    4cea:	9f 1f       	adc	r25, r31
    4cec:	08 95       	ret

00004cee <strnlen>:
    4cee:	fc 01       	movw	r30, r24
    4cf0:	61 50       	subi	r22, 0x01	; 1
    4cf2:	70 40       	sbci	r23, 0x00	; 0
    4cf4:	01 90       	ld	r0, Z+
    4cf6:	01 10       	cpse	r0, r1
    4cf8:	d8 f7       	brcc	.-10     	; 0x4cf0 <strnlen+0x2>
    4cfa:	80 95       	com	r24
    4cfc:	90 95       	com	r25
    4cfe:	8e 0f       	add	r24, r30
    4d00:	9f 1f       	adc	r25, r31
    4d02:	08 95       	ret

00004d04 <fputc>:
    4d04:	0f 93       	push	r16
    4d06:	1f 93       	push	r17
    4d08:	cf 93       	push	r28
    4d0a:	df 93       	push	r29
    4d0c:	8c 01       	movw	r16, r24
    4d0e:	eb 01       	movw	r28, r22
    4d10:	8b 81       	ldd	r24, Y+3	; 0x03
    4d12:	81 fd       	sbrc	r24, 1
    4d14:	03 c0       	rjmp	.+6      	; 0x4d1c <fputc+0x18>
    4d16:	0f ef       	ldi	r16, 0xFF	; 255
    4d18:	1f ef       	ldi	r17, 0xFF	; 255
    4d1a:	1a c0       	rjmp	.+52     	; 0x4d50 <fputc+0x4c>
    4d1c:	82 ff       	sbrs	r24, 2
    4d1e:	0d c0       	rjmp	.+26     	; 0x4d3a <fputc+0x36>
    4d20:	2e 81       	ldd	r18, Y+6	; 0x06
    4d22:	3f 81       	ldd	r19, Y+7	; 0x07
    4d24:	8c 81       	ldd	r24, Y+4	; 0x04
    4d26:	9d 81       	ldd	r25, Y+5	; 0x05
    4d28:	28 17       	cp	r18, r24
    4d2a:	39 07       	cpc	r19, r25
    4d2c:	64 f4       	brge	.+24     	; 0x4d46 <fputc+0x42>
    4d2e:	e8 81       	ld	r30, Y
    4d30:	f9 81       	ldd	r31, Y+1	; 0x01
    4d32:	01 93       	st	Z+, r16
    4d34:	f9 83       	std	Y+1, r31	; 0x01
    4d36:	e8 83       	st	Y, r30
    4d38:	06 c0       	rjmp	.+12     	; 0x4d46 <fputc+0x42>
    4d3a:	e8 85       	ldd	r30, Y+8	; 0x08
    4d3c:	f9 85       	ldd	r31, Y+9	; 0x09
    4d3e:	80 2f       	mov	r24, r16
    4d40:	09 95       	icall
    4d42:	89 2b       	or	r24, r25
    4d44:	41 f7       	brne	.-48     	; 0x4d16 <fputc+0x12>
    4d46:	8e 81       	ldd	r24, Y+6	; 0x06
    4d48:	9f 81       	ldd	r25, Y+7	; 0x07
    4d4a:	01 96       	adiw	r24, 0x01	; 1
    4d4c:	9f 83       	std	Y+7, r25	; 0x07
    4d4e:	8e 83       	std	Y+6, r24	; 0x06
    4d50:	c8 01       	movw	r24, r16
    4d52:	df 91       	pop	r29
    4d54:	cf 91       	pop	r28
    4d56:	1f 91       	pop	r17
    4d58:	0f 91       	pop	r16
    4d5a:	08 95       	ret

00004d5c <__ultoa_invert>:
    4d5c:	fa 01       	movw	r30, r20
    4d5e:	aa 27       	eor	r26, r26
    4d60:	28 30       	cpi	r18, 0x08	; 8
    4d62:	51 f1       	breq	.+84     	; 0x4db8 <__ultoa_invert+0x5c>
    4d64:	20 31       	cpi	r18, 0x10	; 16
    4d66:	81 f1       	breq	.+96     	; 0x4dc8 <__ultoa_invert+0x6c>
    4d68:	e8 94       	clt
    4d6a:	6f 93       	push	r22
    4d6c:	6e 7f       	andi	r22, 0xFE	; 254
    4d6e:	6e 5f       	subi	r22, 0xFE	; 254
    4d70:	7f 4f       	sbci	r23, 0xFF	; 255
    4d72:	8f 4f       	sbci	r24, 0xFF	; 255
    4d74:	9f 4f       	sbci	r25, 0xFF	; 255
    4d76:	af 4f       	sbci	r26, 0xFF	; 255
    4d78:	b1 e0       	ldi	r27, 0x01	; 1
    4d7a:	3e d0       	rcall	.+124    	; 0x4df8 <__ultoa_invert+0x9c>
    4d7c:	b4 e0       	ldi	r27, 0x04	; 4
    4d7e:	3c d0       	rcall	.+120    	; 0x4df8 <__ultoa_invert+0x9c>
    4d80:	67 0f       	add	r22, r23
    4d82:	78 1f       	adc	r23, r24
    4d84:	89 1f       	adc	r24, r25
    4d86:	9a 1f       	adc	r25, r26
    4d88:	a1 1d       	adc	r26, r1
    4d8a:	68 0f       	add	r22, r24
    4d8c:	79 1f       	adc	r23, r25
    4d8e:	8a 1f       	adc	r24, r26
    4d90:	91 1d       	adc	r25, r1
    4d92:	a1 1d       	adc	r26, r1
    4d94:	6a 0f       	add	r22, r26
    4d96:	71 1d       	adc	r23, r1
    4d98:	81 1d       	adc	r24, r1
    4d9a:	91 1d       	adc	r25, r1
    4d9c:	a1 1d       	adc	r26, r1
    4d9e:	20 d0       	rcall	.+64     	; 0x4de0 <__ultoa_invert+0x84>
    4da0:	09 f4       	brne	.+2      	; 0x4da4 <__ultoa_invert+0x48>
    4da2:	68 94       	set
    4da4:	3f 91       	pop	r19
    4da6:	2a e0       	ldi	r18, 0x0A	; 10
    4da8:	26 9f       	mul	r18, r22
    4daa:	11 24       	eor	r1, r1
    4dac:	30 19       	sub	r19, r0
    4dae:	30 5d       	subi	r19, 0xD0	; 208
    4db0:	31 93       	st	Z+, r19
    4db2:	de f6       	brtc	.-74     	; 0x4d6a <__ultoa_invert+0xe>
    4db4:	cf 01       	movw	r24, r30
    4db6:	08 95       	ret
    4db8:	46 2f       	mov	r20, r22
    4dba:	47 70       	andi	r20, 0x07	; 7
    4dbc:	40 5d       	subi	r20, 0xD0	; 208
    4dbe:	41 93       	st	Z+, r20
    4dc0:	b3 e0       	ldi	r27, 0x03	; 3
    4dc2:	0f d0       	rcall	.+30     	; 0x4de2 <__ultoa_invert+0x86>
    4dc4:	c9 f7       	brne	.-14     	; 0x4db8 <__ultoa_invert+0x5c>
    4dc6:	f6 cf       	rjmp	.-20     	; 0x4db4 <__ultoa_invert+0x58>
    4dc8:	46 2f       	mov	r20, r22
    4dca:	4f 70       	andi	r20, 0x0F	; 15
    4dcc:	40 5d       	subi	r20, 0xD0	; 208
    4dce:	4a 33       	cpi	r20, 0x3A	; 58
    4dd0:	18 f0       	brcs	.+6      	; 0x4dd8 <__ultoa_invert+0x7c>
    4dd2:	49 5d       	subi	r20, 0xD9	; 217
    4dd4:	31 fd       	sbrc	r19, 1
    4dd6:	40 52       	subi	r20, 0x20	; 32
    4dd8:	41 93       	st	Z+, r20
    4dda:	02 d0       	rcall	.+4      	; 0x4de0 <__ultoa_invert+0x84>
    4ddc:	a9 f7       	brne	.-22     	; 0x4dc8 <__ultoa_invert+0x6c>
    4dde:	ea cf       	rjmp	.-44     	; 0x4db4 <__ultoa_invert+0x58>
    4de0:	b4 e0       	ldi	r27, 0x04	; 4
    4de2:	a6 95       	lsr	r26
    4de4:	97 95       	ror	r25
    4de6:	87 95       	ror	r24
    4de8:	77 95       	ror	r23
    4dea:	67 95       	ror	r22
    4dec:	ba 95       	dec	r27
    4dee:	c9 f7       	brne	.-14     	; 0x4de2 <__ultoa_invert+0x86>
    4df0:	00 97       	sbiw	r24, 0x00	; 0
    4df2:	61 05       	cpc	r22, r1
    4df4:	71 05       	cpc	r23, r1
    4df6:	08 95       	ret
    4df8:	9b 01       	movw	r18, r22
    4dfa:	ac 01       	movw	r20, r24
    4dfc:	0a 2e       	mov	r0, r26
    4dfe:	06 94       	lsr	r0
    4e00:	57 95       	ror	r21
    4e02:	47 95       	ror	r20
    4e04:	37 95       	ror	r19
    4e06:	27 95       	ror	r18
    4e08:	ba 95       	dec	r27
    4e0a:	c9 f7       	brne	.-14     	; 0x4dfe <__ultoa_invert+0xa2>
    4e0c:	62 0f       	add	r22, r18
    4e0e:	73 1f       	adc	r23, r19
    4e10:	84 1f       	adc	r24, r20
    4e12:	95 1f       	adc	r25, r21
    4e14:	a0 1d       	adc	r26, r0
    4e16:	08 95       	ret

00004e18 <__cmpsf2>:
    4e18:	40 d0       	rcall	.+128    	; 0x4e9a <__fp_cmp>
    4e1a:	08 f4       	brcc	.+2      	; 0x4e1e <__cmpsf2+0x6>
    4e1c:	81 e0       	ldi	r24, 0x01	; 1
    4e1e:	08 95       	ret

00004e20 <__floatunsisf>:
    4e20:	e8 94       	clt
    4e22:	09 c0       	rjmp	.+18     	; 0x4e36 <__floatsisf+0x12>

00004e24 <__floatsisf>:
    4e24:	97 fb       	bst	r25, 7
    4e26:	3e f4       	brtc	.+14     	; 0x4e36 <__floatsisf+0x12>
    4e28:	90 95       	com	r25
    4e2a:	80 95       	com	r24
    4e2c:	70 95       	com	r23
    4e2e:	61 95       	neg	r22
    4e30:	7f 4f       	sbci	r23, 0xFF	; 255
    4e32:	8f 4f       	sbci	r24, 0xFF	; 255
    4e34:	9f 4f       	sbci	r25, 0xFF	; 255
    4e36:	99 23       	and	r25, r25
    4e38:	a9 f0       	breq	.+42     	; 0x4e64 <__floatsisf+0x40>
    4e3a:	f9 2f       	mov	r31, r25
    4e3c:	96 e9       	ldi	r25, 0x96	; 150
    4e3e:	bb 27       	eor	r27, r27
    4e40:	93 95       	inc	r25
    4e42:	f6 95       	lsr	r31
    4e44:	87 95       	ror	r24
    4e46:	77 95       	ror	r23
    4e48:	67 95       	ror	r22
    4e4a:	b7 95       	ror	r27
    4e4c:	f1 11       	cpse	r31, r1
    4e4e:	f8 cf       	rjmp	.-16     	; 0x4e40 <__floatsisf+0x1c>
    4e50:	fa f4       	brpl	.+62     	; 0x4e90 <__floatsisf+0x6c>
    4e52:	bb 0f       	add	r27, r27
    4e54:	11 f4       	brne	.+4      	; 0x4e5a <__floatsisf+0x36>
    4e56:	60 ff       	sbrs	r22, 0
    4e58:	1b c0       	rjmp	.+54     	; 0x4e90 <__floatsisf+0x6c>
    4e5a:	6f 5f       	subi	r22, 0xFF	; 255
    4e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e60:	9f 4f       	sbci	r25, 0xFF	; 255
    4e62:	16 c0       	rjmp	.+44     	; 0x4e90 <__floatsisf+0x6c>
    4e64:	88 23       	and	r24, r24
    4e66:	11 f0       	breq	.+4      	; 0x4e6c <__floatsisf+0x48>
    4e68:	96 e9       	ldi	r25, 0x96	; 150
    4e6a:	11 c0       	rjmp	.+34     	; 0x4e8e <__floatsisf+0x6a>
    4e6c:	77 23       	and	r23, r23
    4e6e:	21 f0       	breq	.+8      	; 0x4e78 <__floatsisf+0x54>
    4e70:	9e e8       	ldi	r25, 0x8E	; 142
    4e72:	87 2f       	mov	r24, r23
    4e74:	76 2f       	mov	r23, r22
    4e76:	05 c0       	rjmp	.+10     	; 0x4e82 <__floatsisf+0x5e>
    4e78:	66 23       	and	r22, r22
    4e7a:	71 f0       	breq	.+28     	; 0x4e98 <__floatsisf+0x74>
    4e7c:	96 e8       	ldi	r25, 0x86	; 134
    4e7e:	86 2f       	mov	r24, r22
    4e80:	70 e0       	ldi	r23, 0x00	; 0
    4e82:	60 e0       	ldi	r22, 0x00	; 0
    4e84:	2a f0       	brmi	.+10     	; 0x4e90 <__floatsisf+0x6c>
    4e86:	9a 95       	dec	r25
    4e88:	66 0f       	add	r22, r22
    4e8a:	77 1f       	adc	r23, r23
    4e8c:	88 1f       	adc	r24, r24
    4e8e:	da f7       	brpl	.-10     	; 0x4e86 <__floatsisf+0x62>
    4e90:	88 0f       	add	r24, r24
    4e92:	96 95       	lsr	r25
    4e94:	87 95       	ror	r24
    4e96:	97 f9       	bld	r25, 7
    4e98:	08 95       	ret

00004e9a <__fp_cmp>:
    4e9a:	99 0f       	add	r25, r25
    4e9c:	00 08       	sbc	r0, r0
    4e9e:	55 0f       	add	r21, r21
    4ea0:	aa 0b       	sbc	r26, r26
    4ea2:	e0 e8       	ldi	r30, 0x80	; 128
    4ea4:	fe ef       	ldi	r31, 0xFE	; 254
    4ea6:	16 16       	cp	r1, r22
    4ea8:	17 06       	cpc	r1, r23
    4eaa:	e8 07       	cpc	r30, r24
    4eac:	f9 07       	cpc	r31, r25
    4eae:	c0 f0       	brcs	.+48     	; 0x4ee0 <__fp_cmp+0x46>
    4eb0:	12 16       	cp	r1, r18
    4eb2:	13 06       	cpc	r1, r19
    4eb4:	e4 07       	cpc	r30, r20
    4eb6:	f5 07       	cpc	r31, r21
    4eb8:	98 f0       	brcs	.+38     	; 0x4ee0 <__fp_cmp+0x46>
    4eba:	62 1b       	sub	r22, r18
    4ebc:	73 0b       	sbc	r23, r19
    4ebe:	84 0b       	sbc	r24, r20
    4ec0:	95 0b       	sbc	r25, r21
    4ec2:	39 f4       	brne	.+14     	; 0x4ed2 <__fp_cmp+0x38>
    4ec4:	0a 26       	eor	r0, r26
    4ec6:	61 f0       	breq	.+24     	; 0x4ee0 <__fp_cmp+0x46>
    4ec8:	23 2b       	or	r18, r19
    4eca:	24 2b       	or	r18, r20
    4ecc:	25 2b       	or	r18, r21
    4ece:	21 f4       	brne	.+8      	; 0x4ed8 <__fp_cmp+0x3e>
    4ed0:	08 95       	ret
    4ed2:	0a 26       	eor	r0, r26
    4ed4:	09 f4       	brne	.+2      	; 0x4ed8 <__fp_cmp+0x3e>
    4ed6:	a1 40       	sbci	r26, 0x01	; 1
    4ed8:	a6 95       	lsr	r26
    4eda:	8f ef       	ldi	r24, 0xFF	; 255
    4edc:	81 1d       	adc	r24, r1
    4ede:	81 1d       	adc	r24, r1
    4ee0:	08 95       	ret

00004ee2 <__ctype_isfalse>:
    4ee2:	99 27       	eor	r25, r25
    4ee4:	88 27       	eor	r24, r24

00004ee6 <__ctype_istrue>:
    4ee6:	08 95       	ret

00004ee8 <__prologue_saves__>:
    4ee8:	2f 92       	push	r2
    4eea:	3f 92       	push	r3
    4eec:	4f 92       	push	r4
    4eee:	5f 92       	push	r5
    4ef0:	6f 92       	push	r6
    4ef2:	7f 92       	push	r7
    4ef4:	8f 92       	push	r8
    4ef6:	9f 92       	push	r9
    4ef8:	af 92       	push	r10
    4efa:	bf 92       	push	r11
    4efc:	cf 92       	push	r12
    4efe:	df 92       	push	r13
    4f00:	ef 92       	push	r14
    4f02:	ff 92       	push	r15
    4f04:	0f 93       	push	r16
    4f06:	1f 93       	push	r17
    4f08:	cf 93       	push	r28
    4f0a:	df 93       	push	r29
    4f0c:	cd b7       	in	r28, 0x3d	; 61
    4f0e:	de b7       	in	r29, 0x3e	; 62
    4f10:	ca 1b       	sub	r28, r26
    4f12:	db 0b       	sbc	r29, r27
    4f14:	0f b6       	in	r0, 0x3f	; 63
    4f16:	f8 94       	cli
    4f18:	de bf       	out	0x3e, r29	; 62
    4f1a:	0f be       	out	0x3f, r0	; 63
    4f1c:	cd bf       	out	0x3d, r28	; 61
    4f1e:	09 94       	ijmp

00004f20 <__epilogue_restores__>:
    4f20:	2a 88       	ldd	r2, Y+18	; 0x12
    4f22:	39 88       	ldd	r3, Y+17	; 0x11
    4f24:	48 88       	ldd	r4, Y+16	; 0x10
    4f26:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f28:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f30:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f32:	b9 84       	ldd	r11, Y+9	; 0x09
    4f34:	c8 84       	ldd	r12, Y+8	; 0x08
    4f36:	df 80       	ldd	r13, Y+7	; 0x07
    4f38:	ee 80       	ldd	r14, Y+6	; 0x06
    4f3a:	fd 80       	ldd	r15, Y+5	; 0x05
    4f3c:	0c 81       	ldd	r16, Y+4	; 0x04
    4f3e:	1b 81       	ldd	r17, Y+3	; 0x03
    4f40:	aa 81       	ldd	r26, Y+2	; 0x02
    4f42:	b9 81       	ldd	r27, Y+1	; 0x01
    4f44:	ce 0f       	add	r28, r30
    4f46:	d1 1d       	adc	r29, r1
    4f48:	0f b6       	in	r0, 0x3f	; 63
    4f4a:	f8 94       	cli
    4f4c:	de bf       	out	0x3e, r29	; 62
    4f4e:	0f be       	out	0x3f, r0	; 63
    4f50:	cd bf       	out	0x3d, r28	; 61
    4f52:	ed 01       	movw	r28, r26
    4f54:	08 95       	ret

00004f56 <_exit>:
    4f56:	f8 94       	cli

00004f58 <__stop_program>:
    4f58:	ff cf       	rjmp	.-2      	; 0x4f58 <__stop_program>
